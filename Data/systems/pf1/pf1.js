class ChatMessagePF extends ChatMessage{static _initRollObject(e){if(Array.isArray(e))return e.map((e=>this._initRollObject(e)));if(null!=e&&"object"==typeof e&&"class"in e)return Roll.fromData(e);if("object"==typeof e&&null!=e)for(const[t,s]of Object.entries(e))e[t]=this._initRollObject(s);return e}get itemSource(){const e=this.flags?.pf1?.metadata?.item;if(e){const t=this.constructor.getSpeakerActor(this.speaker);return t?.items.get(e)}return null}get hasItemSource(){return void 0!==this.flags?.pf1?.metadata?.item}get measureTemplate(){const e=this.flags?.pf1?.metadata?.template;if(!e)return null;return canvas.templates.get(e)||null}get targets(){const e=this.flags?.pf1?.metadata?.targets??[];return canvas.tokens.placeables.filter((t=>e.includes(t.id)))}prepareDerivedData(){super.prepareDerivedData(),this.systemRolls=this.constructor._initRollObject(this.flags?.pf1?.metadata?.rolls??{})}}const customRolls=function(e,t,s){if(e.match(/^\/(\w+)(?: +([^#]+))(?:#(.+))?/)){const e=RegExp.$1?.toUpperCase(),a=RegExp.$2,i=RegExp.$3;t=t??ChatMessage.implementation.getSpeaker();const n=ChatMessage.implementation.getSpeakerActor(t),o=t.scene?game.scenes.get(t.scene):canvas.scene,r=o?.tokens.get(t.token),l=r?.uuid;switch(e){case"D":case"DAMAGE":case"H":case"HEAL":s=s??n?.getRollData()??{};return new Roll(a,s).evaluate().then((async s=>{s.total;const a="HEAL"===e||"H"===e,n=await renderTemplate("systems/pf1/templates/chat/simple-damage.hbs",{tokenId:l,isHealing:a,css:a?"heal":"damage",roll:s}),o={type:CONST.CHAT_MESSAGE_TYPES.ROLL,roll:s,flavor:i,sound:CONFIG.sounds.dice,speaker:t,rollMode:game.settings.get("core","rollMode"),content:n,flags:{pf1:{subject:{health:a?"healing":"damage"}}}};ChatMessage.implementation.create(o)}))}}return!1};class SemanticVersion{static re=/^(0|[1-9]\d*)\.(0|[1-9]\d*)(?:\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)?$/;constructor(){this.major=0,this.minor=0,this.patch=0,this.preRelease="",this.buildMetaData=""}static fromString(e){if(e.match(this.re)){let e=new this;return e.major=parseInt(RegExp.$1),e.minor=parseInt(RegExp.$2),e.patch=parseInt(RegExp.$3||0),e.preRelease=RegExp.$4||"",e.buildMetaData=RegExp.$5||"",e}return null}toString(){return`${this.major}.${this.minor}.${this.patch}`}isHigherThan(e){return this.major>e.major||(this.major===e.major&&this.minor>e.minor||this.major===e.major&&this.minor===e.minor&&this.patch>e.patch)}isLowerThan(e){return this.major<e.major||(this.major===e.major&&this.minor<e.minor||this.major===e.major&&this.minor===e.minor&&this.patch<e.patch)}}class RollPF extends Roll{get totalHalved(){return Math.floor(this.total/2)}get dice(){return this.terms.reduce(((e,t)=>(t instanceof DiceTerm?e.push(t):(t instanceof PoolTerm||t.inheritDice)&&(e=e.concat(t.dice)),e)),[]).concat(this._dice)}get flavor(){return this.options?.flavor}static safeRoll(e,t={},s,{suppressError:a=!1}={},i={}){let n;!0!==i.async&&foundry.utils.logCompatibilityWarning("RollPF.safeRoll() is becoming async to match upstream API changes. Use RollPF.safeRollSync() for any non-dice synchronous rolling. Pass async=true to evalOpts to suppress this warning.",{since:"PF1 v10",until:"PF1 v11"});try{n=this.create(e,t).evaluate({...i,async:!1})}catch(e){n=this.create("0",t).evaluate({...i,async:!1}),n.err=e}return n.warning&&(n.err=Error("This formula had a value replaced with null.")),n.err&&(s&&!a?console.error(s,n.err):CONFIG.debug.roll&&console.error(n.err)),n}static safeRollSync(e,t,s,a,i={}){i.async=!0;const n=this.safeRoll(e,t,s,a,i);return n.isDeterministic||!0===i.maximize||!0===i.minimize||foundry.utils.logCompatibilityWarning("RollPF.safeRollSync() will not support non-deterministic formulas in the future.",{since:"PF1 v10",until:"PF1 v11"}),n}static safeRollAsync(e,t,s,a,i={}){return i.async=!0,this.safeRoll(e,t,s,a,i)}static safeTotal(e,t){return foundry.utils.logCompatibilityWarning("RollPF.safeTotal() is deprecated in favor of RollPF.safeRoll().total",{since:"PF1 v10",until:"PF1 v11"}),RollPF.safeRoll(e,t).total}static simplifyTerms(e){let t=e.reduce(((e,t)=>{const s=e[e.length-1];if(!(t instanceof OperatorTerm)&&s instanceof StringTerm)return s.term+=t.total,foundry.utils.mergeObject(s.options,t.options),e;const a=s instanceof NumericTerm;if(s&&a&&t instanceof StringTerm&&t.term.match(/\[(.+)\]/))return s.options.flavor=RegExp.$1,e;if(s&&t instanceof StringTerm){const a=/^\[(?<flavor>.+)\]$/.exec(t.term)?.groups.flavor;if(a&&s instanceof pf1.dice.terms.base.FunctionTerm)return s.options.flavor=a,e}const i=s instanceof OperatorTerm;return s&&!i&&t instanceof StringTerm?(t.term=s.total+""+t.term,foundry.utils.mergeObject(t.options,s.options),e[e.length-1]=t,e):(e.push(t),e)}),[]);return t=t.map((e=>{if(!(e instanceof StringTerm))return e;const t=this._classifyStringTerm(e.formula,{intermediate:!1});return t.options=foundry.utils.mergeObject(e.options,t.options,{inplace:!1}),t})),t[0]instanceof OperatorTerm&&"-"!==t[0].operator&&t.shift(),t.at(-1)instanceof OperatorTerm&&t.pop(),t}static cleanFlavor(e){return e.replace(/\[\];/g,"")}async getTooltip(){const e=this.dice.filter((e=>e.results.some((e=>e.active)))).map((e=>e.getTooltipData())),t=this.terms.reduce(((e,t,s,a)=>{const i=t instanceof NumericTerm||t.hasNumericTooltip?t.getTooltipData():void 0;if(void 0!==i){const n=a[s-1];t instanceof NumericTerm&&n&&n instanceof OperatorTerm&&"-"===n.operator&&(i.total=-i.total),i.flavor??=game.i18n.localize("PF1.Undefined"),e.push(i)}return e}),[]);return renderTemplate("systems/pf1/templates/dice/tooltip.hbs",{parts:e,numericParts:t})}static parse(e,t){const s=super.parse(e,t),a=[];for(let e=0;e<s.length;e++){const t=s[e];s[e+1];const i=s[e-1];if(t instanceof StringTerm){const e=Object.values(pf1.dice.terms.aux).find((e=>e.matchTerm(t.term)));if(e){a.push(new e({term:t.term}));continue}}else if(t instanceof ParentheticalTerm&&i instanceof StringTerm){const e=Object.values(pf1.dice.terms.fn).find((e=>e.matchTerm(i.term)));if(e?.isFunction){const s=e.parseArgs(this._lenientSplitArgs(t.term));a.pop(),a.push(new e({terms:s}));continue}}a.push(t)}return a}static _lenientSplitArgs(e){return e.split(",").reduce(((e,t)=>{if(!(t=t.trim()))return e;if(!e.length)return e.push(t),e;const s=e[e.length-1];if(this.validate(s))e.push(t);else{Object.values(pf1.dice.terms.aux).find((e=>e.matchTerm(s)))?e.push(t):e[e.length-1]=[s,t].join(",")}return e}),[])}}const createTag=function(e){return 0===e.length&&(e="tag"),e.replace(/[^a-zA-Z0-9\s]/g,"").split(/\s+/).map(((e,t)=>(e=e.toLowerCase(),t>0&&(e=e.substring(0,1).toUpperCase()+e.substring(1)),e))).join("")},fractionalToString=e=>{const t=Math.floor(e),s=Math.roundDecimals(e-t,3);if(0===s)return""+t;const a=[];return 0!==t&&a.push(t),.25===s?a.push("1/4"):.333===s?a.push("1/3"):.5===s?a.push("1/2"):.667===s?a.push("2/3"):.75===s&&a.push("3/4"),a.join(" ")},e={fromString:e=>"1/8"===e?.125:"1/6"===e?.1625:"1/4"===e?.25:"1/3"===e?.3375:"1/2"===e?.5:parseFloat(e),fromNumber:(e=0)=>.125===e?"1/8":.1625===e?"1/6":.25===e?"1/4":.3375===e?"1/3":.5===e?"1/2":Number.isNumeric(e)?e?.toString()??"":"0"},convertDistance=function(e,t="ft"){return"metric"===getDistanceSystem()?"mi"===t?[Math.round(1.6*e*100)/100,"km"]:[Math.round(e/5*1.5*100)/100,"m"]:(["ft","mi"].includes(t)||(t="ft"),[e,t])};const getDistanceSystem=()=>{let e=game.settings.get("pf1","distanceUnits");return"default"===e&&(e=game.settings.get("pf1","units")),e},getWeightSystem=()=>{let e=game.settings.get("pf1","weightUnits");return"default"===e&&(e=game.settings.get("pf1","units")),e},measureDistance=function(e,t,{ray:s=null,diagonalRule:a="5105",state:i={diagonals:0,cells:0}}={}){s??=new Ray(e,t);const n=canvas.dimensions.size,o=Math.ceil(Math.abs(s.dx/n)),r=Math.ceil(Math.abs(s.dy/n)),l=Math.min(o,r),c=Math.abs(r-o);i.diagonals+=l;let u=0;if("5105"===a){const e=Math.floor(i.diagonals/2)-Math.floor((i.diagonals-l)/2);u=2*e+(l-e)+c}else u=c+l;return i.cells+=u,u*canvas.dimensions.distance},naturalSort=function(e,t="",{numeric:s=!0,ignorePunctuation:a=!1}={}){const i=new Intl.Collator(game.settings.get("core","language"),{numeric:s,ignorePunctuation:a});return e.sort(((e,s)=>{const a=t?t in e?e[t]:foundry.utils.getProperty(e,t):e,n=t?t in s?s[t]:foundry.utils.getProperty(s,t):s;return i.compare(a,n)}))},adjustNumberByStringCommand=function(e,t,s=null,a=null){let i=e;const n=t.match(/(?<abs>=)?(?<op>[+-]+)?(?<value>\d+)/);if(n){const{op:t,abs:s,value:a}=n.groups,o="="==s||["--","++"].includes(t)||!s&&!t,r=["-","--"].includes(t);let l=parseInt(a);r&&(l=-l),i=o?l:e+l}else i=""===t&&null!==a?a:parseFloat(t||"0");return Number.isFinite(s)&&(i=Math.min(i,s)),Number.isNaN(i)&&(console.warn("Input resulted in NaN",{initial:e,command:t}),i=e),i};async function openJournal(e,t={}){const s=await fromUuid(e);return s instanceof JournalEntryPage?s.parent.sheet.render(!0,{pageId:s.id,editable:!1,collapsed:!0,width:600,height:700,...t}):s.sheet.render(!0,{editable:!1,...t}),s}const getBuffTargets=function(e,t="buffs"){const s=foundry.utils.deepClone({buffs:pf1.config.buffTargets,contextNotes:pf1.config.contextNoteTargets}[t]);if(e)for(const t of e._skillTargets){const a=t.split(".").slice(1).join("."),i=e.getSkillInfo(a);s[t]={label:i.fullName,category:"skill"}}else for(const[e,t]of Object.entries(pf1.config.skills))s["skill."+e]={label:t,category:"skill"};const a=e?.system.attributes?.spells?.spellbooks??{primary:{label:game.i18n.localize("PF1.SpellBookPrimary")},secondary:{label:game.i18n.localize("PF1.SpellBookSecondary")},tertiary:{label:game.i18n.localize("PF1.SpellBookTertiary")},spelllike:{label:game.i18n.localize("PF1.SpellBookSpelllike")}},i=e?._spellbookTargets??[];for(const e of Object.keys(CONFIG.PF1.spellSchools))i.push("dc.school."+e,"cl.school."+e);for(const e of i){const t=/^(?<key>\w+)(?:\.(?<category>\w+))?\.(?<subKey>\w+)$/.exec(e);if(!t)continue;const{key:i,category:n,subKey:o}=t.groups;let r;r="school"===n?CONFIG.PF1.spellSchools[o]:a[o]?.label??o;const l=n?`${i}.${n}`:i,c=game.i18n.localize({"dc.school":"PF1.DC",concn:"PF1.Concentration","cl.book":"PF1.CasterLevel","cl.school":"PF1.CasterLevelAbbr"}[l]);s[e]={label:`${c} (${r})`,category:"spell"}}return s},getBuffTargetDictionary=function(e,t="buffs"){const s=getBuffTargets(e,t),a=foundry.utils.deepClone({buffs:pf1.config.buffTargetCategories,contextNotes:pf1.config.contextNoteCategories}[t]);let i=Object.entries(s).reduce(((e,t)=>{const s=t[0],i=t[1].label,n=t[1].category,o=t[1].icon;return s.startsWith("~")||(e[n]=e[n]||{label:a[n].label,items:[]},e[n].items.push({key:s,label:i,icon:o})),e}),{});return i=Object.entries(i).reduce(((e,t)=>{const s=t[0],a=t[1].label,i=t[1].items;return e.push({key:s,label:a,items:i}),e}),[]),i=naturalSort(i,"label"),i},sortArrayByName=function(e){e=foundry.utils.deepClone(e);for(const t of e)t.name=t.name.toLocaleLowerCase();return naturalSort(e,"name",{numeric:!0,ignorePunctuation:!0})},binarySearch=function(e,t,s){let a=0,i=e.length-1;for(;a<=i;){const n=i+a>>1,o=s(t,e[n]);if(o>0)a=n+1;else{if(!(o<0))return n;i=n-1}}return-a-1};function uniquePermutations(e){if((e=e.map((e=>e.trim())).filter((e=>e?.length>0))).length>7)return console.warn("Array too large. Not attempting.",e),!1;const t=new Set;for(let s=0;s<e.length;s+=1){const a=uniquePermutations(e.slice(0,s).concat(e.slice(s+1)));if(a.length)for(let i=0;i<a.length;i+=1)t.add([e[s]].concat(a[i]));else t.add([e[s]])}return[...t]}function createInlineFormula(e,t,s){let[a,i,n,o]=e.slice(1,5);if(a)return TextEditor._createInlineRoll(e,t,{...s,rolls:!0});const r=["inline-preroll","inline-formula"];3===n.length&&(i+="]");const l=`${a}${i}`;let c=null;try{c=ChatLog.parse(l)}catch(e){return console.error("Failed to parse formula:",l,e),null}const[u,p]=c,[m,d,h,g]=p,f=document.createElement("a");u&&(r.push(u),f.dataset.mode=u),f.dataset.flavor=g?.trim()??o??"",i=Roll.defaultImplementation.replaceFormulaData(i.trim(),t||{});try{i=pf1.utils.formula.simplify(i)}catch(e){return console.error(e),null}return f.dataset.formula=i,f.classList.add(...r),f.dataset.tooltip=i,o=o?`${o}: ${i}`:i,f.innerHTML='<i class="fas fa-dice-d20"></i> '+o,f}function enrichHTMLUnrolled(e,{rollData:t,secrets:s,rolls:a=!1,documents:i,relativeTo:n}={}){let o=TextEditor.enrichHTML(e,{secrets:s,rolls:a,documents:i,rollData:t,async:!1,relativeTo:n});if(!a){const e=document.createElement("div");e.innerHTML=o+"";const s=TextEditor._getTextNodes(e),a=/\[\[(\/[a-zA-Z]+\s)?(.*?)(]{2,3})(?:{([^}]+)})?/gi;TextEditor._replaceTextContent(s,a,(e=>createInlineFormula(e,t))),o=e.innerHTML}return o}async function enrichHTMLUnrolledAsync(e,{rollData:t,secrets:s,rolls:a=!1,documents:i,relativeTo:n}={}){let o=await TextEditor.enrichHTML(e,{secrets:s,rolls:a,documents:i,rollData:t,async:!0,relativeTo:n});if(!a){const e=document.createElement("div");e.innerHTML=o+"";const s=TextEditor._getTextNodes(e),a=/\[\[(\/[a-zA-Z]+\s)?(.*?)(]{2,3})(?:{([^}]+)})?/gi;TextEditor._replaceTextContent(s,a,(e=>createInlineFormula(e,t))),o=e.innerHTML}return o}const calculateRangeFormula=(e,t="ft",s={})=>{switch(t){case"melee":case"touch":return s.range?.melee??0;case"reach":return s.range?.reach??0;case"close":return RollPF.safeRollSync(pf1.config.spellRangeFormulas.close,s).total;case"medium":return RollPF.safeRollSync(pf1.config.spellRangeFormulas.medium,s).total;case"long":return RollPF.safeRollSync(pf1.config.spellRangeFormulas.long,s).total;case"mi":return 5280*RollPF.safeRollSync(e,s).total;case"m":return RollPF.safeRollSync(e,s).total/1.5*5;case"km":return 1e3*RollPF.safeRollSync(e,s).total/1.5*5;default:return RollPF.safeRollSync(e,s).total}};function calculateRange(e,t="ft",s={}){const a=calculateRangeFormula(e,t,s);return convertDistance(a,t)}function keepUpdateArray(e,t,s){const a=foundry.utils.getProperty(t,s);if(null==a)return;if(Array.isArray(a))return;const i=foundry.utils.deepClone(foundry.utils.getProperty(e,s)||[]);for(const[e,t]of Object.entries(a))if("Object"===foundry.utils.getType(t)){const s=foundry.utils.expandObject(t);i[e]=foundry.utils.mergeObject(i[e],s)}else i[e]=t;foundry.utils.setProperty(t,s,i)}const diffObjectAndArray=function(e,t,{inner:s=!1,keepLength:a=!1}={}){return Object.keys(t).reduce(((i,n)=>{if(s&&!(n in e))return i;const[o,r]=function _difference(e,t){const i=getType(e);if(i!==getType(t))return[!0,t];if("Array"===i){if(e.length!==t.length)return[!0,t];const i=[];for(let n=0;n<e.length;n++){const o=diffObjectAndArray(e[n],t[n],{inner:s,keepLength:a});foundry.utils.isEmpty(o)?a&&i.push({}):i.push(o)}return i.length>0?[!0,i]:[!1,i]}if("Object"===i){if(foundry.utils.isEmpty(e)!==foundry.utils.isEmpty(t))return[!0,t];const i=diffObjectAndArray(e,t,{inner:s,keepLength:a});return[!foundry.utils.isEmpty(i),i]}return[e!==t,t]}(e[n],t[n]);return o&&(i[n]=r),i}),{})};const addLowLightVisionToLightConfig=function(e,t){const s=e.object;let a=`<div class="form-group"><label>${game.i18n.localize("PF1.DisableLightLowLightVision")}</label>`;a+='<input type="checkbox" name="flags.pf1.disableLowLight" data-dtype="Boolean"',s.getFlag("pf1","disableLowLight")&&(a+=" checked"),a+="></div>";const i=$(a);t.find('div.tab[data-tab="basic"]').append(i)},patchCore=function(){const e=LightSource.prototype.initialize;LightSource.prototype.initialize=function(t={}){const{dim:s,bright:a}=this.getRadius(t.dim,t.bright);return void 0!==t.dim&&(t.dim=s),void 0!==t.bright&&(t.bright=a),e.call(this,t)},LightSource.prototype.getRadius=function(e,t){const s={dim:e,bright:t};let a={dim:1,bright:1};if(!game.settings.get("pf1","systemVision"))return s;const hasSystemVision=e=>!0!==e.getFlag("pf1","disableLowLight")&&!0!==e.getFlag("pf1","customVisionRules"),i=this.object?.document;if(i&&!hasSystemVision(i))return s;const n=game.user.isGM||game.settings.get("pf1","lowLightVisionMode"),o=canvas.tokens.placeables.filter((e=>{const t=e.document;return e.actor?.testUserPermission(game.user,"OBSERVER")&&(!n||e.controlled)&&hasSystemVision(t)})),r=o.filter((e=>!0===e.actorVision.lowLight));if(n){if(r.length&&r.length===o.length){a={dim:999,bright:999};for(const e of r){const t=e.actorVision;a.dim=Math.min(a.dim,t.lowLightMultiplier),a.bright=Math.min(a.bright,t.lowLightMultiplierBright)}}}else for(const e of r){const t=e.actorVision;a.dim=Math.max(a.dim,t.lowLightMultiplier),a.bright=Math.max(a.bright,t.lowLightMultiplierBright)}return s.dim*=a.dim,s.bright*=a.bright,s}},t=Object.freeze(Object.defineProperty({__proto__:null,addLowLightVisionToLightConfig,patchCore},Symbol.toStringTag,{value:"Module"}));{const e=ChatLog.parse;ChatLog.parse=function(t){const s=t.match(/^\/(\w+)(?: +([^#]+))(?:#(.+))?/),a=s?.[1]?.toUpperCase();return["HEAL","H","DAMAGE","D"].includes(a)?(s[2]=s[0].slice(1),["custom",s]):e.call(this,t)};const t=TextEditor._onClickInlineRoll;TextEditor._onClickInlineRoll=function(e){e.preventDefault();const s=e.currentTarget;if(!s.classList.contains("custom"))return t.call(this,e);const a="/"+s.dataset.formula,i=ChatMessage.implementation.getSpeaker(),n=ChatMessage.implementation.getSpeakerActor(i);let o=n?n.getRollData():{};const r=s.closest(".sheet");if(r){const e=ui.windows[r.dataset.appid];["Actor","Item"].includes(e?.document.documentName)&&(o=e.object.getRollData())}return customRolls(a,i,o)},$._data($("body").get(0),"events")?.click?.find((e=>"a.inline-roll"===e.selector))&&($("body").off("click","a.inline-roll",t),$("body").on("click","a.inline-roll",TextEditor._onClickInlineRoll))}{const e=KeyboardManager.prototype._onAlt;KeyboardManager.prototype._onAlt=function(t,s,a){pf1.tooltip&&(s||(pf1.tooltip.lock.new=!0),e.call(this,t,s,a),s||(pf1.tooltip.lock.new=!1))}}NumericTerm.prototype.getTooltipData=function(){return{formula:this.expression,total:this.total,flavor:this.flavor}},NumericTerm.REGEXP=RegExp(`^((?:\\d+\\.|\\.)?\\d+)${RollTerm.FLAVOR_REGEXP_STRING}?$`),ParentheticalTerm.CLOSE_REGEXP=RegExp(`\\)${RollTerm.FLAVOR_REGEXP_STRING}?`,"g"),OperatorTerm.REGEXP=/(?:&&|\|\||\*\*|%|\+|-|\*|\/|\\%|\||:|\?)|(?<![a-z])[!=<>]+/g,OperatorTerm.OPERATORS.push("\\%","!","?",":","=","<",">","==","===","<=",">=","??","||","&&","**");{const e=TextEditor._createContentLink;TextEditor._createContentLink=function(t,{async:s=!1,relativeTo:a}={}){const[i,n,o,r]=t.slice(1,5),l=e.call(this,t,{async:s,relativeTo:a});if(r?.indexOf("::")>-1){const e=r.split("::"),t=e.pop();e.length&&(e.forEach((e=>{let[t,s]=e.split(/(?<!\\):/);switch(t&&s||(s=t,t="extra"),t){case"icon":l.firstChild.className="fas fa-"+s;break;case"class":l.classList.add(...s.split(" "));break;default:l.setAttribute("data-"+t,s)}})),l.lastChild.textContent=t)}return l}}{const e=Roll.fromData;Roll.fromData=function(t,...s){return"RollPF$1"===t.class&&(t.class="RollPF"),e.call(this,t,...s)}}{const e=ImagePopout._handleShareImage;ImagePopout._handleShareImage=function({image:t,title:s,caption:a,uuid:i,showTitle:n}={}){try{const e=fromUuidSync(i);e instanceof Item&&(s=e.name)}catch(e){console.error("Failed to protect against document identity leakage",e)}return e.call(this,{image:t,title:s,caption:a,uuid:i,showTitle:n})}}KeyboardManager.prototype._onFocusIn,KeyboardManager.prototype._onFocusIn=function(e){const t=[HTMLInputElement,HTMLSelectElement,HTMLTextAreaElement,HTMLOptionElement];(e.target.isContentEditable||t.some((t=>e.target instanceof t)))&&this.releaseKeys()},Object.defineProperty(KeyboardManager.prototype,"hasFocus",{get(){const e=["input","select","textarea","option","[contenteditable]"].map((e=>e+":focus")).join(", ");return document.querySelectorAll(e).length>0}}),patchCore();const s={spells:{label:"PF1.BrowseSpells"},items:{label:"PF1.BrowseItems"},bestiary:{label:"PF1.BrowseBestiary"},feats:{label:"PF1.BrowseFeats"},classes:{label:"PF1.BrowseClasses"},races:{label:"PF1.BrowseRaces"},buffs:{label:"PF1.BrowseBuffs",wide:!0}};function compendiumButtonClick(e){e.preventDefault();const t=e.target.dataset.category;pf1.applications.compendiums[t]._render(!0,{focus:!0})}Hooks.on("renderCompendiumDirectory",(async(e,[t],a)=>{const i=t.querySelector("footer.directory-footer");i.classList.add("action-buttons");for(const[e,t]of Object.entries(s)){const s=document.createElement("button");s.type="button",s.dataset.category=e,s.classList.add("compendium",e),s.innerText=game.i18n.localize(t.label),t.wide&&s.classList.add("colspan-2"),i.append(s),s.addEventListener("click",compendiumButtonClick)}})),Hooks.on("getCompendiumDirectoryEntryContext",((e,t)=>{t.unshift({name:game.i18n.localize("PF1.CompendiumBrowser.HidePack"),icon:'<i class="fas fa-low-vision"></i>',condition:([e])=>{const t=game.packs.get(e.dataset.pack);return!0!==t.config.pf1?.disabled},callback:([e])=>{game.packs.get(e.dataset.pack).configure({pf1:{disabled:!0}})}},{name:game.i18n.localize("PF1.CompendiumBrowser.ShowPack"),icon:'<i class="fas fa-eye"></i>',condition:([e])=>{const t=game.packs.get(e.dataset.pack);return!0===t.config.pf1?.disabled},callback:([e])=>{game.packs.get(e.dataset.pack).configure({pf1:{disabled:!1}})}})}));const getMessage=e=>game.messages.get(e.dataset.messageId),isOwnedSpellCard=e=>{const t=e.itemSource;return t&&"spell"===t.type&&t.isOwner&&!!t.actor};Hooks.on("getChatLogEntryContext",(function spellCardContextMenu(e,t){t.unshift({name:"PF1.ConcentrationCheck",icon:'<i class="fa-solid fa-brain context-icon pf1 concentration"></i>',condition:([e])=>isOwnedSpellCard(getMessage(e)),callback:([e])=>{const t=getMessage(e),s=t.itemSource,a=s?.actor;a.rollConcentration(s.system.spellbook,{messageId:t.id})}},{name:"PF1.CasterLevelCheck",icon:'<i class="fa-solid fa-wand-magic-sparkles context-icon pf1 caster-level"></i>',condition:([e])=>isOwnedSpellCard(getMessage(e)),callback:([e])=>{const t=getMessage(e),s=t.itemSource,a=s?.actor;a.rollCL(s.system.spellbook,{messageId:t.id})}})}));const measureDistances=function(e,t={}){if(!t.gridSpaces)return BaseGrid.prototype.measureDistances.call(this,e,t);const s=game.settings.get("pf1","diagonalMovement"),a={diagonals:0};return e.map((e=>measureDistance(null,null,{ray:e.ray,diagonalRule:s,state:a})))},a=TokenHUD.prototype._getStatusEffectChoices;TokenHUD.prototype._getStatusEffectChoices=function(){const e=a.call(this),t={},s=this.object.actor?.itemTypes.buff??[];for(const e of s)t["buff-"+e.id]={id:e.id,title:e.name,src:e.img,isActive:e.isActive,isOverlay:!1,cssClass:e.isActive?"active":""};return{...e,...t}},TokenHUD.prototype._onToggleEffect=function(e,{overlay:t=!1}={}){e.preventDefault();const s=e.currentTarget,a=s.dataset.statusId,i=a&&this.object.actor?CONFIG.statusEffects.find((e=>e.id===a))??a:s.getAttribute("src");return this.object.toggleEffect(i,{overlay:t})};const i=Object.freeze(Object.defineProperty({__proto__:null,measureDistances},Symbol.toStringTag,{value:"Module"}));const runSocketFunction=async function(e,t){const s=game.users.activeGM.isSelf,a=game.users.get(t);try{switch(e.eventType){case"currencyTransfer":{if(!s)return;let t=await fromUuid(e.data.sourceActor),a=await fromUuid(e.data.destActor);e.data.sourceContainer&&(t=t.items.get(e.data.sourceContainer)),e.data.destContainer&&(a=a.items.get(e.data.destContainer));const i=e.data.amount;pf1.applications.CurrencyTransfer.transfer(t,a,i,e.data.sourceAlt,e.data.destAlt,!1);break}case"alterChatTargetAttribute":s&&alterChatTargetAttribute(e);break;case"giveItem":{if(!s)return;const t=await fromUuid(e.item),i=t.actor;if(!i.testUserPermission(a,"OWNER"))return;const n=await fromUuid(e.targetActor),o=t.toObject();await n.createEmbeddedDocuments("Item",[o]),await i.deleteEmbeddedDocuments("Item",[t.id]);break}case"refreshActorSheets":a.hasPermission(CONST.USER_PERMISSIONS.SETTINGS_MODIFY)&&pf1.utils.refreshActors({renderOnly:!0})}}catch(e){console.log("PF1 | Socket Error:",e)}},alterChatTargetAttribute=function(e){const t=game.messages.get(e.message),s=$(t.data.content);if(null!=e.save){const a=s.find(`div.attack-targets .target[data-uuid="${e.targetUuid}"] .saving-throws .${e.save}`).find(".value");return a.html(""+e.value),e.isFailure?a.addClass("failure"):a.removeClass("failure"),e.isSuccess?a.addClass("success"):a.removeClass("success"),t.update({content:s.prop("outerHTML")})}};class ActorBasePF extends Actor{constructor(...e){super(...e),this._itemTypes??=null}prepareBaseData(){this._itemTypes=null,delete this._rollData,super.prepareBaseData()}getItemByTag(e){return this.items.find((t=>t.system.tag===e))}_itemTypes;get itemTypes(){if(!this._itemTypes){this._itemTypes=super.itemTypes;for(const e of Object.values(this._itemTypes))Object.defineProperties(e,{getName:{value:function(e){return this.find((t=>t.name===e))}},getId:{value:function(e){return this.find((t=>t.system.tag===e))}}})}return this._itemTypes}get activeOwner(){return game.users.filter((e=>e.active&&!e.isGM)).filter((e=>this.testUserPermission(e,"OWNER"))).sort(((e,t)=>e.id>t.id?1:-1))[0]??null??game.users.activeGM}getCombatants(e=game.combat){return e?.combatants.filter((e=>e.actor===this))??[]}get sharesVision(){const e=this.getFlag("pf1","visionSharing");if(!e)return!1;const t=e.users[game.user.id]??null;return!0===t||!1!==t&&(e.default??!1)}get _effectsWithDuration(){const e=[];for(const t of this.allApplicableEffects())t.active&&t._hasDuration&&e.push(t);return e}}class ItemBasePF extends Item{static async createDialog(e={},{parent:t=null,pack:s=null,...a}={}){return pf1.applications.item.CreateDialog.waitPrompt(e,{parent:t,pack:s,options:a})}static async createDocuments(e=[],t={}){Array.isArray(e)||(e=[e]);const s=foundry.utils.deepClone(t);let a;t.parent instanceof Actor&&(a=await this._collectItemSupplements(e,t));const i=await super.createDocuments(e,t);return a?.size&&await this._addSupplementChildLinks(i,a,s),i}static async _collectItemSupplements(e,t){const s=new Collection,collect=async(e,{depth:t=0}={})=>{const a=e.system.links?.supplements??[],i=e.system.class;a.length>5&&console.log("Fetching",a.length,"supplements for",e.name);const n=[];for(const t of a){const{uuid:a}=t;if(!a)continue;const o=await fromUuid(a);if(!o){console.warn("Supplement",a,"not found for",e.uuid??e.flags?.core?.sourceId??e);continue}const r=s.get(a);r?r.count+=1:(s.set(a,{parent:e,item:o,count:1,classLink:i}),n.push(o))}if(n.length){if(t>3)return void console.warn("Stopping collecting supplements deeper than 3 layers");if(s.size>100&&n.length)return void console.warn(`Too many supplements (${s.size}), stopping collecting more`);for(const e of n)await collect(e,{depth:t+1})}};for(const t of e)await collect(t);if(s.size)for(const t of s){const{item:s,count:a,parent:i}=t,n=i?.uuid??i?.flags?.core?.sourceId,o=game.items.fromCompendium(s,{clearFolder:!0});n&&setProperty(o,"flags.pf1.source",n),s.isPhysical&&o.system.quantity>0&&(o.system.quantity*=a),t.classLink&&"feat"===s.type&&"classFeat"===s.system.subType&&(o.system.class=t.classLink),e.push(o)}return s}static async _addSupplementChildLinks(e,t,s){const a=new Collection,i=new Collection;for(const t of e){const e=t.getFlag("core","sourceId");e&&i.set(e,t)}for(const t of e){const e=t.getFlag("pf1","source");if(e){const n=i.get(e);let o=a.get(n.id);o||(o={system:{links:{children:[]}}},o._id=n.id,a.set(n.id,o)),o.system.links.children.push({uuid:t.getRelativeUUID(s.parent)})}}if(a.size)return this.updateDocuments(Array.from(a),s)}getName(e=!1){return this.name}get isActive(){return!0}get activeState(){return this.isActive}async setActive(e,t){throw Error(`Item type ${this.type} does not support ItemBasePF#setActive`)}get canUse(){return this.isActive}}function applyChanges(){this.changeOverrides={};const e=Array.from(this.changes),{targets:t,types:s}=getSortChangePriority.call(this),_sortChanges=function(e,a){const i=t.indexOf(e.target),n=t.indexOf(a.target),o=s.indexOf(e.type),r=s.indexOf(a.type),l=e.priority??0;return(a.priority??0)-l||i-n||o-r};e.sort(((e,t)=>_sortChanges(e,t)));for(const e of this.changeItems)if(e.system.changeFlags)for(const[t,s]of Object.entries(e.system.changeFlags))if(!0===s&&(this.changeFlags[t]=!0,"loseDexToAC"===t)){for(const t of["normal","touch"])getSourceInfo(this.sourceInfo,`system.attributes.ac.${t}.total`).negative.push({value:game.i18n.localize("PF1.ChangeFlagLoseDexToAC"),name:e.name,type:e.type});getSourceInfo(this.sourceInfo,"system.attributes.cmd.total").negative.push({value:game.i18n.localize("PF1.ChangeFlagLoseDexToAC"),name:e.name,type:e.type})}this.refreshDerivedData();const a=e.filter((e=>!0===e.continuous));resetSkills.call(this);for(const t of e){const e=t.getTargets(this);for(const t of e)this.changeOverrides[t]||(this.changeOverrides[t]=createOverride());t._safeApplyChange(this,e,{applySourceInfo:!1});for(const e of a){if(e===t)continue;const s=e.getTargets(this);for(const e of s)this.changeOverrides[e]||(this.changeOverrides[e]=createOverride());e._safeApplyChange(this,s,{applySourceInfo:!1})}this.refreshDerivedData()}for(const t of e)t.applySourceInfo(this);finalizeSkills.call(this)}const createOverride=function(){const e={add:{},set:{}};for(const t of Object.keys(pf1.config.bonusTypes))e.add[t]=null,e.set[t]=null;return e},getSortChangePriority=function(){return{targets:[...this._skillTargets.map(((e,t)=>[e,{sort:76e3+10*t}])),...Object.entries(pf1.config.buffTargets)].sort((([,{sort:e}],[,{sort:t}])=>e-t)).map((([e])=>e)),types:Object.keys(pf1.config.bonusTypes)}},getChangeFlat=function(e,t,s){if(null==e)return[];const a=this.system,i=[];switch(e){case"mhp":i.push("system.attributes.hp.max");break;case"wounds":i.push("system.attributes.wounds.max");break;case"woundThreshold":i.push("system.attributes.wounds.threshold");break;case"vigor":i.push("system.attributes.vigor.max");break;case"str":case"dex":case"con":case"int":case"wis":case"cha":if(["base","untypedPerm"].includes(t)){i.push(`system.abilities.${e}.total`,`system.abilities.${e}.base`);break}i.push(`system.abilities.${e}.total`);break;case"strPen":case"dexPen":case"conPen":case"intPen":case"wisPen":case"chaPen":{const t=e.slice(0,-3);i.push(`system.abilities.${t}.penalty`);break}case"strMod":case"dexMod":case"conMod":case"intMod":case"wisMod":case"chaMod":i.push(`system.abilities.${e.slice(0,3)}.mod`);break;case"carryStr":i.push("system.details.carryCapacity.bonus.total");break;case"carryMult":i.push("system.details.carryCapacity.multiplier.total");break;case"ac":switch(i.push("system.attributes.ac.normal.total","system.attributes.ac.touch.total"),t){case"dodge":case"haste":i.push("system.attributes.cmd.total");break;case"deflection":case"circumstance":case"insight":case"luck":case"morale":case"profane":case"sacred":i.push("system.attributes.ac.flatFooted.total","system.attributes.cmd.total","system.attributes.cmd.flatFootedTotal");break;default:i.push("system.attributes.ac.flatFooted.total"),s<0&&i.push("system.attributes.cmd.total","system.attributes.cmd.flatFootedTotal")}break;case"aac":{const e=["system.ac.normal.total"];switch(t){case"base":e.push("system.ac.normal.base");break;case"enh":e.push("system.ac.normal.enh");break;default:e.push("system.ac.normal.misc")}i.push(...e);break}case"sac":{const e=["system.ac.shield.total"];switch(t){case"base":e.push("system.ac.shield.base");break;case"enh":e.push("system.ac.shield.enh");break;default:e.push("system.ac.shield.misc")}i.push(...e);break}case"nac":{const e=["system.ac.natural.total"];switch(t){case"base":e.push("system.ac.natural.base");break;case"enh":e.push("system.ac.natural.enh");break;default:e.push("system.ac.natural.misc")}i.push(...e);break}case"tac":i.push("system.attributes.ac.touch.total");break;case"ffac":i.push("system.attributes.ac.flatFooted.total");break;case"ffcmd":i.push("system.attributes.cmd.flatFootedTotal");break;case"bab":i.push("system.attributes.bab.total");break;case"~attackCore":i.push("system.attributes.attack.shared");break;case"attack":i.push("system.attributes.attack.general");break;case"mattack":i.push("system.attributes.attack.melee");break;case"nattack":i.push("system.attributes.attack.natural");break;case"rattack":i.push("system.attributes.attack.ranged");break;case"critConfirm":i.push("system.attributes.attack.critConfirm");break;case"allSavingThrows":i.push("system.attributes.savingThrows.fort.total","system.attributes.savingThrows.ref.total","system.attributes.savingThrows.will.total");break;case"fort":i.push("system.attributes.savingThrows.fort.total");break;case"ref":i.push("system.attributes.savingThrows.ref.total");break;case"will":i.push("system.attributes.savingThrows.will.total");break;case"skills":for(const[e,t]of Object.entries(a.skills))if(null!=t&&(i.push(`system.skills.${e}.mod`),null!=t.subSkills))for(const s of Object.keys(t.subSkills))i.push(`system.skills.${e}.subSkills.${s}.mod`);break;case"unskills":for(const[e,t]of Object.entries(a.skills))if(null!=t){for(const[s,a]of Object.entries(t.subSkills??{}))a.rank>0||i.push(`system.skills.${e}.subSkills.${s}.mod`);t.rank>0||i.push(`system.skills.${e}.mod`)}break;case"reach":i.push("system.traits.reach.total.melee"),i.push("system.traits.reach.total.reach");break;case"strSkills":for(const[e,t]of Object.entries(a.skills))if(null!=t&&("str"===t.ability&&i.push(`system.skills.${e}.mod`),null!=t.subSkills))for(const[s,a]of Object.entries(t.subSkills))null!=a&&"str"===a.ability&&i.push(`system.skills.${e}.subSkills.${s}.mod`);break;case"dexSkills":for(const[e,t]of Object.entries(a.skills))if(null!=t&&("dex"===t.ability&&i.push(`system.skills.${e}.mod`),null!=t.subSkills))for(const[s,a]of Object.entries(t.subSkills))null!=a&&"dex"===a.ability&&i.push(`system.skills.${e}.subSkills.${s}.mod`);break;case"conSkills":for(const[e,t]of Object.entries(a.skills))if(null!=t&&("con"===t.ability&&i.push(`system.skills.${e}.mod`),null!=t.subSkills))for(const[s,a]of Object.entries(t.subSkills))null!=a&&"con"===a.ability&&i.push(`system.skills.${e}.subSkills.${s}.mod`);break;case"intSkills":for(const[e,t]of Object.entries(a.skills))if(null!=t&&("int"===t.ability&&i.push(`system.skills.${e}.mod`),null!=t.subSkills))for(const[s,a]of Object.entries(t.subSkills))null!=a&&"int"===a.ability&&i.push(`system.skills.${e}.subSkills.${s}.mod`);break;case"wisSkills":for(const[e,t]of Object.entries(a.skills))if(null!=t&&("wis"===t.ability&&i.push(`system.skills.${e}.mod`),null!=t.subSkills))for(const[s,a]of Object.entries(t.subSkills))null!=a&&"wis"===a.ability&&i.push(`system.skills.${e}.subSkills.${s}.mod`);break;case"chaSkills":for(const[e,t]of Object.entries(a.skills))if(null!=t&&("cha"===t.ability&&i.push(`system.skills.${e}.mod`),null!=t.subSkills))for(const[s,a]of Object.entries(t.subSkills))null!=a&&"cha"===a.ability&&i.push(`system.skills.${e}.subSkills.${s}.mod`);break;case"allChecks":i.push("system.abilities.str.checkMod","system.abilities.dex.checkMod","system.abilities.con.checkMod","system.abilities.int.checkMod","system.abilities.wis.checkMod","system.abilities.cha.checkMod",...this.system.attributes.init.ability?["system.attributes.init.total"]:[]);break;case"strChecks":i.push("system.abilities.str.checkMod",..."str"===this.system.attributes.init.ability?["system.attributes.init.total"]:[]);break;case"dexChecks":i.push("system.abilities.dex.checkMod",..."dex"===this.system.attributes.init.ability?["system.attributes.init.total"]:[]);break;case"conChecks":i.push("system.abilities.con.checkMod",..."con"===this.system.attributes.init.ability?["system.attributes.init.total"]:[]);break;case"intChecks":i.push("system.abilities.int.checkMod",..."int"===this.system.attributes.init.ability?["system.attributes.init.total"]:[]);break;case"wisChecks":i.push("system.abilities.wis.checkMod",..."wis"===this.system.attributes.init.ability?["system.attributes.init.total"]:[]);break;case"chaChecks":i.push("system.abilities.cha.checkMod",..."cha"===this.system.attributes.init.ability?["system.attributes.init.total"]:[]);break;case"allSpeeds":for(const e of Object.keys(a.attributes.speed))i.push(`system.attributes.speed.${e}.total`);break;case"landSpeed":i.push("system.attributes.speed.land.total");break;case"climbSpeed":i.push("system.attributes.speed.climb.total");break;case"swimSpeed":i.push("system.attributes.speed.swim.total");break;case"burrowSpeed":i.push("system.attributes.speed.burrow.total");break;case"flySpeed":i.push("system.attributes.speed.fly.total");break;case"cmb":i.push("system.attributes.cmb.bonus");break;case"cmd":if(["dodge","haste"].includes(t)){i.push("system.attributes.cmd.total");break}i.push("system.attributes.cmd.total","system.attributes.cmd.flatFootedTotal");break;case"init":i.push("system.attributes.init.total");break;case"acpA":i.push("system.attributes.acp.armorBonus");break;case"acpS":i.push("system.attributes.acp.shieldBonus");break;case"mDexA":i.push("system.attributes.mDex.armorBonus");break;case"mDexS":i.push("system.attributes.mDex.shieldBonus");break;case"spellResist":i.push("system.attributes.sr.total");break;case"damage":i.push("system.attributes.damage.general");break;case"mdamage":i.push("system.attributes.damage.meleeAll");break;case"rdamage":i.push("system.attributes.damage.rangedAll");break;case"wdamage":i.push("system.attributes.damage.weapon");break;case"rwdamage":i.push("system.attributes.damage.ranged");break;case"twdamage":i.push("system.attributes.damage.thrown");break;case"mwdamage":i.push("system.attributes.damage.melee");break;case"ndamage":i.push("system.attributes.damage.natural");break;case"sdamage":i.push("system.attributes.damage.spell");break;case"bonusFeats":i.push("system.details.feats.bonus");break;case"bonusSkillRanks":i.push("system.details.skills.bonus");break;case"concentration":i.push("system.attributes.spells.spellbooks.primary.concentration.total","system.attributes.spells.spellbooks.secondary.concentration.total","system.attributes.spells.spellbooks.tertiary.concentration.total","system.attributes.spells.spellbooks.spelllike.concentration.total");break;case"cl":i.push("system.attributes.spells.spellbooks.primary.cl.total","system.attributes.spells.spellbooks.secondary.cl.total","system.attributes.spells.spellbooks.tertiary.cl.total","system.attributes.spells.spellbooks.spelllike.cl.total");break;case"dc":i.push("system.attributes.spells.school.all.dc")}const n=/^dc\.school\.(?<schoolId>\w+)/.exec(e);if(n){const e=n.groups.schoolId;i.push(`system.attributes.spells.school.${e}.dc`)}const o=/^cl\.school\.(?<schoolId>\w+)/.exec(e);if(o){const e=o.groups.schoolId;i.push(`system.attributes.spells.school.${e}.cl`)}const r=/^concn\.(?<bookId>\w+)/.exec(e);if(r){const e=r.groups.bookId;i.push(`system.attributes.spells.spellbooks.${e}.concentration.total`)}const l=/^cl\.book\.(?<bookId>\w+)/.exec(e);if(l){const e=l.groups.bookId;i.push(`system.attributes.spells.spellbooks.${e}.cl.bonus`)}if(/^skill\./.test(e)){const t=e.split(".").slice(1),s=t.shift(),n=t.pop();if(n)null!=a.skills[s]?.subSkills?.[n]&&i.push(`system.skills.${s}.subSkills.${n}.mod`);else{const e=a.skills[s];if(null!=e){i.push(`system.skills.${s}.mod`);for(const t of Object.keys(e.subSkills??{}))i.push(`system.skills.${s}.subSkills.${t}.mod`)}}}return Hooks.events.pf1GetChangeFlat?.length&&Hooks.callAll("pf1GetChangeFlat",i,e,t,s,this),i};const addDefaultChanges=function(e){const t=this.system,s=[];Hooks.events.pf1AddDefaultChanges?.length&&Hooks.callAll("pf1AddDefaultChanges",this,s),e.push(...s.filter((e=>e instanceof pf1.components.ItemChange)));const a=this.itemTypes.class.sort(((e,t)=>e.sort-t.sort));!function calculateHealth(e,t,s){const[a,i,n]=t.reduce(((e,t)=>("racial"===t.subType?e[2].push(t):"npc"===t.subType?e[1].push(t):e[0].push(t),e)),[[],[],[]]),o=game.settings.get("pf1","healthConfig"),r={up:Math.ceil,nearest:Math.round,down:Math.floor}[o.rounding],{continuous:l}=o;function pushHealth(e,t,a){s.push(new pf1.components.ItemChange({formula:e,target:"mhp",type:"untypedPerm",flavor:a.name}),new pf1.components.ItemChange({formula:e,target:"vigor",type:"untypedPerm",flavor:a.name})),0!=t&&s.push(new pf1.components.ItemChange({formula:t,target:"mhp",type:"untypedPerm",flavor:game.i18n.format("PF1.SourceInfoSkillRank_ClassFC",{className:a.name})}),new pf1.components.ItemChange({formula:t,target:"vigor",type:"untypedPerm",flavor:game.i18n.format("PF1.SourceInfoSkillRank_ClassFC",{className:a.name})}))}function manualHealth(e){const t=pf1.config.favoredClassTypes.includes(e.subType)&&e.system.fc.hp.value||0;let s=e.system.hp;l||(s=r(s)),pushHealth(s,t,e)}function autoHealth(e,{rate:t,maximized:s}={},a){const i=e.system.hd??0;if(0===i)return;let n=0,o=0;if("mythic"===e.subType){const t=i??0;if(0===t)return;const s=e.system.level??0;if(0===s)return;n=t*s}else{let c=1+(i-1)*t;l||(c=r(c));const u=e.hitDice;let p=0;s&&(p=Math.min(u,a.maximized.remaining),a.maximized.value+=p);const m=p*i,d=Math.max(0,u-p)*c;o=pf1.config.favoredClassTypes.includes(e.subType)&&e.system.fc.hp.value||0,n=m+d+o}pushHealth(n,o,e)}function computeHealth(e,t,s){if(t.auto)for(const a of e)autoHealth(a,t,s);else for(const t of e)manualHealth(t)}const c={maximized:{value:0,max:o.maximized,get remaining(){return this.max-this.value}}};computeHealth(n,o.hitdice.Racial,c),computeHealth(a,o.hitdice.PC,c),computeHealth(i,o.hitdice.NPC,c)}(0,a,e);const i=!0===game.settings.get("pf1","useFractionalBaseBonuses");for(const s of Object.keys(t.attributes.savingThrows)){let n=!1;t.attributes.savingThrows[s].total=t.attributes.savingThrows[s]?.base??0;const o=a.reduce(((t,a)=>{const o=a.system.savingThrows[s].base;return i?!0===a.system.savingThrows[s].good&&(n=!0):e.push(new pf1.components.ItemChange({formula:o,target:s,type:"untypedPerm",flavor:a.name})),t+o}),0);if(i&&e.push(new pf1.components.ItemChange({formula:Math.floor(o),target:s,type:"untypedPerm",flavor:game.i18n.localize("PF1.Base")})),i&&n){const t=pf1.config.classFractionalSavingThrowFormulas.goodSaveBonus,a=RollPF.safeRollSync(t).total;e.push(new pf1.components.ItemChange({formula:a,target:s,type:"untypedPerm",flavor:game.i18n.localize("PF1.SavingThrowGoodFractionalBonus")}))}}const n=t.attributes.hpAbility;n&&(e.push(new pf1.components.ItemChange({formula:"@attributes.hpAbility.mod * @attributes.hd.total",operator:"add",target:"mhp",type:"base",flavor:pf1.config.abilities[n]})),this.system.attributes.wounds?.base||(e.push(new pf1.components.ItemChange({formula:"@attributes.hpAbility.undrained * 2",operator:"add",target:"wounds",type:"base",flavor:pf1.config.abilities[n]})),e.push(new pf1.components.ItemChange({formula:"@attributes.hpAbility.undrained",operator:"add",target:"woundThreshold",type:"base",flavor:pf1.config.abilities[n]})),e.push(new pf1.components.ItemChange({formula:"-(@attributes.hpAbility.damage * 2)",operator:"add",target:"wounds",type:"untyped",flavor:game.i18n.localize("PF1.AbilityDamage")})),e.push(new pf1.components.ItemChange({formula:"@attributes.hpAbility.penalty",operator:"add",target:"wounds",type:"untyped",flavor:game.i18n.localize(`PF1.Ability${n.capitalize()}Pen`)})),e.push(new pf1.components.ItemChange({formula:"-@attributes.hpAbility.drain",operator:"add",target:"wounds",type:"untyped",flavor:game.i18n.localize("PF1.AbilityDrain")}))));for(const[s,a]of Object.entries(t.attributes.speed)){let t=a.base;t||(t=0),e.push(new pf1.components.ItemChange({formula:t,target:s+"Speed",type:"base",operator:"set",priority:1001,flavor:game.i18n.localize("PF1.Base")}))}e.push(new pf1.components.ItemChange({_id:"_bab",formula:"@attributes.bab.total",operator:"add",target:"~attackCore",type:"untypedPerm",flavor:game.i18n.localize("PF1.BAB")})),e.push(new pf1.components.ItemChange({formula:"-@attributes.energyDrain",operator:"add",target:"~attackCore",type:"untypedPerm",flavor:game.i18n.localize("PF1.Condition.energyDrain")})),e.push(new pf1.components.ItemChange({formula:"-@attributes.acp.attackPenalty",operator:"add",target:"~attackCore",type:"untyped",flavor:game.i18n.localize("PF1.ArmorCheckPenalty")}));{e.push(new pf1.components.ItemChange({formula:"@attributes.bab.total",operator:"add",target:"cmd",type:"untypedPerm",flavor:game.i18n.localize("PF1.BAB")}));const s=t.attributes.cmd.strAbility;s in pf1.config.abilities&&e.push(new pf1.components.ItemChange({formula:`@abilities.${s}.mod`,target:"cmd",type:"untypedPerm",flavor:pf1.config.abilities[s]})),e.push(new pf1.components.ItemChange({formula:"-@attributes.energyDrain",operator:"add",target:"cmd",type:"untypedPerm",flavor:game.i18n.localize("PF1.Condition.energyDrain")}))}{const s=t.attributes.init.ability;s&&e.push(new pf1.components.ItemChange({formula:`@abilities.${s}.mod`,operator:"add",target:"init",type:"untypedPerm",priority:-100,flavor:pf1.config.abilities[s]})),["str","dex"].includes(s)&&e.push(new pf1.components.ItemChange({formula:"-@attributes.acp.attackPenalty",operator:"add",target:"init",type:"untyped",priority:-100,flavor:game.i18n.localize("PF1.ArmorCheckPenalty")}))}{let s=t.attributes.savingThrows.fort.ability;s&&e.push(new pf1.components.ItemChange({formula:`@abilities.${s}.mod`,operator:"add",target:"fort",type:"untypedPerm",flavor:pf1.config.abilities[s]})),s=t.attributes.savingThrows.ref.ability,s&&e.push(new pf1.components.ItemChange({formula:`@abilities.${s}.mod`,operator:"add",target:"ref",type:"untypedPerm",flavor:pf1.config.abilities[s]})),s=t.attributes.savingThrows.will.ability,s&&e.push(new pf1.components.ItemChange({formula:`@abilities.${s}.mod`,operator:"add",target:"will",type:"untypedPerm",flavor:pf1.config.abilities[s]})),e.push(new pf1.components.ItemChange({formula:"-@attributes.energyDrain",operator:"add",target:"allSavingThrows",type:"untyped",flavor:game.i18n.localize("PF1.Condition.energyDrain")}))}{const s=t.attributes.sr.formula||0;e.push(new pf1.components.ItemChange({formula:s,target:"spellResist",type:"untyped",priority:1e3,flavor:game.i18n.localize("PF1.CustomBonus")}))}{const s=t.details.carryCapacity.bonus.user||0;e.push(new pf1.components.ItemChange({formula:s,target:"carryStr",type:"untyped",priority:1e3,flavor:game.i18n.localize("PF1.Custom")}));const a=t.details.carryCapacity.multiplier.base??1;e.push(new pf1.components.ItemChange({formula:a,target:"carryMult",type:"base",priority:1e3,flavor:game.i18n.localize("PF1.Base")}));const i=t.details.carryCapacity.multiplier.user||0;e.push(new pf1.components.ItemChange({formula:i,target:"carryMult",type:"untyped",priority:1e3,flavor:game.i18n.localize("PF1.Custom")}))}{const s={init:null,cmd:null,bab:null,ac:e=>e.normal};for(const[a,i]of Object.entries(s)){let s=t.attributes[a];"function"==typeof i&&(s=i(s)),s=s.value,void 0!==s&&e.push(new pf1.components.ItemChange({formula:s,trget:a,type:"base",flavor:game.i18n.localize("PF1.Custom"),operator:"set"}))}}{const s=t.attributes.naturalAC||0;e.push(new pf1.components.ItemChange({formula:s,target:"nac",type:"untyped",flavor:game.i18n.format("PF1.CustomBonusType",{type:game.i18n.localize("PF1.NaturalArmor")})}))}this.itemTypes.equipment.filter((e=>e.system.equipped)).forEach((t=>{let s="aac";if("shield"===t.system.subType&&(s="sac"),t.system.armor.value||t.system.armor.enh){const a=t.isBroken?Math.floor(t.system.armor.value/2):t.system.armor.value,i=t.system.armor.enh;e.push(new pf1.components.ItemChange({formula:a,target:s,type:"base"},{parent:t})),e.push(new pf1.components.ItemChange({formula:i,target:s,type:"enhancement"},{parent:t}))}}));{const s=t.attributes.speed.fly.maneuverability;let a=0;null!=s&&(a=pf1.config.flyManeuverabilityValues[s]),0!==a&&e.push(new pf1.components.ItemChange({formula:a,target:"skill.fly",type:"racial",flavor:game.i18n.localize("PF1.Movement.FlyManeuverability.Label")}))}e.push(new pf1.components.ItemChange({formula:"(min(1, @attributes.speed.climb.total) * 8)",operator:"add",target:"skill.clm",type:"racial",priority:-1,flavor:game.i18n.localize("PF1.Movement.Mode.climb")})),e.push(new pf1.components.ItemChange({formula:"(min(1, @attributes.speed.swim.total) * 8)",operator:"add",target:"skill.swm",type:"racial",priority:-1,flavor:game.i18n.localize("PF1.Movement.Mode.swim")})),e.push(new pf1.components.ItemChange({formula:"-@attributes.energyDrain",operator:"add",target:"skills",type:"untypedPerm",flavor:game.i18n.localize("PF1.Condition.energyDrain")}));const o=t.traits.size;"med"!==o&&(e.push(new pf1.components.ItemChange({formula:pf1.config.sizeMods[o],target:"ac",type:"size",flavor:game.i18n.localize("PF1.ModifierType.size")})),e.push(new pf1.components.ItemChange({formula:pf1.config.sizeStealthMods[o],target:"skill.ste",type:"size",flavor:game.i18n.localize("PF1.ModifierType.size")})),e.push(new pf1.components.ItemChange({formula:pf1.config.sizeFlyMods[o],target:"skill.fly",type:"size",flavor:game.i18n.localize("PF1.ModifierType.size")})),e.push(new pf1.components.ItemChange({formula:pf1.config.sizeSpecialMods[o],target:"cmd",type:"size",flavor:game.i18n.localize("PF1.ModifierType.size")}))),this.system.details?.bonusSkillRankFormula&&e.push(new pf1.components.ItemChange({formula:this.system.details.bonusSkillRankFormula,target:"bonusSkillRanks",type:"untyped",flavor:game.i18n.localize("PF1.SkillBonusRankFormula")}));for(const[s,a]of Object.entries(t.conditions)){if(!a)continue;const t=pf1.registry.conditions.get(s);if(!t)continue;const i=t.mechanics;if(i){for(const s of i.changes??[]){const a={...s,flavor:t.name},i=new pf1.components.ItemChange(a);e.push(i)}for(const e of i.flags??[])this.changeFlags[e]=!0}}!Number.isNaN(t.attributes.energyDrain)&&t.attributes.energyDrain>0&&(e.push(new pf1.components.ItemChange({formula:"-(@attributes.energyDrain * 5)",operator:"add",target:"mhp",type:"untyped",priority:-750,flavor:game.i18n.localize("PF1.Condition.energyDrain")})),e.push(new pf1.components.ItemChange({formula:"-(@attributes.energyDrain * 5)",operator:"add",target:"vigor",type:"untyped",priority:-750,flavor:game.i18n.localize("PF1.Condition.energyDrain")})))};function resetSkills(){const e=this.system.skills,t=pf1.config.classSkillBonus,resetSkill=e=>{const s=e.rank||0;e.mod=s+(e.cs&&s>0?t:0)};for(const[t,s]of Object.entries(e))if(s){resetSkill(s);for(const[e,a]of Object.entries(s.subSkills||{}))a?resetSkill(a):console.warn(`Bad subskill data for "${t}.${e}"`,this)}else console.warn(`Bad skill data for "${t}"`,this)}function finalizeSkills(){const e=this.system,t=e.skills;if(!t)return;const s=e.abilities,a=e.attributes?.acp?.skill??0,finalizeSkill=e=>{const t=e.acp?a:0,i=s[e.ability]?.mod||0;e.mod+=i-t};for(const[e,s]of Object.entries(t))if(s){finalizeSkill(s);for(const[e,t]of Object.entries(s.subSkills||{}))t&&finalizeSkill(t)}}const getSourceInfo=function(e,t){return e[t]||(e[t]={negative:[],positive:[]}),e[t]},setSourceInfoByName=function(e,t,s,a,i=!0){const n=i?"positive":"negative",o=getSourceInfo(e,t)[n],r=o.find((e=>e.name===s));r?r.value=a:o.push({name:s,value:a})},getHighestChanges=function(e,t={ignoreTarget:!1}){const s={value:0,ids:[],highestID:null},a=Object.keys(pf1.config.bonusTypes).reduce(((e,a)=>(t.ignoreTarget?e[a]=foundry.utils.deepClone(s):e[a]={},e)),{});for(const s of e){let e;e=t.ignoreTarget?a[s.type]:a[s.type]?.[s.target],e&&(e.ids.push(s._id),(e.value<s.value||!e.highestID)&&(e.value=s.value,e.highestID=s._id))}{let s,i;const filterFunc=function(e){return i.highestID===e._id||(-1!==pf1.config.stackingBonusTypes.indexOf(s)||!i.ids.includes(e._id))};for(s of Object.keys(a))if(t.ignoreTarget)i=a[s],e=e.filter(filterFunc);else for(const t of Object.keys(a[s]))i=a[s][t],e=e.filter(filterFunc)}return e},n=Object.freeze(Object.defineProperty({__proto__:null,addDefaultChanges,applyChanges,getChangeFlat,getHighestChanges,getSourceInfo,setSourceInfoByName},Symbol.toStringTag,{value:"Module"}));class ItemChange extends foundry.abstract.DataModel{static defineSchema(){const e=foundry.data.fields;return{_id:new e.StringField({blank:!1,initial:()=>foundry.utils.randomID(8),required:!0,readonly:!0}),formula:new e.StringField({blank:!0,required:!1}),operator:new e.StringField({blank:!1,initial:"add",choices:["add","set"]}),target:new e.StringField({blank:!0,required:!1}),type:new e.StringField({blank:!0,required:!1}),priority:new e.NumberField({initial:0,required:!1}),value:new e.NumberField({initial:0,required:!1}),flavor:new e.StringField({blank:!0,initial:void 0,required:!1}),continuous:new e.BooleanField({initial:void 0,required:!1})}}static migrateData(e){e.subTarget&&(e.target=e.subTarget,delete e.subTarget),e.modifier&&(e.type=e.modifier,delete e.modifier),"script"===e.operator||"+"===e.operator?e.operator="add":"="===e.operator&&(e.operator="set")}constructor(e,t={}){(t instanceof Item||t instanceof Actor)&&(foundry.utils.logCompatibilityWarning("ItemChange constructor's second parameter is now options object for datamodel instead of direct parent reference",{since:"PF1 v10",until:"PF1 v11"}),t={parent:t}),super(e,t),this.updateTime=new Date}_initialize(e={}){super._initialize(e),Object.defineProperty(this,"_id",{value:this._source._id,writable:!1,configurable:!0}),this.prepareData()}prepareData(){this.flavor||=this.parent?.name.replace(/\[|\]/g,"")||this.type}static async create(e,{parent:t=null}={}){if(Array.isArray(e)||(e=[e]),t instanceof pf1.documents.item.ItemPF){e=e.map((e=>new this(e).toObject()));const s=t.toObject().system.changes??[],a=new Set(s.map((e=>e._id)));a.delete(void 0),a.delete("");const i=new Set;for(const t of e){for(t._id||=foundry.utils.randomID(8);a.has(t._id);)t._id=foundry.utils.randomID(8);a.add(t._id),i.add(t._id)}const n=[...s,...e];return await t.update({"system.changes":n}),[...t.changes.filter((e=>i.has(e._id)))]}return[]}async delete(){const e=this.parent;if(!e)throw Error("Can not delete Change not in an item");const t=e.toObject().system.changes??[],s=this.id;return t.findSplice((e=>e._id===s)),e.update({"system.changes":t})}static get defaultData(){return foundry.utils.logCompatibilityWarning("ItemChange.defaultData() is deprecated in favor of using ItemChange DataModel",{since:"PF1 v10",until:"PF1 v11"}),(new this).toObject()}get data(){return foundry.utils.logCompatibilityWarning("ItemChange.data is deprecated in favor of accessing the model directly.",{since:"PF1 v10",until:"PF1 v11"}),this}get id(){return this._id}get subTarget(){return foundry.utils.logCompatibilityWarning("ItemChange.subTarget is deprecated in favor of ItemChange.target",{since:"PF1 v10",until:"PF1 v11"}),this.target}get modifier(){return foundry.utils.logCompatibilityWarning("ItemChange.modifier is deprecated in favor of ItemChange.type",{since:"PF1 v10",until:"PF1 v11"}),this.type}get isDeferred(){return!!["damage","wdamage","mwdamage","twdamage","rwdamage","sdamage","skills"].includes(this.target)||/^skill\./.test(this.target)}get isDistance(){return/speed/i.test(this.target)}get source(){return console.warn("ItemChange.source does not exist"),null}getSourceInfoTargets(e){switch(this.target){case"aac":case"sac":case"nac":return["system.attributes.ac.normal.total","system.attributes.ac.flatFooted.total"]}return getChangeFlat.call(e,this.target,this.type)}_preUpdate(e){return e=new this.constructor(e).toObject()}updateSource(e,t){return e={...e},this.id&&e._id&&delete e._id,super.updateSource(e,t)}async update(e,t={},s={}){if(!this.parent)throw Error("ItemChange has no parent to update.");this.updateTime=new Date,(e=this._preUpdate(e))._id&&delete e._id;const a=this.parent.toObject().system.changes??[],i=a.findIndex((e=>e._id===this.id));if(i>=0){const t=this.updateSource(e);return foundry.utils.isEmpty(t)?null:(a[i]=this.toObject(),this.parent.update({"system.changes":a},s))}throw Error(`Change #${this.id} not found on parent ${this.parent.uuid}`)}_safeApplyChange(e,t=null,{applySourceInfo:s=!0}={}){try{this.applyChange(e,t,{applySourceInfo:s})}catch(s){if(this.parent?.isOwner||e.isOwner){const a=this.parent?`from ${this.parent.name} [${this.parent.uuid}] to ${e.name}`:`to ${e.name} [${e.uuid}]]`,i=`Failed to apply ItemChange ${this.id} ${a}`,n={change:this,parent:this.parent,actor:e,targets:t};Hooks.onError("ItemChange#applyChange",s,{msg:i,log:"error",data:n}),ui.notifications?.error(s.message,{console:!1})}}}applyChange(e,t=null,{applySourceInfo:s=!0,rollData:a}={}){t??=this.getTargets(e),a??=this.parent?this.parent.getRollData({refresh:!0}):e.getRollData({refresh:!0});const i=e.changeOverrides;for(const n of t){const t=i[n],o=this.operator;if(!t)continue;let r=0;if(this.formula){if("function"===o){foundry.utils.logCompatibilityWarning("ItemChange function operator is no longer supported with no replacement.",{since:"PF1 v10",until:"PF1 v11"});continue}r=isNaN(this.formula)?this.isDeferred&&RollPF.parse(this.formula).some((e=>!e.isDeterministic))?RollPF.replaceFormulaData(this.formula,a,{missing:0}):RollPF.safeRollSync(this.formula,a,[n,this,a],{suppressError:this.parent&&!this.parent.isOwner},{maximize:!0}).total:parseFloat(this.formula)}if(this.value=r,!n)continue;const l=t[o][this.type];switch(o){case"add":{let s=foundry.utils.getProperty(e,n);if(null==s){if(n.match(/^system\.abilities/))continue;s=0}if("string"==typeof r)break;if("number"==typeof s){if(e.changeFlags.loseDexToAC&&r>0&&"dodge"===this.type&&this.isAC)continue;if(pf1.config.stackingBonusTypes.includes(this.type))foundry.utils.setProperty(e,n,s+r),t[o][this.type]=(l??0)+r;else{const a=l?Math.max(0,r-(l??0)):r;foundry.utils.setProperty(e,n,s+a),t[o][this.type]=Math.max(l??0,r)}}}break;case"set":foundry.utils.setProperty(e,n,r),t[o][this.type]=r}s&&this.applySourceInfo(e);const c=n.match(/^system\.abilities\.([a-zA-Z0-9]+)\.(?:total|penalty|base)$/),u=c?.[1];if(u){const t=e.system.abilities[u];t.mod=pf1.utils.getAbilityModifier(t.total,{damage:t.damage,penalty:t.penalty})}}}get isAC(){return["ac","aac","sac","nac","tac","ffac"].includes(this.target)}applySourceInfo(e){const t=this.getSourceInfoTargets(e),s=this.value,a={value:s,operator:this.operator,name:this.parent?this.parent.name:this.flavor,modifier:this.type,type:this.parent?this.parent.type:null,change:this};switch(this.operator){case"add":case"function":if(pf1.config.stackingBonusTypes.includes(this.type)){const i=s>=0?"positive":"negative";for(const s of t)getSourceInfo(e.sourceInfo,s)[i].push(a)}else for(const i of t){const t=s>=0?"positive":"negative",n=getSourceInfo(e.sourceInfo,i)[t];let o=!0,r=s;const l=n.find((e=>{const t=e.change?.parent===this.parent,s="base"===e.change?.type&&"enhancement"===this.type||"enhancement"===e.change?.type&&"base"===this.type,a=e.change?.target===this.target;return t&&s&&a}));if(l){if(o=!1,"base"===l.change?.type){l.value+=s;continue}{r+=l.value;const e=!n.some((e=>{const t=e.modifier==e.modifier,s=e.change?.target,a=!s||s===this.target,i=e.value>r;return t&&a&&i}));n.findSplice((e=>e===l),e?{...a,value:r}:void 0)}}n.forEach((e=>{e.change?.type===e.type&&(e.value<r?n.splice(n.indexOf(e),1):o=!1)})),o&&n.push({...a})}break;case"set":for(const s of t)getSourceInfo(e.sourceInfo,s).positive.push({...a})}}createFunction(e,t=[]){try{const s='const actor = item.actor; const result = { operator: "add", value: 0, };',a="return result;",i=`return function(${t.join(",")}) {${s}${e}\n${a}};`;return Function(i)()}catch(t){return console.warn("Could not create change function with definition",e),function(){return{operator:"add",value:0}}}}getTargets(e){return getChangeFlat.call(e,this.target,this.type,this.value)}toObject(...e){const t=super.toObject(...e);delete t.value,delete t.continuous,null===t.priority&&delete t.priority;for(const[e,s]of Object.entries(t))void 0===s&&delete t[e];return t}}class DamageRoll extends RollPF{constructor(e,t,s={}){super(e,t,s),this.options.damageType??={values:["untyped"],custom:""}}static TYPES={NORMAL:"normal",CRITICAL:"crit",NON_CRITICAL:"nonCrit"};get damageType(){return this.options.damageType}get type(){return this.options.type}get isCritical(){return this.type===this.constructor.TYPES.CRITICAL}}class HealthConfigModel extends foundry.abstract.DataModel{constructor(...e){super(...e),Object.defineProperty(this,"continuity",{get(){return foundry.utils.logCompatibilityWarning("continuity string property in health configuration is deprecated in favor of continuous boolean property",{since:"PF1 v10",until:"PF1 v11"}),this.continuous?"continuous":"discrete"}})}static defineSchema(){const e=foundry.data.fields;return{hitdice:new e.SchemaField({Racial:new e.SchemaField({auto:new e.BooleanField({initial:!1}),rate:new e.NumberField({positive:!0,initial:.5,max:1}),maximized:new e.BooleanField({initial:!1})}),PC:new e.SchemaField({auto:new e.BooleanField({initial:!1}),rate:new e.NumberField({positive:!0,initial:.5,max:1}),maximized:new e.BooleanField({initial:!0})}),NPC:new e.SchemaField({auto:new e.BooleanField({initial:!1}),rate:new e.NumberField({positive:!0,initial:.5,max:1}),maximized:new e.BooleanField({initial:!1})})}),maximized:new e.NumberField({integer:!0,min:0,initial:1}),rounding:new e.StringField({blank:!1,nullable:!1,initial:"up"}),continuous:new e.BooleanField({initial:!1}),variants:new e.SchemaField({pc:new e.SchemaField({useWoundsAndVigor:new e.BooleanField({initial:!1}),useWoundThresholds:new e.NumberField({initial:0}),allowWoundThresholdOverride:new e.BooleanField({initial:!1})}),npc:new e.SchemaField({useWoundsAndVigor:new e.BooleanField({initial:!1}),useWoundThresholds:new e.NumberField({initial:0}),allowWoundThresholdOverride:new e.BooleanField({initial:!0})})})}}getClassHD(e){switch(e.system.subType,e.system.subType){case"npc":return this.hitdice.NPC;case"racial":return this.hitdice.Racial;default:return this.hitdice.PC}}static migrateData(e){e.continuity&&(e.continuous="continuous"===e.continuity)}static get woundThesholdOptions(){return{0:game.i18n.localize("PF1.SETTINGS.Health.WoundThresholds.Disabled"),1:game.i18n.localize("PF1.SETTINGS.Health.WoundThresholds.Normal"),2:game.i18n.localize("PF1.SETTINGS.Health.WoundThresholds.Gritty")}}}class HealthConfig extends FormApplication{static model=HealthConfigModel;constructor(e=new HealthConfigModel,t){super(e,t)}getData(){this.healthConfig??=new HealthConfigModel(game.settings.get("pf1","healthConfig").toObject());const e={...this.healthConfig,woundThesholdOptions:HealthConfigModel.woundThesholdOptions};for(const[t,s]of Object.entries(e.hitdice))s.label="PF1.SETTINGS.Health.Class."+t.toLowerCase();return e}static get defaultOptions(){const e=super.defaultOptions;return{...e,title:game.i18n.localize("PF1.SETTINGS.Health.Title"),id:"health-config",template:"systems/pf1/templates/settings/health.hbs",classes:[...e.classes,"pf1","health-config"],width:480,height:"auto",tabs:[{navSelector:".tabs",contentSelector:".tabbed",initial:"base",group:"primary"}],submitOnChange:!0,submitOnClose:!1,closeOnSubmit:!1}}async _onReset(e){return e.preventDefault(),await game.settings.set("pf1","healthConfig",{}),this.render()}async _onSave(e){e.preventDefault();const t=this.healthConfig;await game.settings.set("pf1","healthConfig",t.toObject()),this.close()}activateListeners(e){super.activateListeners(e),e.find("button.reset").click(this._onReset.bind(this)),e.find("button.save").click(this._onSave.bind(this))}async _updateObject(e,t){t=foundry.utils.expandObject(t);const s=new HealthConfigModel(game.settings.get("pf1","healthConfig").toObject());s.updateSource(t),this.healthConfig=s,this.render()}}class ExperienceConfigModel extends foundry.abstract.DataModel{static defineSchema(){const e=foundry.data.fields;return{disable:new e.BooleanField({initial:!1}),track:new e.StringField({initial:"medium",choices:["fast","medium","slow","custom"]}),custom:new e.SchemaField({formula:new e.StringField({initial:"",nullable:!1})}),openDistributor:new e.BooleanField({initial:!0})}}static migrateData(e){super.migrateData(e),e.disable??=e.disableExperienceTracking,"customFormula"===e.track&&(e.track="custom"),e.openDistributor??=e.openXpDistributor}}class ExperienceConfig extends FormApplication{constructor(...e){super(...e),this._settings=game.settings.get("pf1","experienceConfig").toObject()}getData(){const e=this._settings;return{...e,enabled:!0!==e.disable,hasCustomFormula:"custom"===e.track}}static get defaultOptions(){const e=super.defaultOptions;return{...super.defaultOptions,title:game.i18n.localize("PF1.ExperienceConfigName"),classes:[...e.classes,"pf1","experience-config"],id:"experience-config",template:"systems/pf1/templates/settings/experience.hbs",submitOnChange:!0,closeOnSubmit:!1,submitOnClose:!1,width:560,height:"auto"}}activateListeners(e){super.activateListeners(e),this.form.querySelector("button.save").addEventListener("click",this._onSaveConfig.bind(this))}async _onSaveConfig(e){e.preventDefault(),e.stopPropagation(),game.settings.set("pf1","experienceConfig",this._settings),this.close()}async _updateObject(e,t){this._settings=foundry.utils.mergeObject(this._settings,foundry.utils.expandObject(t)),this.render()}}class AccessibilityConfigModel extends foundry.abstract.DataModel{static defineSchema(){return{}}}FormApplication;class TokenTooltipWorldConfigModel extends foundry.abstract.DataModel{static defineSchema(){const e=foundry.data.fields;return{disable:new e.BooleanField({initial:!1}),portrait:new e.SchemaField({hide:new e.BooleanField({initial:!1})}),hideHeld:new e.BooleanField({initial:!0}),hideArmor:new e.BooleanField({initial:!0}),hideBuffs:new e.BooleanField({initial:!0}),hideConditions:new e.BooleanField({initial:!1}),hideClothing:new e.BooleanField({initial:!0}),hideActorNameByDisposition:new e.NumberField({initial:0}),minimumPermission:new e.NumberField({initial:CONST.DOCUMENT_OWNERSHIP_LEVELS.LIMITED}),hideActorNameReplacement:new e.StringField({initial:"???",nullable:!1})}}}class TooltipWorldConfig extends FormApplication{constructor(e,t){super(e,t),this._cachedData=null}getData(){const e={};return e.data=game.settings.get("pf1","tooltipWorldConfig"),e.permissions={[CONST.DOCUMENT_OWNERSHIP_LEVELS.NONE]:"OWNERSHIP.NONE",[CONST.DOCUMENT_OWNERSHIP_LEVELS.LIMITED]:"OWNERSHIP.LIMITED",[CONST.DOCUMENT_OWNERSHIP_LEVELS.OBSERVER]:"OWNERSHIP.OBSERVER",[CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER]:"OWNERSHIP.OWNER"},e}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{title:game.i18n.localize("PF1.SETTINGS.TokenTooltip.World.Name"),id:"tooltip-world-config",template:"systems/pf1/templates/settings/tooltip_world.hbs",width:540,height:"auto"})}activateListeners(e){e.find("button.reset").click(this._onReset.bind(this))}async _onReset(e){return e.preventDefault(),await game.settings.set("pf1","tooltipWorldConfig",new TokenTooltipWorldConfigModel),ui.notifications.info(game.i18n.localize("PF1.SETTINGS.TokenTooltip.ResetInfo")),this.render()}async _updateObject(e,t){const s=foundry.utils.expandObject(t);await game.settings.set("pf1","tooltipWorldConfig",s),ui.notifications.info(game.i18n.localize("PF1.SETTINGS.TokenTooltip.UpdateInfo"))}}class TokenTooltipConfigModel extends foundry.abstract.DataModel{static defineSchema(){const e=foundry.data.fields;return{disable:new e.BooleanField({initial:!1}),hideWithoutKey:new e.BooleanField({initial:!1}),anchor:new e.SchemaField({x:new e.NumberField({initial:1}),y:new e.NumberField({initial:1})}),offset:new e.SchemaField({x:new e.NumberField({initial:0}),y:new e.NumberField({initial:0})}),onMouse:new e.BooleanField({initial:!1}),portrait:new e.SchemaField({hide:new e.BooleanField({initial:!1}),maxSize:new e.SchemaField({width:new e.NumberField({initial:280}),height:new e.NumberField({initial:280})})})}}}class TooltipConfig extends FormApplication{constructor(e,t){super(e,t),this._cachedData=null}getData(){if(this._cachedData)return this._cachedData;const e=canvas.app.view.getBoundingClientRect(),t={screen:{width:e.width,height:e.height,halfWidth:Math.floor(e.width/2),halfHeight:Math.floor(e.height/2)},isGM:game.user.isGM};{const e={width:320,height:320,tooltip:{width:80,height:48}},s=t.screen.width/t.screen.height,a=t.screen.height/t.screen.width;s>a?e.height=Math.ceil(e.height*a):a>s&&(e.width=Math.ceil(e.width*s)),t.preview=e}return t.data=game.settings.get("pf1","tooltipConfig"),t.hideKey=game.i18n.localize("PF1.Key_Control"),this._cachedData=t,t}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{title:game.i18n.localize("PF1.SETTINGS.TokenTooltip.Name"),id:"tooltip-config",template:"systems/pf1/templates/settings/tooltip.hbs",width:640,height:"auto"})}activateListeners(e){e.find(".immediate-change").change(this._handleImmediateChange.bind(this)),e.find("button.world-settings").click(this._openWorldSettings.bind(this)),e.find("button.reset").click(this._onReset.bind(this))}_handleImmediateChange(e){const t=e.currentTarget,s=t.name;if(!s)return;let a;"INPUT"===t.tagName?(a=t.value,"checkbox"===t.type&&(a=!0===t.checked)):a=t.innerHTML,"Boolean"===t.dataset?.dtype?a=!!a:"Number"===t.dataset?.dtype&&(a=parseFloat(a)),foundry.utils.setProperty(this._cachedData,"data."+s,a),this.render()}_openWorldSettings(e){game.user.can("SETTINGS_MODIFY")?(new TooltipWorldConfig).render(!0,{focus:!0}):ui.notifications.error("PF1.Error.GenericPermission",{localize:!0})}async _onReset(e){return e.preventDefault(),await game.settings.set("pf1","tooltipConfig",this.constructor.defaultSettings),this._cachedData=null,ui.notifications.info(game.i18n.localize("PF1.SETTINGS.TokenTooltip.ResetInfo")),this.render()}async _updateObject(e,t){const s=foundry.utils.expandObject(t);await game.settings.set("pf1","tooltipConfig",s),ui.notifications.info(game.i18n.localize("PF1.SETTINGS.TokenTooltip.UpdateInfo"))}}class IntegrationModel extends foundry.abstract.DataModel{static defineSchema(){const e=foundry.data.fields;return{diceSoNice:new e.BooleanField({initial:!0}),dragRuler:new e.BooleanField({initial:!0}),enhancedTerrainLayer:new e.BooleanField({initial:!0})}}}class IntegrationConfig extends FormApplication{static get defaultOptions(){const e=super.defaultOptions;return{...e,title:game.i18n.localize("PF1.Application.Integration.Title"),id:"pf1-integration-config",template:"systems/pf1/templates/settings/integration.hbs",classes:[...e.classes,"pf1","integration-config"],width:460,height:"auto",submitOnChange:!1,submitOnClose:!1,closeOnSubmit:!0}}getData(){return{...game.settings.get("pf1","integration"),dsnFound:game.modules.get("dice-so-nice")?.active,drFound:game.modules.get("drag-ruler")?.active,etlFound:game.modules.get("enhanced-terrain-layer")?.active}}_updateObject(e,t){t=foundry.utils.expandObject(t),game.settings.set("pf1","integration",t.settings)}}class PerformanceModel extends foundry.abstract.DataModel{static defineSchema(){return{reachLimit:new foundry.data.fields.NumberField({integer:!0,min:0,initial:60})}}}class PerformanceConfig extends FormApplication{static get defaultOptions(){const e=super.defaultOptions;return{...e,title:game.i18n.localize("PF1.Application.Performance.Title"),id:"performance-config",template:"systems/pf1/templates/settings/performance.hbs",classes:[...e.classes,"pf1","performance-config"],submitOnChange:!1,closeOnSubmit:!0,submitOnClose:!1,width:520,height:"auto"}}getData(){const e=game.settings.get("pf1","performance");return{...e,model:e.constructor.defineSchema()}}activateListeners(e){super.activateListeners(e);const[t]=e,s=t.querySelector("span.reach-limit");t.querySelector("input[name='settings.reachLimit']").addEventListener("input",(e=>s.textContent=e.target.value),{passive:!0}),t.querySelector("button[type='reset']").addEventListener("click",(e=>{e.preventDefault(),game.settings.set("pf1","performance",{}).then((()=>this.close()))}))}_updateObject(e,t){t=foundry.utils.expandObject(t),console.table(t.settings),game.settings.set("pf1","performance",t.settings)}}class TooltipPF extends Application{constructor(){super(),this.mousePos={x:0,y:0},document.addEventListener("pointermove",(e=>{this.mousePos.x=e.clientX,this.mousePos.y=e.clientY,this.onMouse&&!this.hidden&&this._setPosition()}),{passive:!0}),this.token=null,this.forceHideGMInfo=!1,this.forceHide=!1,this.sticky=!1,this.stickied=!1,this.lock={new:!1,old:!1}}get token(){return this.object}set token(e){this.object=e}static get defaultOptions(){return{...super.defaultOptions,template:"systems/pf1/templates/hud/tooltip.hbs",popOut:!1}}get clientConfig(){return game.settings.get("pf1","tooltipConfig").toObject()}get worldConfig(){return game.settings.get("pf1","tooltipWorldConfig").toObject()}get actorConfig(){return this.token?.actor?.system.details?.tooltip??{}}get onMouse(){return this.clientConfig.onMouse}get hidden(){return"hidden"===this.element[0]?.style.visibility}bind(e){(game.user.isGM||e.disposition!==CONST.TOKEN_DISPOSITIONS.SECRET)&&(this.lock.new||this.stickied&&!this.sticky||(this.token=e,this.sticky&&(this.stickied=!0),this.render(!0)))}unbind(e){e===this.token&&(this.lock.old||(this.sticky&&(this.stickied=!0),this.stickied||(this.token=null,this.hide())))}clearBind(){this.stickied=!1,this.token=null,this.hide()}async getData(){const e=this.token,t=e?.actor;if(!t)return{};const s={data:t.system,name:e.name,isOwner:t.isOwner},a=game.user.isGM,i=this.actorConfig,n=this.worldConfig,o=this.clientConfig,r=foundry.utils.deepClone(n);Object.entries(i).forEach((([e,t])=>r[e]||=t)),o.portrait.hide||!0!=!n.portrait.hide||(s.portrait={maxWidth:o.portrait?.maxSize?.width||100,maxHeight:o.portrait?.maxSize?.height||100,url:t.img});const l=a?!this.forceHideGMInfo:t.isOwner;if((a?this.forceHideGMInfo:!e.actor.testUserPermission(game.user,n.minimumPermission))&&(r.hideName||e.disposition<=n.hideActorNameByDisposition?s.name=r.name||n.hideActorNameReplacement||"???":r.name&&(s.name=r.name)),l||!r.hideConditions){const e=t.system.conditions;for(const[t,a]of Object.entries(e))if(!0===a){s.conditions=s.conditions||[];const e=pf1.registry.conditions.get(t);s.conditions.push({label:e.name,icon:e.texture})}}if(l||!r.hideBuffs){const e=t.itemTypes.buff?.filter((e=>e.isActive&&!e.system.hideFromToken))??[];for(const t of e)s.buffs=s.buffs||[],s.buffs.push({label:t.name,icon:t.img,level:t.system.level})}if(l||!r.hideHeld){const e=t.items.filter((e=>!!["weapon","equipment"].includes(e.type)&&(!!e.isActive&&("equipment"!==e.type||"shield"===e.subType))));for(const t of e)s.held=s.held||[],s.held.push({label:t.getName(!l),icon:t.img})}const c=t.itemTypes.equipment?.filter((e=>e.isActive))??[];if(l||!r.hideArmor){const e=c.filter((e=>"armor"===e.subType));for(const t of e)s.armor=s.armor||[],s.armor.push({label:t.getName(!l),icon:t.img})}if(l||!r.hideClothing){const e=c.filter((e=>"clothing"===e.subType));for(const t of e)s.clothing=s.clothing||[],s.clothing.push({label:t.getName(!l),icon:t.img})}return s}_setPosition(){if(!this.element[0])return;const e=canvas.app.view.getBoundingClientRect(),t=this.element[0].getBoundingClientRect(),s={width:t.width,height:t.height,left:0,top:0},a=ui.sidebar.element[0].getBoundingClientRect(),i=e.width-s.width-a.width,n=e.height-s.height,o=this.clientConfig,r=o.anchor,l=o.offset;if(this.onMouse){const t={x:e.left,y:e.top},a={x:t.x+i,y:t.y+n},o={x:this.mousePos.x-s.width+s.width*r.x+l.x,y:this.mousePos.y-s.height+s.height*r.y+l.y};s.left=Math.clamped(o.x,t.x,a.x),s.top=Math.clamped(o.y,t.y,a.y)}else s.left=e.left+i*r.x+l.x,s.top=e.top+n*r.y+l.y;this.element.css(s)}show(){this.token&&(this.forceHide||!0!==this.clientConfig.disable&&!0!==this.worldConfig.disable&&(this.sticky&&(this.stickied=!0),this.element[0].classList.toggle("sticky",this.stickied),this.element.css("visibility","visible")))}hide(){this.element.css("visibility","hidden")}async _render(e=!1,t={}){await super._render(e,t),this.hide();const s=this.element.find("img"),a=s.length;if(a>0){let e=0;s.one("load",(()=>{e++,e===a&&this.token&&(this._setPosition(),this.show())}))}else this.token&&(this._setPosition(),this.show())}activateListeners(e){e.find(".controls .close").click((()=>{this.clearBind()}))}tokenHover(e,t){if(t){const t=pf1.tooltip.mousePos,s=document.elementFromPoint(t.x,t.y);"board"===s?.id&&pf1.tooltip.bind(e.document)}else pf1.tooltip.unbind(e.document)}static toggle(e){e?(pf1.tooltip||(pf1.tooltip=new TooltipPF,Hooks.on("hoverToken",pf1.tooltip.tokenHover)),pf1.tooltip.setPosition()):pf1.tooltip&&(Hooks.off("hoverToken",pf1.tooltip.tokenHover),pf1.tooltip=null)}async refresh(){await this.render(),this.forceHide?this.hide():this.show()}}const registerSystemSettings=function(){game.settings.register("pf1","systemMigrationVersion",{name:"System Migration Version",scope:"world",config:!1,type:String,default:"0.0.0"}),game.settings.register("pf1","migrating",{scope:"world",config:!1,type:Boolean,default:!1,onChange:e=>pf1.migrations.isMigrating=e}),game.settings.register("pf1","changelogVersion",{name:"Changelog Version",scope:"client",config:!1,type:String,default:"0.74.9"}),game.settings.register("pf1","dontShowChangelog",{name:"Don't Automatically Show Changelog",scope:"client",config:!1,type:Boolean,default:!1}),game.settings.registerMenu("pf1","healthConfig",{name:"PF1.SETTINGS.Health.Title",label:"PF1.SETTINGS.Health.Button",hint:"PF1.SETTINGS.Health.Hint",icon:"fas fa-heartbeat",type:HealthConfig,restricted:!0}),game.settings.register("pf1","healthConfig",{scope:"world",default:new HealthConfigModel,type:HealthConfigModel,config:!1,requiresReload:!0}),game.settings.registerMenu("pf1","experienceConfig",{name:"PF1.ExperienceConfigName",label:"PF1.ExperienceConfigLabel",hint:"PF1.ExperienceConfigHint",icon:"fas fa-book",type:ExperienceConfig,restricted:!0}),game.settings.register("pf1","experienceConfig",{name:"PF1.ExperienceConfigName",scope:"world",default:new ExperienceConfigModel,type:ExperienceConfigModel,config:!1,onChange:()=>pf1.utils.refreshActors({renderOnly:!0})}),game.settings.register("pf1","accessibilityConfig",{name:"PF1.AccessibilityConfigName",scope:"client",default:new AccessibilityConfigModel,type:AccessibilityConfigModel,config:!1,onChange:()=>pf1.utils.refreshActors({renderOnly:!0})}),game.settings.registerMenu("pf1","tooltipConfig",{name:"PF1.SETTINGS.TokenTooltip.Name",label:"PF1.SETTINGS.TokenTooltip.Label",hint:"PF1.SETTINGS.TokenTooltip.Hint",restricted:!1,icon:"fas fa-window-maximize",type:TooltipConfig}),game.settings.register("pf1","tooltipConfig",{scope:"client",default:new TokenTooltipConfigModel,type:TokenTooltipConfigModel,config:!1,onChange:e=>{const t=!game.settings.get("pf1","tooltipWorldConfig").disabled&&!e.disabled;TooltipPF.toggle(t)}}),game.settings.register("pf1","tooltipWorldConfig",{scope:"world",default:new TokenTooltipWorldConfigModel,type:TokenTooltipWorldConfigModel,config:!1,onChange:e=>{TooltipPF.toggle(!e.disable),pf1.tooltip?.setPosition()}}),game.settings.register("pf1","integration",{type:IntegrationModel,default:new IntegrationModel,scope:"world",config:!1,requiresReload:!0}),game.settings.registerMenu("pf1","integration",{name:"PF1.Application.Integration.Title",label:"PF1.Application.Integration.Label",hint:"PF1.Application.Integration.Hint",restricted:!0,icon:"fa-solid fa-check-to-slot",type:IntegrationConfig}),game.settings.register("pf1","performance",{scope:"client",default:new PerformanceModel,type:PerformanceModel,config:!1}),game.settings.registerMenu("pf1","performance",{name:"PF1.Application.Performance.Title",label:"PF1.Application.Performance.Button",hint:"PF1.Application.Performance.Hint",restricted:!1,icon:"fa-solid fa-gauge",type:PerformanceConfig}),game.settings.register("pf1","measureStyle",{name:"PF1.SETTINGS.Canvas.MeasureStyle",hint:"PF1.SETTINGS.Canvas.MeasureStyleHint",scope:"world",config:!0,default:!0,type:Boolean}),game.settings.register("pf1","diagonalMovement",{name:"PF1.SETTINGS.DiagonalRule.Label",hint:"PF1.SETTINGS.DiagonalRule.Hint",scope:"world",config:!0,default:"5105",type:String,choices:{5105:"PF1.SETTINGS.DiagonalRule.Options.Core",555:"PF1.SETTINGS.DiagonalRule.Options.Simple"}}),game.settings.register("pf1","units",{name:"PF1.SETTINGS.Units.System",hint:"PF1.SETTINGS.Units.SystemHint",scope:"world",config:!0,default:"imperial",type:String,choices:{imperial:"PF1.SETTINGS.Units.Imperial",metric:"PF1.SETTINGS.Units.Metric"},requiresReload:!0}),game.settings.register("pf1","distanceUnits",{name:"PF1.SETTINGS.Units.Distance",hint:"PF1.SETTINGS.Units.DistanceHint",scope:"world",config:!0,default:"default",type:String,choices:{default:"PF1.Default",imperial:"PF1.SETTINGS.Units.ImperialDistance",metric:"PF1.SETTINGS.Units.MetricDistance"},requiresReload:!0}),game.settings.register("pf1","weightUnits",{name:"PF1.SETTINGS.Units.Weight",hint:"PF1.SETTINGS.Units.WeightHint",scope:"world",config:!0,default:"default",type:String,choices:{default:"PF1.Default",imperial:"PF1.SETTINGS.Units.ImperialWeight",metric:"PF1.SETTINGS.Units.MetricWeight"},requiresReload:!0}),game.settings.register("pf1","overlandMetricVariant",{name:"PF1.SETTINGS.OverlandVariantN",hint:"PF1.SETTINGS.OverlandVariantL",scope:"world",config:!0,default:"rounded",choices:{rounded:"PF1.SETTINGS.OverlandMetricRounded",exact:"PF1.SETTINGS.OverlandMetricExact"}}),game.settings.register("pf1","allowBackgroundSkills",{name:"PF1.SETTINGS.VariantRules.BackgroundSkills",hint:"PF1.SETTINGS.VariantRules.BackgroundSkillsHint",scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>pf1.utils.refreshActors({renderOnly:!0})}),game.settings.register("pf1","useFractionalBaseBonuses",{name:"PF1.SETTINGS.VariantRules.FractionalBaseBonuses",hint:"PF1.SETTINGS.VariantRules.FractionalBaseBonusesHint",scope:"world",config:!0,default:!1,type:Boolean,requiresReload:!0}),game.settings.register("pf1","unchainedActionEconomy",{name:"PF1.SETTINGS.UnchainedActionEconomyN",hint:"PF1.SETTINGS.UnchainedActionEconomyH",scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>pf1.utils.refreshActors({renderOnly:!0})}),game.settings.register("pf1","cybertech",{name:"PF1.SETTINGS.Cybertech",hint:"PF1.SETTINGS.CybertechHint",scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>pf1.utils.refreshActors({renderOnly:!0})}),game.settings.register("pf1","critConfirm",{name:"PF1.SETTINGS.CriticalConfirm",hint:"PF1.SETTINGS.CriticalConfirmHint",scope:"world",type:Boolean,default:!0,config:!0}),game.settings.register("pf1","lowLightVisionMode",{name:"PF1.SETTINGS.Vision.RequiresSelection",hint:"PF1.SETTINGS.Vision.RequiresSelectionHint",scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>{canvas.perception.update({initializeLighting:!0,initializeVision:!0,refreshLighting:!0,refreshVision:!0},!0)}}),game.settings.register("pf1","sharedVisionMode",{name:"PF1.SETTINGS.Vision.Sharing",hint:"PF1.SETTINGS.Vision.SharingHint",scope:"world",config:!1,default:0,type:Number,choices:{0:"PF1.SETTINGS.Vision.SharingWithoutSelection",1:"PF1.SETTINGS.Vision.SharingWithSelection"},onChange:()=>canvas.perception.update({refreshLighting:!0,refreshVision:!0},!0)}),game.settings.register("pf1","guaranteedVision",{name:"PF1.SETTINGS.Vision.Guaranteed",hint:"PF1.SETTINGS.Vision.GuaranteedHint",scope:"world",config:!0,default:"OBSERVER",type:String,choices:{OBSERVER:"OWNERSHIP.OBSERVER",OWNER:"OWNERSHIP.OWNER"},onChange:()=>canvas.perception.update({refreshLighting:!0,refreshVision:!0},!0)}),game.settings.register("pf1","characterVision",{name:"PF1.SETTINGS.Vision.PCDefault",hint:"PF1.SETTINGS.Vision.PCDefaultHint",scope:"world",config:!0,default:!0,type:Boolean}),game.settings.register("pf1","pcDisposition",{name:"PF1.SETTINGS.Token.PCDisposition",hint:"PF1.SETTINGS.Token.PCDispositionHint",type:String,choices:{NONE:"PF1.NoOverride",FRIENDLY:"TOKEN.DISPOSITION.FRIENDLY",NEUTRAL:"TOKEN.DISPOSITION.NEUTRAL"},default:"FRIENDLY",scope:"world",config:!0}),game.settings.register("pf1","npcDisposition",{name:"PF1.SETTINGS.Token.NPCDisposition",hint:"PF1.SETTINGS.Token.NPCDispositionHint",type:String,choices:{NONE:"PF1.NoOverride",NEUTRAL:"TOKEN.DISPOSITION.NEUTRAL",HOSTILE:"TOKEN.DISPOSITION.HOSTILE"},default:"NONE",scope:"world",config:!0}),game.settings.register("pf1","systemVision",{name:"PF1.SETTINGS.Vision.SystemControl",hint:"PF1.SETTINGS.Vision.SystemControlHint",scope:"world",config:!0,default:!0,type:Boolean,onChange:()=>{Object.values(ui.windows).filter((e=>e instanceof TokenConfig)).forEach((e=>e.render())),canvas.perception.update({initializeLighting:!0,refreshLighting:!0,refreshVision:!0},!0)}}),game.settings.register("pf1","autoCollapseItemCards",{name:"PF1.SETTINGS.Chat.AutoCollapse",hint:"PF1.SETTINGS.Chat.AutoCollapseHint",scope:"client",config:!0,default:!1,type:Boolean,onChange:()=>ui.chat.render()}),game.settings.register("pf1","hideChatButtons",{name:"PF1.SETTINGS.Chat.HideButtons",hint:"PF1.SETTINGS.Chat.HideButtonsHint",scope:"client",config:!0,default:!1,type:Boolean,onChange:()=>ui.chat.render()}),game.settings.register("pf1","coinWeight",{name:"PF1.SETTINGS.Houserules.CoinDivisor",hint:"PF1.SETTINGS.Houserules.CoinDivisorHint",scope:"world",config:!0,default:50,type:Number,requiresReload:!0}),game.settings.register("pf1","spellPointCost",{name:"PF1.SETTINGS.Houserules.SpellPointCost",hint:"PF1.SETTINGS.Houserules.SpellPointCostHint",scope:"world",config:!0,default:"1 + @sl",type:String,onChange:()=>pf1.utils.refreshSheets({reset:!1})}),game.settings.register("pf1","alternativeReachCornerRule",{name:"PF1.SETTINGS.Houserules.AltReach",hint:"PF1.SETTINGS.Houserules.AltReachHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("pf1","npcProficiencies",{name:"PF1.SETTINGS.Houserules.NPCProficiencies",hint:"PF1.SETTINGS.Houserules.NPCProficienciesHint",scope:"world",config:!0,default:!1,onChange:()=>pf1.utils.refreshSheets({reset:!1}),type:Boolean}),game.settings.register("pf1","coreEffects",{name:"PF1.SETTINGS.CoreEffectsN",hint:"PF1.SETTINGS.CoreEffectsH",scope:"world",config:!0,default:!1,type:Boolean,requiresReload:!0}),game.settings.register("pf1","hideTokenConditions",{name:"PF1.SETTINGS.HideTokenConditionsN",hint:"PF1.SETTINGS.HideTokenConditionsH",scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>canvas.tokens?.placeables?.forEach((e=>e._applyRenderFlags({redrawEffects:!0})))}),game.settings.register("pf1","obscureInlineRolls",{name:"PF1.SETTINGS.Chat.ObscureInlineRolls",hint:"PF1.SETTINGS.Chat.ObscureInlineRollsHint",scope:"world",config:!0,default:!1,type:Boolean,requiresReload:!0}),game.settings.register("pf1","obscureSaveDCs",{name:"PF1.SETTINGS.Chat.ObscureSaveDCs",hint:"PF1.SETTINGS.Chat.ObscureSaveDCsHint",scope:"world",config:!0,default:!0,type:Boolean,requiresReload:!0}),game.settings.register("pf1","initiativeTiebreaker",{name:"PF1.SETTINGS.InitTiebreaker.Label",hint:"PF1.SETTINGS.InitTiebreaker.Hint",scope:"world",config:!0,default:!0,type:Boolean,requiresReload:!0}),game.settings.register("pf1","skipActionDialogs",{name:"PF1.SETTINGS.SkipActionDialogsN",hint:"PF1.SETTINGS.SkipActionDialogsH",scope:"client",config:!0,default:!1,type:Boolean}),game.settings.register("pf1","placeMeasureTemplateOnQuickRolls",{name:"PF1.SETTINGS.MeasureOnQuickUse",hint:"PF1.SETTINGS.MeasureOnQuickUseHint",scope:"client",config:!0,default:!0,type:Boolean}),game.settings.register("pf1","invertSectionFilterShiftBehaviour",{name:"PF1.SETTINGS.Sheet.InvertFilters",hint:"PF1.SETTINGS.Sheet.InvertFiltersHint",scope:"client",config:!0,default:!1,type:Boolean}),game.settings.register("pf1","disableAttackCardTargets",{name:"PF1.SETTINGS.Chat.NoTargets",hint:"PF1.SETTINGS.Chat.NoTargetsHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("pf1","clearTargetsAfterAttack",{name:"PF1.SETTINGS.Chat.ClearTargets",hint:"PF1.SETTINGS.Chat.ClearTargetsHint",scope:"client",config:!0,default:!1,type:Boolean})},migrateSystemSettings=async function(){game.settings.storage.get("client").removeItem("pf1.compendiumItems"),game.user.isGM},getSkipActionPrompt=function(){return game.settings.get("pf1","skipActionDialogs")&&!pf1.skipConfirmPrompt||!game.settings.get("pf1","skipActionDialogs")&&pf1.skipConfirmPrompt},o=Object.freeze(Object.defineProperty({__proto__:null,getSkipActionPrompt,migrateSystemSettings,registerClientSettings:function(){},registerSystemSettings},Symbol.toStringTag,{value:"Module"}));class D20RollPF extends RollPF{options;static standardRoll="1d20";constructor(e,t,s={},a={}){if(super(e,t,s),this.options=foundry.utils.mergeObject(this.constructor.defaultOptions,s),this.context=a,!(this.terms[0]instanceof Die)){if(!(this.terms[0]instanceof NumericTerm&&null===this.options.staticRoll))throw Error("Invalid D20RollPF formula provided: "+this._formula);this.options.staticRoll=this.terms[0].total,this.terms[0]=new Die({number:1,faces:20}),this._formula=this.constructor.getFormula(this.terms)}}static get defaultOptions(){return{critical:20,flavor:"",staticRoll:null,bonus:""}}static DIALOG_TEMPLATE="systems/pf1/templates/chat/roll-dialog.hbs";static CHAT_TEMPLATE="systems/pf1/templates/chat/roll-ext.hbs";static STATIC_ROLL={TEN:10,TWENTY:20};get d20(){return this.terms[0]}get isCrit(){if(this._evaluated)return!!Number.isNumeric(this.options.critical)&&this.d20.total>=this.options.critical}get isNat20(){if(this._evaluated)return 20===this.d20.total}get isNat1(){if(this._evaluated)return 1===this.d20.total}get isMisfire(){if(this._evaluated)return this.natural<=(this.options.misfire??0)}get natural(){if(this._evaluated)return this.d20.total}get isStatic(){return null!==this.options.staticRoll}get isNormal(){return this.terms[0].formula===this.constructor.standardRoll}get bonus(){if(this._evaluated)return this.total-this.natural}get formula(){let e=this.constructor.getFormula(this.terms);const t=this.constructor.parse(""+this.options.bonus,this.data);return this.options.bonus&&!this._evaluated&&(e+=" + "+this.constructor.getFormula(t)),e}get flavor(){return this.options.flavor}async promptDialog(e={}){const{rollMode:t=game.settings.get("core","rollMode"),template:s=this.constructor.DIALOG_TEMPLATE}=e,a=null===this.options.staticRoll?this.d20.formula:this.options.staticRoll,i={data:this.data,rollMode:e.rollMode||t,rollModes:CONFIG.Dice.rollModes,d20:a===pf1.dice.D20RollPF.standardRoll?"":a,bonus:this.options.bonus},n=e.dialogOptions||{};n.classes??=[],n.classes.push(...Dialog.defaultOptions.classes,"pf1","roll-prompt"),e.renderOptions;const o=await renderTemplate(s,i);return Dialog.wait({title:e.title||game.i18n.localize("PF1.Roll"),content:o,buttons:{normal:{label:game.i18n.localize("PF1.Normal"),callback:e=>this._onDialogSubmit(e,null)},takeTen:{label:game.i18n.format("PF1.TakeX",{number:this.constructor.STATIC_ROLL.TEN}),callback:e=>this._onDialogSubmit(e,this.constructor.STATIC_ROLL.TEN)},takeTwenty:{label:game.i18n.format("PF1.TakeX",{number:this.constructor.STATIC_ROLL.TWENTY}),callback:e=>this._onDialogSubmit(e,this.constructor.STATIC_ROLL.TWENTY)}},default:"normal",close:()=>null},{...n,jQuery:!1,subject:e.subject,speaker:e.speaker,roll:this},{...e.renderOptions||{},focus:!0})}_getFormData(e){return foundry.utils.expandObject(new FormDataExtended(e).object)}_onDialogSubmit(e,t){const s=e.querySelector("form");if(!s)return this;const a=this._getFormData(s);if(a.bonus&&(this.options.bonus=a.bonus),a.d20){const e=this.constructor.parse(a.d20,this.data);e[0]instanceof NumericTerm?this.options.staticRoll=e[0].total:e[0]instanceof Die&&(this.terms=[...e,...this.terms.slice(1)],void 0!==t&&(this.options.staticRoll=t))}else void 0!==t&&(this.options.staticRoll=t);return a.rollMode&&(this.options.rollMode=a.rollMode),this._formula=this.constructor.getFormula(this.terms),this}async toMessage(e={},t={}){this._evaluated||await this.evaluate();const s=t.chatTemplate||this.constructor.CHAT_TEMPLATE,a=foundry.utils.mergeObject({formula:this.formula,tooltip:await this.getTooltip(),total:Math.floor(100*this.total)/100,isCrit:this.isCrit,isMisfire:this.isMisfire,isNat20:this.isNat20,isNat1:this.isNat1,natural:this.natural,options:this.options,isStatic:this.isStatic,isNormal:this.isNormal,get isAbnormal(){return this.isStatic||!this.isNormal},get abnormalTooltip(){return this.isStatic?game.i18n.format("PF1.TakeX",{number:this.options.staticRoll}):this.isAbnormal?"PF1.CustomRollDesc":""},bonus:this.bonus,flavor:this.options.flavor,compendiumEntry:t.compendium?.entry,compendiumEntryType:t.compendium?.type},t.chatTemplateData||{}),i=t.rollMode||this.options.rollMode||game.settings.get("core","rollMode");(e=foundry.utils.mergeObject({type:CONST.CHAT_MESSAGE_TYPES.ROLL,sound:t.noSound?void 0:CONFIG.sounds.dice,content:await renderTemplate(s,a)},e)).rolls=[this],t.subject&&foundry.utils.setProperty(e,"flags.pf1.subject",t.subject);const n=ChatMessage.getSpeakerActor(e.speaker);n&&game.combat?.combatants.some((e=>e.actor===n))&&foundry.utils.setProperty(e,"flags.pf1.metadata.combat",game.combat.id);const o=new ChatMessage.implementation(e);return i&&o.applyRollMode(i),e=o.toObject(),t.create??1?ChatMessage.implementation.create(e,{rollMode:i}):e}async _evaluate(e){return this._applyBonus(),await super._evaluate(e),this._applyStaticRoll(),this}_evaluateSync(e){return this._applyBonus(),super._evaluateSync(e),this._applyStaticRoll(),this}_applyBonus(){if(this.options.bonus){const e=this.constructor.parse(""+this.options.bonus,this.data);e[0]instanceof OperatorTerm||e.unshift(new OperatorTerm({operator:"+"})),this.terms.push(...e),this._formula=this.constructor.getFormula(this.terms)}}_applyStaticRoll(){if(!this._evaluated)throw Error("Roll must be evaluated before applying static roll.");if(null!==this.options.staticRoll&&this.options.staticRoll>=0){const e=this.d20,t=this.options.staticRoll-e.total,s=this._total+t;(e.results.find((e=>e.active))??e.results[0]).result=this.options.staticRoll,this._total=s}}}class ItemAction{_sheet=null;parent=null;apps={};static FALLBACK_IMAGE="systems/pf1/icons/skills/gray_04.jpg";constructor(e,t){this.data=foundry.utils.mergeObject(ItemAction.defaultData,e),this.parent=t,this.prepareData()}get normalMaterial(){return this.data.material?.normal||this.item.system.material?.normal||""}get addonMaterial(){return(this.data.material?.addon||this.item.system.material?.addon||[]).filter((e=>e??!1))}get alignments(){return this.data.alignments??null}get description(){return this.data.description}get isCombatManeuver(){return["mcman","rcman"].includes(this.data.actionType)}get activation(){return(game.settings.get("pf1","unchainedActionEconomy")?this.data.activation.unchained:this.data.activation)??{}}static async create(e,t={}){const{parent:s}=t;if(s instanceof pf1.documents.item.ItemPF){e=e.map((e=>foundry.utils.mergeObject(this.defaultData,e)));const t=foundry.utils.deepClone(s.system.actions||[]);return t.push(...e),await s.update({"system.actions":t}),e.map((e=>s.actions.get(e._id)))}return[]}static get defaultDamageType(){return{values:[],custom:""}}get item(){return this.parent}get actor(){return this.parent.actor}get id(){return this.data._id}get img(){return this.data.img||this.item?.img||this.constructor.FALLBACK_IMAGE}get name(){return this.data.name}get tag(){return this.data.tag||createTag(this.name)}get canUse(){const e=this.item;if(!e.canUse)return!1;if(this.isSelfCharged&&(this.data.uses.self?.value??0)<=0)return!1;if(e.isPhysical&&e.system.quantity<=0)return!1;if(this.isCharged){const t=this.getChargeCost(),s=e.charges;if(t>0&&t>s)return!1}const t=this.ammoType;return!t||0!==this.actor?.itemTypes.loot.filter((e=>"ammo"===e.subType&&e.system.extraType===t&&e.system.quantity>0)).length}get hasAttack(){return["mwak","rwak","twak","msak","rsak","mcman","rcman"].includes(this.data.actionType)}get hasMultiAttack(){if(!this.hasAttack)return!1;const e=this.data.extraAttacks??{};return e.manual?.length>0||!!e.type}get autoDeductCharges(){return this.getChargeCost()>0}get isCharged(){return this.item.isCharged}get isSelfCharged(){return["single","round","day","week","charges"].includes(this.data.uses.self?.per)}getChargeCost({rollData:e=null}={}){if(!this.isCharged)return 0;let t="spell"===this.item.type&&this.item.useSpellPoints()?this.data.uses.spellPointCost:this.data.uses.autoDeductChargesCost;t?"string"!=typeof t&&(console.warn(this.item.name,"action",this.name,"has invalid charge formula:",t,this),t=this.item.getDefaultChargeFormula()):t=this.item.getDefaultChargeFormula(),e??=this.getRollData();const s=RollPF.safeRollAsync(t,e).total;return this.item.isSingleUse?Math.clamped(s,-1,1):s}get range(){return this.getRange({type:"single"})}get minRange(){return this.getRange({type:"min"})}get maxRange(){return this.getRange({type:"max"})}getRange({type:e="single",rollData:t=null}={}){const s=this.data.range.units,a="min"===e?this.data.range.minValue:this.data.range.value;let i="min"===e?this.data.range.minUnits:s;if("min"===e&&!["reach","ft","mi","seeText"].includes(s))return 0;if(!i){if("min"!==e)return null;if("reach"!==s)return 0;i="melee"}t??=this.getRollData();const n=calculateRange(a,i,t)[0];return["single","min"].includes(e)?n:n*this.data.range.maxIncrements}get hasTemplate(){const{type:e,size:t}=this.data.measureTemplate;return!!e&&!!t}get hasDamage(){return!!this.data.damage.parts?.length}get critRange(){return this.item.isBroken||this.isCombatManeuver?20:this.data.ability?.critRange||20}get misfire(){const e=this.data.ammo?.misfire??null;return Number.isFinite(e)?e:this.item?.system.ammo?.misfire??0}getPowerAttackMult({rollData:e=null}={}){e??=this.getRollData();const t=e.action?.held||e.item?.held||"1h";let s=e.action?.powerAttack?.multiplier;if(s)return s;if(s=1,"natural"===this.item.subType)if(e.action.naturalAttack?.primaryAttack){(e.action.ability?.damageMult??1)>=1.5&&(s=1.5)}else s=.5;else"2h"===t?s=1.5:"oh"===t&&(s=.5);return s}get hasRange(){const e=this.data.range?.units;return"none"!==e&&!!e}get isHealing(){return"heal"===this.data.actionType&&this.hasDamage}get hasEffect(){return this.hasDamage||null!=this.data.effectNotes&&this.data.effectNotes.length>0}get hasSave(){return!!this.data.save?.type}getDC(e=null){e??=this.getRollData();let t=10;const s=e.dcBonus??0;if("spell"===this.item.type){const t=this.item.spellbook;if(t){let a=t.baseDCFormula;const i=e.action;i.save.dc.length>0&&(a+=" + "+i.save.dc);const n=e.attributes.spells?.school?.[this.item.system.school]?.dc??0,o=e.attributes?.spells?.school?.all?.dc??0;return RollPF.safeRollSync(a,e).total+s+n+o}{const e=this.item?.system.level??1;return 10+e+Math.floor(e/2)+s}}{const a=this.data.save.dc.toString()||"0";return t=RollPF.safeRollSync(a,e).total+s,t}}get hasSound(){return!!this.data.soundEffect}get enhancementBonus(){return this.data.enh?.value??this.item.system.enh}get isRanged(){return["rwak","twak","rsak","rcman"].includes(this.data.actionType)}get isSpell(){return["rsak","msak"].includes(this.data.actionType)}get damageSources(){const e=[pf1.const.actionTypeToContext[this.data.actionType]??"damage"];this.isRanged?e.push("rdamage"):e.push("mdamage"),"natural"===this.item.subType&&e.push("ndamage");const t=this.item.getContextChanges(e);return 0==t.length?[]:getHighestChanges(t,{ignoreTarget:!0})}get allDamageSources(){const e=this.data.conditionals.filter((e=>e.default)).filter((e=>e.modifiers.find((e=>"damage"===e.target)))),t=this.getRollData();if(!t)return[];const s=Object.keys(pf1.config.bonusTypes),a=[];for(const i of e)for(const e of i.modifiers){if("damage"!==e.target)continue;const n=RollPF.safeRollAsync(e.formula,t);if(n.err)continue;const o=s.includes(e.type);a.push({flavor:i.name,value:n.total,modifier:o?e.type:"untyped",type:o?void 0:e.type,formula:e.formula})}const i=[...this.damageSources,...a],n=this.enhancementBonus;return n&&i.push({flavor:game.i18n.localize("PF1.EnhancementBonus"),value:n,type:"enh",formula:n.toString()}),this.item.isBroken&&i.push({flavor:game.i18n.localize("PF1.Broken"),value:-2,type:"untyped",formula:"-2"}),getHighestChanges(i,{ignoreTarget:!0})}getRollData(){const e=foundry.utils.deepClone(this.item.getRollData());if(e.action=foundry.utils.deepClone(this.data),e.dc=this.hasSave?this.getDC(e):0,"spell"===this.item.type&&(e.cl+=e.attributes?.spells?.school?.[this.item.system.school]?.cl??0),Hooks.events.pf1GetRollData?.length>0&&Hooks.callAll("pf1GetRollData",this,e),e.action.bab){const t=RollPF.safeRollSync(e.action.bab,e).total;foundry.utils.setProperty(e,"attributes.bab.total",t||0)}return e.bab=e.attributes?.bab?.total||0,e}static get defaultData(){return{_id:foundry.utils.randomID(16),name:game.i18n.localize("PF1.Action"),img:"",description:"",tag:"",activation:{cost:1,type:"nonaction",unchained:{cost:1,type:"nonaction"}},duration:{value:null,units:""},target:{value:""},range:{value:null,units:"",maxIncrements:1,minValue:null,minUnits:""},uses:{autoDeductChargesCost:"",self:{value:0,maxFormula:"",per:""}},measureTemplate:{type:"",size:"",color:"",texture:""},attackName:"",actionType:"other",attackBonus:"",critConfirmBonus:"",damage:{parts:[],critParts:[],nonCritParts:[]},extraAttacks:{type:"",manual:[],formula:{count:"",bonus:"",label:""}},ability:{attack:"",damage:"",damageMult:null,critRange:20,critMult:2},save:{dc:"",type:"",description:""},effectNotes:[],attackNotes:[],soundEffect:"",powerAttack:{multiplier:null,damageBonus:2,critMultiplier:1},naturalAttack:{primaryAttack:!0,secondary:{attackBonus:"-5",damageMult:.5}},held:"",nonlethal:!1,splash:!1,touch:!1,ammo:{type:"",cost:1},spellEffect:"",area:"",conditionals:[],enh:{value:null},material:{normal:{},addon:[]},alignments:{lawful:null,chaotic:null,good:null,evil:null}}}prepareData(){this.data.actionType||="other";const e=this.getRollData();if(this.data.conditionals instanceof Array&&(this.conditionals=this._prepareConditionals(this.data.conditionals)),this.data.uses.self?.per){const t="single"===this.data.uses.self.per?"1":this.data.uses.self.maxFormula,s=RollPF.safeRollSync(t,e).total??0;foundry.utils.setProperty(this.data,"uses.self.max",s)}if(null==this.data.enh?.value||["weapon","attack"].includes(this.item.type)||foundry.utils.setProperty(this.data,"enh.value",null),!Number.isFinite(this.data.ability?.damageMult)){let e=this.item?.isPhysical||this.item?.isQuasiPhysical||!1;this.hasAttack||(e=!1),e||foundry.utils.setProperty(this.data,"ability.damageMult",1)}void 0===this.data.naturalAttack?.secondary?.damageMult&&foundry.utils.setProperty(this.data,"naturalAttack.secondary.damageMult",.5)}_prepareConditionals(e){const t=this.conditionals,s=new Collection;for(const a of e){let e=null;t&&t.has(a._id)?(e=t.get(a._id),e.data=a,e.prepareData()):e=new pf1.components.ItemConditional(a,this),s.set(a._id||e.data._id,e)}return s}async delete(){const e=foundry.utils.deepClone(this.item.system.actions);e.findSplice((e=>e._id==this.id));const t=[];for(const e of Object.values(this.apps))t.push(e.close({pf1:{action:"delete"},submit:!1,force:!0}));return await Promise.all(t),this.item.update({"system.actions":e})}async update(e,t={}){e=foundry.utils.expandObject(e);const s=this.item.system.actions.findIndex((e=>e._id===this.id));if(s<0)throw Error(`Action ${this.id} not found on item.`);const a=this.item.toObject().system.actions[s],i=foundry.utils.mergeObject(a,e,{performDeletions:!0});i.name||=this.name;{const e=["extraAttacks.manual","damage.parts","damage.critParts","damage.nonCritParts","attackNotes","effectNotes","conditionals"];for(const t of e)keepUpdateArray(this.data,i,t)}await this.item.update({"system.actions":{[s]:i}},t)}async getChatData(e={}){return this.item.getChatData({...e,actionId:this.id})}getLabels({rollData:e}={}){const t=this.data,s={};if(e??=this.getRollData(),t.activation){const e=this.activation;if(e){const t=game.settings.get("pf1","unchainedActionEconomy"),a=t?pf1.config.abilityActivationTypes_unchained:pf1.config.abilityActivationTypes,i=t?pf1.config.abilityActivationTypesPlurals_unchained:pf1.config.abilityActivationTypesPlurals,n=e.type||"nonaction";e.cost>1&&i[n]?s.activation=[e.cost.toString(),i[n]].filterJoin(" "):s.activation=[["minute","hour","action"].includes(n)&&e.cost?e.cost.toString():"",a[n]].filterJoin(" ")}}if(this.hasSave){const t=e.dc+(e.dcBonus??0);s.save=game.i18n.format("PF1.DCThreshold",{threshold:t})}if(this.hasRange){const a=t.range.units,i=pf1.config.distanceUnits[a];if(["personal","touch","melee","reach"].includes(a))s.range=i;else{const t=this.getRange({type:"single",rollData:e});if(t>0){const e="metric"===pf1.utils.getDistanceSystem()?"m":"ft";s.range=`${t} ${e}`}["close","medium","long"].includes(a)&&(s.range+=` (${i})`)}}return s.actionType=pf1.config.itemActionTypes[t.actionType],s}get attackSources(){const e=["~attackCore"];return this.isCombatManeuver&&e.push("cmb"),this.isRanged?e.push("rattack"):e.push("mattack"),"natural"===this.item.subType&&e.push("nattack"),"twak"===this.data.actionType&&e.push("tattack"),this.item.getContextChanges(e)}async rollAttack({data:e=null,extraParts:t=[],bonus:s=null,primaryAttack:a=!0}={}){const i=e??this.getRollData();i.item;const n=i.action,o={};i.item.primaryAttack=a,this.isRanged;const r=this.isCombatManeuver,l=i.traits?.size??"med";i.sizeBonus=r?pf1.config.sizeSpecialMods[l]:pf1.config.sizeMods[l],i.item.proficiencyPenalty=-4;const c=n.ability.attack,u=[];0!==i.sizeBonus&&u.push(`@sizeBonus[${game.i18n.localize("PF1.Size")}]`);const p=i.abilities?.[c];0!==p?.mod&&u.push(`@abilities.${c}.mod[${pf1.config.abilities[c]}]`);const m=this.attackSources;["mwak","rwak","twak","mcman","rcman"].includes(this.data.actionType)&&this.item.system.masterwork&&m.push(new pf1.components.ItemChange({formula:"1",operator:"add",target:"attack",type:"enh",value:1,flavor:game.i18n.localize("PF1.EnhancementBonus")})),this.enhancementBonus&&m.push(new pf1.components.ItemChange({formula:this.enhancementBonus.toString(),operator:"add",target:"attack",type:"enh",value:this.enhancementBonus,flavor:game.i18n.localize("PF1.EnhancementBonus")})),getHighestChanges(m.filter((e=>(e.applyChange(this.actor),"set"!==e.operator))),{ignoreTarget:!0}).filter((e=>0!=e.value)).forEach((t=>{let s=t.value;n.bab&&"_bab"===t._id&&(s=RollPF.safeRollSync(t.formula,e).total||0),u.push(`${s}[${RollPF.cleanFlavor(t.flavor)}]`)})),u.push(...t),"string"!=typeof n.attackBonus||["","0"].includes(n.attackBonus)?"number"==typeof n.attackBonus&&(i.item.attackBonus=n.attackBonus,u.push(`@item.attackBonus[${game.i18n.localize("PF1.AttackRollBonus")}]`)):u.push(n.attackBonus);try{o.proficient=this.item.getProficiency(!0)}catch(e){o.proficient=!0}const d="natural"===this.item.subType&&!1===a;o.secondaryPenalty=d?-5:0,i.bonus=s?await RollPF.safeRollAsync(s,i).total:0;const h={critical:this.critRange};if(Hooks.call("pf1PreAttackRoll",this,o,i,h),0!=o.secondaryPenalty&&u.push(`${o.secondaryPenalty}[${game.i18n.localize("PF1.SecondaryAttack")}]`),0!=i.bonus&&u.push(`@bonus[${game.i18n.localize("PF1.SituationalBonus")}]`),o.proficient||u.push(`@item.proficiencyPenalty[${game.i18n.localize("PF1.Proficiency.Penalty")}]`),this.ammoType&&this.ammoCost>0){const e=this.misfire;e>0&&(h.misfire=e)}const g=await new pf1.dice.D20RollPF([i.d20||pf1.dice.D20RollPF.standardRoll,...u.filter((e=>!!e))].join("+"),i,h).evaluate();return delete i.bonus,Hooks.call("pf1AttackRoll",this,g,o),g}async rollDamage({data:e=null,critical:t=!1,extraParts:s=[],conditionalParts:a={},primaryAttack:i=!0}={}){const n=e??this.getRollData();if(!this.hasDamage)throw Error("You may not make a Damage Roll with this Action.");const o="natural"===this.item?.subType;if(n.critMult=1,t&&(n.critMult=this.data.ability.critMult),null==n.ablMult){const e=n.action?.held||n.item?.held||"1h";n.ablMult=n.action?.ability.damageMult??(o?null:pf1.config.abilityDamageHeldMultipliers[e])??1}const r=this.data.damage.parts?.map((e=>({base:e.formula,extra:[],damageType:e.type,type:"normal"})))??[];if(a["damage.normal"]?.forEach((e=>{const[t,s,a]=e;a?r[0].extra.push(t):r.push({base:t,extra:[],damageType:s,type:"normal"})})),!0===t){const e=this.data.damage?.critParts;e&&r.push(...e.map((e=>({base:e.formula,extra:[],damageType:e.type,type:"crit"})))),a["damage.crit"]?.forEach((e=>{const[t,s,a]=e;a?r[0].extra.push(t):r.push({base:t,extra:[],damageType:s,type:"crit"})}))}if(!1===t){const e=this.data.damage?.nonCritParts;e&&r.push(...e.map((e=>({base:e.formula,extra:[],damageType:e.type,type:"nonCrit"})))),a["damage.nonCrit"]?.forEach((e=>{const[t,s,a]=e;a?r[0].extra.push(t):r.push({base:t,extra:[],damageType:s,type:"nonCrit"})}))}if(!this.isHealing){const e=this.damageSources;if(this.enhancementBonus&&e.push(new pf1.components.ItemChange({formula:this.enhancementBonus.toString(),operator:"add",target:"damage",type:"enh",value:this.enhancementBonus,flavor:game.i18n.localize("PF1.EnhancementBonus")})),getHighestChanges(e.filter((e=>(e.applyChange(this.actor),"set"!==e.operator))),{ignoreTarget:!0}).forEach((e=>{let t=e.value;/[\s+-?:]/.test(t)&&(t=`(${t})`),r[0].extra.push(`${t}[${e.flavor}]`)})),this.item.isBroken){const e=game.i18n.localize("PF1.Broken");r[0].extra.push(`-2[${e}]`)}}const l=this.data.ability.damage,c=n.abilities?.[l];if(c){const e=this.data.ability?.max??1/0;c.mod<0?n.ablDamage=Math.min(e,c.mod):n.ablDamage=Math.floor(Math.min(e,c.mod)*n.ablMult);const t=pf1.config.abilities[l];r[0].extra.push(`@ablDamage[${t}]`)}const u=[];for(let e=0;e<r.length;e++){const t=r[e];let a=[];0===e&&(a=[...t.extra,...s]);const i=[t.base,...a].join(" + ");if(0!=i.length)try{const e=await new DamageRoll(i,n,{damageType:t.damageType,type:t.type}).evaluate();u.push(e)}catch(e){throw console.error("Error with damage formula:",i,this),e}}return u}getConditionalTargets(){const e={};return this.hasAttack&&(e.attack=game.i18n.localize(pf1.config.conditionalTargets.attack._label),e.critMult=game.i18n.localize(pf1.config.conditionalTargets.critMult._label)),this.hasDamage&&(e.damage=game.i18n.localize(pf1.config.conditionalTargets.damage._label)),e.size=game.i18n.localize(pf1.config.conditionalTargets.size._label),("spell"===this.item.type||this.hasSave)&&(e.effect=game.i18n.localize(pf1.config.conditionalTargets.effect._label)),Object.keys(this.getConditionalSubTargets("misc")).length>0&&(e.misc=game.i18n.localize(pf1.config.conditionalTargets.misc._label)),e}getConditionalSubTargets(e){const t={};if(foundry.utils.hasProperty(pf1.config.conditionalTargets,e))for(const[s,a]of Object.entries(pf1.config.conditionalTargets[e]))s.startsWith("_")||s.startsWith("~")||(t[s]=a);if(["attack","damage"].includes(e))if(this.hasAttack){t.attack_0=game.i18n.localize("PF1.Attack")+" 1";const e=this.data.extraAttacks;e?.manual?.length&&e.manual.forEach(((e,s)=>{t["attack_"+(s+1)]=e.name}))}else delete t.rapidShotDamage;return"effect"===e&&(this.hasSave&&(t.dc=game.i18n.localize("PF1.DC")),"spell"===this.item?.type&&(t.cl=game.i18n.localize("PF1.CasterLevelAbbr"))),"misc"===e&&this.isCharged&&"spell"!==this.type&&(t.charges=game.i18n.localize("PF1.ChargeCost")),t}getConditionalModifierTypes(e){const t={};if("attack"===e||"damage"===e)for(const[e,s]of Object.entries(pf1.config.bonusTypes))t[e]=s;if("damage"===e)for(const e of pf1.registry.damageTypes)t[e.id]=e.name;return t}getConditionalCritical(e){let t={};return"attack"===e&&(t={...t,normal:"PF1.Normal",crit:"PF1.CriticalConfirmBonus"}),"damage"===e&&(t={...t,normal:"PF1.Normal"},this.hasAttack&&(t={...t,crit:"PF1.OnCritBonusFormula",nonCrit:"PF1.NonMultBonusFormula"})),t}getAttacks({full:e=!0,rollData:t,resolve:s=!1,conditionals:a=!1,bonuses:i=!1}={}){t||=this.getRollData();const n=this.data,o=pf1.config.extraAttacks[n.extraAttacks?.type]??{};let r=1;const l=n.attackName||game.i18n.format("PF1.ExtraAttacks.Formula.LabelDefault",{0:r});t.attackCount=0;const c=game.i18n.localize(o.flavor||""),u=[{bonus:c?`(${o.bonus||"0"})[${c}]`:o.bonus,label:l}];if(e){t.fullAttack=1;const e=game.settings.get("pf1","unchainedActionEconomy");let s=0;const parseAttacks=(e,a,i,n)=>{const o=RollPF.safeRollAsync(e,t)?.total??0;if(!(o<=0)){try{for(let e=0;e<o;e++){t.attackCount=s+=1,t.formulaicAttack=e+1;const o=RollPF.safeRollAsync(a||"0",t,{formula:a,action:this},void 0,{minimize:!0}).total;u.push({bonus:n?`(${o})[${n}]`:o,label:i?.replace("{0}",e+1)||game.i18n.format("PF1.ExtraAttacks.Formula.LabelDefault",{0:r+=1})})}}catch(e){console.error(e)}delete t.attackCount,delete t.formulaicAttack}};if(o.iteratives&&!e&&parseAttacks(pf1.config.iterativeExtraAttacks,pf1.config.iterativeAttackModifier,null,game.i18n.localize("PF1.Iterative")),o.count&&parseAttacks(o.count,o.bonus,null,c),o.manual){const e=n.extraAttacks?.manual??[];for(const{name:t,formula:s}of e)u.push({bonus:s,label:t||game.i18n.format("PF1.ExtraAttacks.Formula.LabelDefault",{0:r+=1})})}o.formula&&parseAttacks(n.extraAttacks.formula?.count,n.extraAttacks.formula?.bonus,n.extraAttacks.formula?.label)}if(s){const e=Array(u.length).fill(0);a&&n.conditionals.filter((e=>e.default&&e.modifiers.find((e=>"attack"===e.target)))).forEach((s=>{s.modifiers.forEach((s=>{const a=RollPF.safeRollAsync(s.formula,t);if(0!=a.total&&s.subTarget?.match(/^attack\.(\d+)$/)){const t=parseInt(RegExp.$1,10);t in e&&(e[t]+=a.total)}}))}));let s=0;if(i){const e=this.item.getAttackSources(this.id,{rollData:t});s=e.reduce(((e,t)=>e+t.value),0)}u.forEach(((a,i)=>{t.attackCount=i,a.bonus=RollPF.safeRollAsync(a.bonus,t).total+s+e[i],delete t.attackCount}))}return u}async use(e={}){return e.actionId=this.id,this.item.use(e)}get ammoType(){const e=this.data.ammo?.type;return"none"===e?null:e||this.item.system.ammo?.type||null}get ammoCost(){return this.ammoType?this.data.ammo?.cost??1:0}get sheet(){return this._sheet||(this._sheet=new pf1.applications.component.ItemActionSheet(this)),this._sheet}render(e=!1,t={}){Object.values(this.apps).forEach((s=>s.render(e,t)))}}class ChatAttack{action;actionUse;attack=null;hasRange=!1;critConfirm=null;hasAttack=!1;hasCritConfirm=!1;hasDamage=!1;damage=new AttackDamage;damageRows=[];nonlethal=!1;critDamage=new AttackDamage;ammo=null;hasCards=!1;cards={};effectNotes=[];effectNotesHTML="";notesOnly=!0;targets=null;constructor(e,{label:t="",rollData:s={},targets:a=null,actionUse:i=null}={}){this.actionUse=i,this.rollData=s,this.setAction(e),this.label=t,this.hasRange=e.item.hasRange,this.targets=a}get actor(){return this.action?.actor}setAmmo(e){const t=this.actor.items.get(e);this.ammo=t?{id:e,img:t.img,name:t.name,misfire:!1}:null}setAction(e){if(null==e)return this.rollData=null,void(this.action=null);this.action=e,this.isHealing=e.isHealing,this.setRollData()}setRollData(){const e=this.rollData;if(e.critMult=1,e.critMultBonus=0,e.critCount=0,null!=e.action.ability.damageMult){const t=e.action?.held||e.item?.held||"1h";e.ablMult=e.action.ability.damageMult??pf1.config.abilityDamageHeldMultipliers[t]??1}}async setEffectNotesHTML(){if(0===this.effectNotes.length)return void(this.effectNotesHTML="");const e={rollData:this.rollData,async:!0,relativeTo:this.action.actor},t=await renderTemplate("systems/pf1/templates/chat/parts/item-notes.hbs",{notes:this.effectNotes,css:"effect-notes",title:"PF1.EffectNotes"});this.effectNotesHTML=await TextEditor.enrichHTML(t,e)}async addAttack({noAttack:e=!1,bonus:t=null,extraParts:s=[],critical:a=!1,conditionalParts:i={}}={}){if(!this.action.item)return;const n=this.action.actor;if(this.hasAttack=!0,this.notesOnly=!1,!0===a){if(this.action.data.critConfirmBonus){let e=this.action.data.critConfirmBonus;RollPF.parse(e).length>1&&(e=`(${e})`),s.push(`${e}[${game.i18n.localize("PF1.CriticalConfirmation")}]`)}const e=pf1.documents.actor.changes.getChangeFlat.call(n,"critConfirm");for(const t of e)n?.sourceDetails[t]?.forEach((e=>s.push(`(${e.value})[${e.name}]`)));i["attack.crit"]?.length&&s.push(...i["attack.crit"])}else i["attack.normal"]?.length&&s.push(...i["attack.normal"]);const o=this.rollData.item.broken;if(o&&!a){const e=game.i18n.localize("PF1.Broken");s.push(`-2[${e}]`)}if(e||a&&!game.settings.get("pf1","critConfirm")&&(this.critConfirm=this.actionUse?.getDefenseDC(this.attack)??RollPF.safeRollSync("0"),this.critConfirm.armorAsDR=!0,this.critConfirm.options.flavor=game.i18n.localize("PF1.Critical"),e=!0),!e){const e=await this.action.rollAttack({data:this.rollData,bonus:t,extraParts:s});!0===a?this.critConfirm=e:this.attack=e;const n=this.rollData.action.ability.critMult??1;!a&&!this.action.isCombatManeuver&&e.isCrit&&n>1&&(this.hasCritConfirm=!0,this.rollData.critMult=Math.max(1,n+(this.rollData.critMultBonus??0)),o&&(this.rollData.critMult=1),await this.addAttack({bonus:t,extraParts:s,critical:!0,conditionalParts:i})),e.options.flavor=a?game.i18n.localize("PF1.CriticalConfirmation"):this.label}}async addDamage({flavor:e=null,extraParts:t=[],critical:s=!1,conditionalParts:a={}}={}){if(!this.action.item)return;this.hasDamage=!0,this.notesOnly=!1;let i=this.damage;!0===s&&(i=this.critDamage);const n=foundry.utils.deepClone(this.rollData);n.critCount=0;const o=s?Math.max(1,n.critMult-1):1;for(let e=0;e<o;++e)s&&n.critCount++,i.rolls.push(...await this.action.rollDamage({data:n,extraParts:t,critical:s,conditionalParts:a}));e||(e=s?game.i18n.localize("PF1.DamageCritical"):this.isHealing?game.i18n.localize("PF1.Healing"):game.i18n.localize("PF1.Damage"));let r=i.rolls.reduce(((e,t)=>e+t.total),0);s&&(r=this.damage.rolls.reduce(((e,t)=>e+t.total),r)),r<1&&(r=1,e=game.i18n.localize("PF1.Nonlethal"),this.nonlethal=!0),(this.rollData.action.nonlethal||this.action.item.system.properties?.nnl)&&(this.nonlethal=!0,e=game.i18n.localize("PF1.Nonlethal")),i.flavor=e,i.total=r}async addEffectNotes(){this.effectNotes=[];const e=this.action.item;if(!e)return;const t=e.actor;if(t){const s=["attacks.effect"];"spell"===e.type&&s.push("spell.effect");for(const e of s)t.getContextNotes(e).forEach((e=>{for(const t of e.notes)this.effectNotes.push(...t.split(/[\n\r]+/))}))}if(e.system.effectNotes?.length&&this.effectNotes.push(...e.system.effectNotes),this.action.data.effectNotes?.length&&this.effectNotes.push(...this.action.data.effectNotes),this.ammo?.misfire){let e=game.i18n.localize("PF1.Misfire");const t=this.action.item?.system.ammo?.explode??0;if(t){e+=` (${pf1.utils.convertDistance(t,"ft")[0]} ${"metric"===pf1.utils.getDistanceSystem()?pf1.config.measureUnitsShort.m:pf1.config.measureUnitsShort.ft})`}this.effectNotes.push(e)}await this.setEffectNotesHTML()}finalize(){this.hasCards=Object.keys(this.cards).length>0;for(let e=0;e<Math.max(this.damage.rolls.length,this.critDamage.rolls.length);e++)this.damageRows.push({normal:null,crit:null});for(let e=0;e<this.damage.rolls.length;e++)this.damageRows[e].normal=this.damage.rolls[e];for(let e=0;e<this.critDamage.rolls.length;e++)this.damageRows[e].crit=this.critDamage.rolls[e];return this}}class AttackDamage{flavor="";total=0;rolls=[];get isActive(){return this.rolls.length>0}get half(){return Math.floor(this.total/2)}}const r=Object.freeze({NO_ACTOR_PERM:1,DISABLED:2,INSUFFICIENT_QUANTITY:3,INSUFFICIENT_CHARGES:4,MISSING_AMMO:5,INSUFFICIENT_AMMO:6});class ActionUse{actor;token;item;action;shared;constructor(e={}){Object.defineProperties(this,{shared:{value:e},item:{value:e.item},action:{value:e.action},actor:{value:e.item.actor},token:{value:e.token}}),this.shared.templateData={action:this.shared.action,item:this.shared.item}}checkRequirements(){const e=this.item.actor;if(e&&!e.isOwner)return ui.notifications.warn(game.i18n.format("PF1.Error.NoActorPermissionAlt",{name:e.name})),r.NO_ACTOR_PERM;if("feat"===this.item.type&&this.item.system.disabled)return ui.notifications.warn(game.i18n.localize("PF1.Error.FeatDisabled")),r.DISABLED;if(null!==this.shared.cost&&this.shared.cost<=0)return 0;if(this.item.isPhysical){if((this.item.system.quantity||0)<=0)return ui.notifications.warn(game.i18n.localize("PF1.Error.NoQuantity")),r.INSUFFICIENT_QUANTITY}return this.action.isSelfCharged&&this.action.data.uses.self?.value<1?(ui.notifications.warn(game.i18n.format("PF1.Error.InsufficientCharges",{name:`${this.item.name}: ${this.action.name}`})),r.INSUFFICIENT_CHARGES):0}getRollData(){const e=foundry.utils.deepClone(this.shared.action.getRollData()),t=this.shared.dice;return e.d20=t===pf1.dice.D20RollPF.standardRoll?"":t,e.dcBonus||=0,e.chargeCost||=0,e.chargeCostBonus||=0,e}createAttackDialog(){return new pf1.applications.AttackDialog(this).show()}alterRollData(e={}){const t=this.shared.useOptions;e["power-attack"]??=t.powerAttack,e["primary-attack"]??=t.primaryAttack,e["cl-check"]??=t.clCheck,e["measure-template"]??=t.measureTemplate,e["haste-attack"]??=t.haste,e.manyshot??=t.manyshot,e["rapid-shot"]??=t.rapidShot,e["damage-ability-multiplier"]??=t.abilityMult,e.fullAttack??=!0,e.d20&&(this.shared.rollData.d20=e.d20);const s=e["attack-bonus"];s&&this.shared.attackBonus.push(s);const a=e["damage-bonus"];a&&this.shared.damageBonus.push(a),e.rollMode&&(this.shared.rollMode=e.rollMode),e["point-blank-shot"]&&(this.shared.attackBonus.push(`1[${game.i18n.localize("PF1.PointBlankShot")}]`),this.shared.damageBonus.push(`1[${game.i18n.localize("PF1.PointBlankShot")}]`),this.shared.pointBlankShot=!0),this.shared.fullAttack=e.fullAttack,this.shared.fullAttack&&e.manyshot&&(this.shared.manyShot=!0),this.shared.fullAttack&&e["rapid-shot"]&&this.shared.attackBonus.push(`-2[${game.i18n.localize("PF1.RapidShot")}]`),null!=e["primary-attack"]&&foundry.utils.setProperty(this.shared.rollData,"action.naturalAttack.primaryAttack",e["primary-attack"]),null!=e["measure-template"]&&(this.shared.useMeasureTemplate=e["measure-template"]);const i=e.held||this.shared.rollData.action.held||this.shared.rollData.item.held||"normal";this.shared.rollData.action.held=i;const n=e["damage-ability-multiplier"];if(null!=n&&(this.shared.rollData.action.ability.damageMult=n),e["power-attack"]){const e=this.shared.rollData.action?.powerAttack?.damageBonus??2;let t=(1+Math.floor(this.shared.rollData.attributes.bab.total/4))*e;const s=this.shared.action.getPowerAttackMult({rollData:this.shared.rollData});t=Math.floor(t*s);const a=["rwak","twak","rsak"].includes(this.action.data.actionType)?game.i18n.localize("PF1.DeadlyAim"):game.i18n.localize("PF1.PowerAttack"),i=-(1+Math.floor(foundry.utils.getProperty(this.shared.rollData,"attributes.bab.total")/4));this.shared.rollData.powerAttackPenalty=i,this.shared.attackBonus.push(`${i}[${a}]`),this.shared.powerAttack=!0,this.shared.rollData.powerAttackBonus=t,this.shared.rollData.powerAttackPenalty=i}else this.shared.rollData.powerAttackBonus=0,this.shared.rollData.powerAttackPenalty=0;if(Object.keys(e).forEach((t=>{const s=t.match(/conditional\.(\d+)/)?.[1];s&&e[t]&&(this.shared.conditionals?this.shared.conditionals.push(parseInt(s)):this.shared.conditionals=[parseInt(s)])})),"natural"===this.shared.rollData.item.subType&&!1===this.shared.rollData.action?.naturalAttack.primaryAttack){const e=this.shared.rollData.action.naturalAttack?.secondary?.attackBonus||"-5";let t=this.shared.rollData.action.naturalAttack?.secondary?.damageMult??.5;n&&(t=n),this.shared.attackBonus.push(`(${e})[${game.i18n.localize("PF1.SecondaryAttack")}]`),this.shared.rollData.action.ability.damageMult=t}this.shared.casterLevelCheck=e["cl-check"],this.shared.concentrationCheck=e.concentration,!this.shared.conditionals&&foundry.utils.isEmpty(e)&&(this.shared.conditionals=this.shared.action.data.conditionals?.reduce(((e,t,s)=>(t.default&&e.push(s),e)),[]))}generateAttacks(e=!1){const t=this.shared.rollData,s=this.action;this.actor,this.shared.useOptions;const a=e||this.shared.fullAttack,i=this.action.getAttacks({full:a,rollData:t,conditionals:!1,bonuses:!1}).map((e=>new ActionUseAttack(e.label,e.bonus)));if(this.action.ammoType){const e=this.item.getFlag("pf1","defaultAmmo"),t=this.getAmmo();if(e&&t.length){const a=t.find((t=>t.id===e)),n=a?.quantity||0,o=s.ammoCost,r=a?.abundant||!1;for(let e=0;e<i.length;e++){const t=i[e];t.ammo=r||n>=(e+1)*o?a:null}}}return this.shared.attacks=i,i}async autoSelectAmmo(){const e=this.shared.action.ammoType;if(!e)return;const t=this.action.ammoCost,s=this.item.getFlag("pf1","defaultAmmo"),a=this.item.actor?.items.get(s);if(a&&(a.system.quantity||0)>=t)return;const i=this.actor.itemTypes.loot.filter((s=>"ammo"===s.subType&&s.system.extraType===e&&s.system.quantity>=t&&!1!==s.system.identified)).sort(((e,t)=>e.system.price-t.system.price));0!=i.length&&await this.item.setFlag("pf1","defaultAmmo",i[0].id)}getAmmo(){const e=this.actor,t=this.action.ammoCost,s=e.itemTypes.loot.filter((e=>this._filterAmmo(e,t))),a=this.action.item.getFlag("pf1","defaultAmmo");return s.map((e=>({id:e.id,quantity:e.system.quantity||0,abundant:e.system.abundant||!1,data:e.toObject(),document:e,isDefault:a===e.id})))}_filterAmmo(e,t=1){if("loot"!==e.type||"ammo"!==e.subType)return!1;if(e.system.quantity<t)return!1;const s=e.system.extraType;return!s||this.action.ammoType===s}async subtractAmmo(e=1){if(!this.shared.action.ammoType)return;const t=this.item.actor,s={};for(const a of this.shared.attacks)if(a.ammo){const i=t.items.get(a.ammo.id);if(!i)continue;if(i.system.abundant)continue;s[a.ammo.id]??=0,s[a.ammo.id]+=e}if(this.shared.ammoUsage=s,!foundry.utils.isEmpty(s)){const e=Object.entries(s).reduce(((e,[t,s])=>{const a=this.item.actor.items.get(t)?.system.quantity,i={_id:t,"system.quantity":a-s};return e.push(i),e}),[]);return this.item.actor.updateEmbeddedDocuments("Item",e)}}updateAmmoUsage(){const e=this.actor,t=this.action.ammoCost;if(!(t<=0))for(const s of this.shared.attacks){const a=s.ammo?.id;if(!a)continue;const i=s.chatAttack,n=e.items.get(a)?.system.quantity||0;i.ammo.remaining=n,i.ammo.quantity=t}}handleConditionals(){if(this.shared.conditionals){const e={};for(const t of this.shared.conditionals){const s=this.shared.action.data.conditionals[t],a=pf1.utils.createTag(s.name);for(const[t,i]of s.modifiers.entries()){const n=RollPF.safeRollAsync(i.formula,this.shared.rollData);if(n.err){ui.notifications.warn(game.i18n.format("PF1.Warning.ConditionalRoll",{number:t+1,name:s.name}));continue}e[[a,t].join(".")]=RollPF.safeRollAsync(i.formula,this.shared.rollData).total;const o=`${i.target}.${i.subTarget}${i.critical?"."+i.critical:""}`;if(["attack","effect","misc"].includes(i.target)){const e=/\[.*\]/.test(i.formula)?i.formula:`(${i.formula})[${s.name}]`;this.shared.conditionalPartsCommon[o]=[...this.shared.conditionalPartsCommon[o]??[],e]}else"damage"===i.target?this.shared.conditionalPartsCommon[o]=[...this.shared.conditionalPartsCommon[o]??[],[i.formula,i.damageType,!1]]:"size"===i.target?this.shared.rollData.size+=n.total:"critMult"===i.target&&(this.shared.rollData.critMultBonus+=n.total)}}this.shared.rollData.conditionals=foundry.utils.expandObject(e,5);for(const e of["effect.cl","effect.dc","misc.charges"])if(null!=this.shared.conditionalPartsCommon[e]){const t=this.shared.conditionalPartsCommon[e].join("+"),s=RollPF.safeRollAsync(t,this.shared.rollData,[e,t]).total;switch(e){case"effect.cl":this.shared.rollData.cl+=s;break;case"effect.dc":this.shared.rollData.dcBonus+=s;break;case"misc.charges":this.shared.rollData.chargeCostBonus+=s}}}}checkAttackRequirements(){let e=this.shared.rollData.chargeCost;if(e>0){const t=this.item.charges;if("spell"===this.item.type&&this.item.spellbook?.spontaneous&&!this.item.system.preparation?.value&&(e=1/0),"spell"===this.item?.type){if(this.item.maxCharges<=0)return ui.notifications.warn(game.i18n.format("PF1.Error.InsufficientPreparation",{name:this.item.name})),r.INSUFFICIENT_CHARGES}if(e>t)return ui.notifications.warn(game.i18n.format("PF1.Error.InsufficientCharges",{name:this.item.name})),r.INSUFFICIENT_CHARGES}return 0}async generateChatAttacks(){this.shared.action.hasAttack?await this.addAttacks():this.shared.action.hasDamage?await this.addDamage():await this.addEmptyAttack();const e=this.action.misfire??0;this.shared.attacks.forEach((t=>{if(!t.hasAmmo)return;const s=t.chatAttack;if(s&&s.setAmmo(t.ammo.id),s.ammo){const t=s.attack?.d20?.total;s.ammo.misfire=t<=e}})),this.shared.save=this.shared.action.data.save.type,this.shared.saveDC=this.shared.action.getDC(this.shared.rollData),await this.addEffectNotes(),await this.addFootnotes()}_getConditionalParts(e,{index:t=0}){const s={},a={"attack.normal":"attack.;id;.normal","attack.crit":"attack.;id;.crit","damage.normal":"damage.;id;.normal","damage.crit":"damage.;id;.crit","damage.nonCrit":"damage.;id;.nonCrit"},addPart=e=>{for(const[t,i]of Object.entries(a)){s[t]||(s[t]=[]);const a=i.replace(";id;",e);s[t].push(...this.shared.conditionalPartsCommon[a]??[])}};return addPart("attack_"+t),addPart("allAttack"),addPart("allDamage"),"rapid-shot"===e.type?(addPart("rapidShotAttack"),addPart("rapidShotDamage")):"haste-attack"===e.type&&(addPart("hasteAttack"),addPart("hasteDamage")),s}async addAttacks(){const e=this.shared.rollData;for(let t=0;t<this.shared.attacks.length;t++){const s=this.shared.attacks[t],a=this._getConditionalParts(s,{index:t});e.attackCount=t;const i=new ChatAttack(this.shared.action,{label:s.label,rollData:e,targets:game.user.targets,actionUse:this});if("manyshot"!==s.type&&await i.addAttack({extraParts:[...this.shared.attackBonus,s.attackBonus],conditionalParts:a}),this.shared.action.hasDamage){const t=foundry.utils.deepClone(this.shared.damageBonus),n=[],o=[];if(e.powerAttackBonus>0){const t=["rwak","twak","rsak"].includes(this.shared.action.data.actionType)?game.i18n.localize("PF1.DeadlyAim"):game.i18n.localize("PF1.PowerAttack"),s=e.powerAttackBonus,a=s*(e.action?.powerAttack?.critMultiplier??1);n.push(`${s}[${t}]`),o.push(`${a}[${t}]`)}let r=null;"manyshot"===s.type&&(r=game.i18n.localize("PF1.Manyshot")),await i.addDamage({flavor:r,extraParts:[...t,...n],critical:!1,conditionalParts:a}),i.hasCritConfirm&&await i.addDamage({extraParts:[...t,...o],critical:!0,conditionalParts:a})}this.shared.chatAttacks.push(i),s.chatAttack=i}delete e.attackCount}async addDamage(){this.shared.conditionalParts={"damage.normal":this.shared.conditionalPartsCommon["damage.allDamage.normal"]??[]};const e=new ChatAttack(this.shared.action,{rollData:this.shared.rollData,primaryAttack:this.shared.primaryAttack,actionUse:this});await e.addDamage({extraParts:foundry.utils.deepClone(this.shared.damageBonus),critical:!1,conditionalParts:this.shared.conditionalParts}),this.shared.chatAttacks.push(e)}async addFootnotes(){if(!this.item)return;const e=this.action.data.actionType,t={rsak:["ranged","rangedSpell"],rwak:["ranged","rangedWeapon"],twak:["ranged","thrownWeapon","rangedWeapon"],rcman:["ranged"],mwak:["melee","meleeWeapon"],msak:["melee","meleeSpell"],mcman:["melee"]},s=this.action.hasAttack??!1,a=[];if(this.actor&&s&&(a.push(...this.actor.getContextNotesParsed("attacks.attack")),t[e]?.forEach((e=>a.push(...this.actor.getContextNotesParsed("attacks."+e))))),this.item?.system.attackNotes&&a.push(...this.item.system.attackNotes),this.action.data.attackNotes&&a.push(...this.action.data.attackNotes),this.action.isCombatManeuver&&a.push(...this.item?.actor?.getContextNotesParsed("misc.cmb")??[]),s){this.shared.attacks.some((e=>!!e.chatAttack?.hasCritConfirm))&&a.push(...this.action.actor?.getContextNotesParsed("attacks.critical")??[])}this.shared.templateData.footnotes=a}async addEmptyAttack(){const e=new ChatAttack(this.shared.action,{rollData:this.shared.rollData,primaryAttack:this.shared.primaryAttack,actionUse:this});this.shared.chatAttacks.push(e)}async addEffectNotes(){const e=this.shared.chatAttacks;await Promise.all(e.filter((e=>"manyshot"!==e.type)).map((e=>e.addEffectNotes())))}async promptMeasureTemplate(){const e=this.shared.action.data.measureTemplate;let t=RollPF.safeRollSync(e.size,this.shared.rollData).total;t=pf1.utils.convertDistance(t)[0];const s={type:e.type,distance:t,flags:{pf1:{origin:{uuid:this.shared.item.uuid,action:this.shared.action.id}}}};if(e.color){const t=Color.fromString(e.color);Number.isFinite(Number(t))&&(s.color=t.toString())}e.texture&&(s.texture=e.texture),this.shared.template=null;const a=pf1.canvas.AbilityTemplate.fromData(s);let i;if(a){const e=this.item.actor?.sheet,t=null!=e?._element;if(t&&e.minimize(),i=await a.drawPreview(this.shared.event),!i.result)return t&&e.maximize(),i}return this.shared.template=await i.place(),i}async handleDiceSoNice(){if(game.settings.get("pf1","integration").diceSoNice&&game.dice3d?.isEnabled())try{const e={};ChatMessage.implementation.applyRollMode(e,this.shared.rollMode);const t=game.settings.get("dice-so-nice","enabledSimultaneousRolls"),s=game.settings.get("dice-so-nice","immediatelyDisplayChatMessages"),showRoll=async s=>{const a=e.whisper?.length?e.whisper:void 0;if(t)return Promise.all(s.map((t=>game.dice3d.showForRoll(t,game.user,!0,a,e.blind))));for(const t of s)await game.dice3d.showForRoll(t,game.user,!0,a,e.blind)},a=[];for(const e of this.shared.chatAttacks){const t=new PoolTerm;e.attack&&t.rolls.push(e.attack),t.rolls.push(...e.damage?.rolls??[]);const s=new PoolTerm;e.chatAttack?.hasCritConfirm&&s.rolls.push(e.chatAttack.critConfirm),s.rolls.push(...e.critDamage?.rolls??[]),t.rolls.length&&a.push(t),s.rolls.length&&a.push(s)}a.length&&(s?showRoll(a):await showRoll(a))}catch(e){console.error(e)}}async getMessageData(){if(0===this.shared.chatAttacks.length)return;this.shared.templateData={...this.shared.templateData,name:this.item.name,type:CONST.CHAT_MESSAGE_TYPES.OTHER,rollMode:this.shared.rollMode,attacks:this.shared.chatAttacks.map((e=>e.finalize()))};const e=this.item.actor,t=this.token??e?.token;this.shared.chatData={speaker:ChatMessage.implementation.getSpeaker({actor:e,token:t,alias:t?.name}),rollMode:this.shared.rollMode},this.shared.action.data.soundEffect?this.shared.chatData.sound=this.shared.action.data.soundEffect:game.settings.get("pf1","integration").diceSoNice&&game.dice3d?.isEnabled()||(this.shared.chatData.sound=CONFIG.sounds.dice);const s=[],a=await this.enrichNotes(this.shared.templateData.footnotes,"PF1.Footnotes","footnotes"),i=await this.item.getChatData({actionId:this.shared.action.id,chatcard:!0,rollData:this.shared.rollData}),n=[...i.properties,...this.addGenericPropertyLabels()];if(n.length>0&&s.push({header:game.i18n.localize("PF1.InfoShort"),value:n}),game.combat){const e=this.addCombatPropertyLabels();e.length>0&&s.push({header:game.i18n.localize("PF1.CombatInfo_Header"),value:e,css:"combat-properties"})}if("spell"===this.item.type&&e){const t=e.getContextNotesParsed("spell.cl."+this.item.system.spellbook);t.length&&s.push({header:game.i18n.localize("PF1.CLNotes"),value:t})}const o=!!(this.shared.rollData.item?.identified??!0),r=o?`${this.item.name} (${this.shared.action.name})`:this.item.getName(!0);this.shared.templateData={...this.shared.templateData,tokenUuid:t?.uuid,actionId:this.shared.action?.id,extraText:a,identified:o,name:r,description:o?i.identifiedDescription:i.unidentifiedDescription,actionDescription:i.actionDescription,properties:s,item:this.item.toObject(),actor:e,token:t,scene:canvas.scene?.id,hasSave:this.shared.action.hasSave,rollData:this.shared.rollData,save:{dc:this.shared.saveDC,type:this.shared.save,label:game.i18n.format("PF1.SavingThrowButtonLabel",{type:pf1.config.savingThrows[this.shared.save],dc:this.shared.saveDC.toString()}),gmSensitiveLabel:game.i18n.format("PF1.SavingThrowButtonLabelGMSensitive",{save:pf1.config.savingThrows[this.shared.save]})}};{const e=this.shared.action.getRange({type:"max",rollData:this.shared.rollData});if(null!=e){this.shared.templateData.range=e;const t=pf1.utils.getDistanceSystem();this.shared.templateData.rangeLabel="metric"===t?e+" m":e+" ft.";const s=this.shared.action.data.range.units;["melee","touch","reach","close","medium","long"].includes(s)&&(this.shared.templateData.rangeLabel=pf1.config.distanceUnits[s])}}if("spell"===this.item.type&&e){if(e.spellFailure>0&&this.item.system.components.somatic){const t=foundry.utils.getProperty(e.system,"attributes.spells.spellbooks."+this.item.system.spellbook);if(t&&t.arcaneSpellFailure){const t=RollPF.safeRollAsync("1d100");this.shared.templateData.spellFailure=t.total,this.shared.templateData.spellFailureRoll=t,this.shared.templateData.spellFailureSuccess=this.shared.templateData.spellFailure>e.spellFailure}}this.shared.templateData.casterLevelCheck=this.shared.casterLevelCheck,this.shared.templateData.concentrationCheck=this.shared.concentrationCheck}const l=this.generateChatMetadata();game.settings.get("pf1","disableAttackCardTargets")||(this.shared.templateData.targets=this.shared.targets.map((e=>({img:e.document.texture.src,actor:e.actor,token:e.document,uuid:e.document.uuid})))),this.shared.chatData["flags.pf1.metadata"]=l,this.shared.chatData["flags.core.canPopout"]=!0,o||(this.shared.chatData["flags.pf1.identifiedInfo"]={identified:o,name:this.item._source.name||this.item.name,description:i.identifiedDescription,actionName:this.shared.action.name,actionDescription:i.actionDescription})}async enrichNotes(e,t,s){if(0===e.length)return;const a={rollData:this.shared.rollData,async:!0,relativeTo:this.actor},i={notes:e,css:s,title:t},n=await renderTemplate("systems/pf1/templates/chat/parts/item-notes.hbs",i);return TextEditor.enrichHTML(n,a)}addGenericPropertyLabels(){const e=[],t=this.shared.totalChargeCost;t&&!this.item.system.atWill&&("spell"===this.item.type&&this.item.useSpellPoints()?e.push(`${game.i18n.localize("PF1.SpellPointsCost")}: ${t}`):e.push(`${game.i18n.localize("PF1.ChargeCost")}: ${t}`));const s=Object.entries(this.actor.system.conditions??{}).filter((([e,t])=>t)).map((([e])=>pf1.registry.conditions.get(e))).filter((e=>e?.showInAction)).map((e=>e.name));this.actor.system.conditions?.deaf&&"spell"===this.item.type&&s.push(pf1.registry.conditions.get("deaf").name),s.length&&e.push(...s),this.shared.rollData.item.broken&&e.push(game.i18n.localize("PF1.Broken")),this.action.data.nonlethal&&e.push(game.i18n.localize("PF1.Nonlethal")),this.action.data.splash&&e.push(game.i18n.localize("PF1.Splash")),this.action.data.touch&&e.push(game.i18n.localize("PF1.TouchAttackShort"));let a=null,i=null;const n=this.action.data.material?.normal.value,o=this.item.system.material?.normal.value,r=this.item.system.material?.base?.value,l=this.action.data.material?.addon,c=this.item.system.material?.addon;if(a=n&&n.length>0?n:o&&o.length>0?o:r,a&&e.push(pf1.registry.materialTypes.get(a.toLowerCase())?.name??a.capitalize()),l&&l.length>0?i=l:c&&c.length>0&&(i=c),i){const t=i.map((e=>{if(!e)return null;return pf1.registry.materialTypes.get(e.toLowerCase())?.name??e.capitalize()})).filter((e=>!!e));t.length>0&&e.push(...t)}const u=this.action.data.alignments,p=this.item.system.alignments??{};if(u)for(const t of Object.keys(u))(u[t]||null===u[t]&&p[t])&&e.push(game.i18n.localize("PF1.Alignments."+t[0]));else for(const t of Object.keys(p))p[t]&&e.push(game.i18n.localize("PF1.Alignments."+t[0]));if(this.shared.powerAttack)switch(this.action.data.actionType){case"rwak":case"twak":e.push(game.i18n.localize("PF1.DeadlyAim"));break;case"mwak":e.push(game.i18n.localize("PF1.PowerAttack"))}return this.shared.pointBlankShot&&e.push(game.i18n.localize("PF1.PointBlankShot")),this.shared.attacks.find((e=>"rapid-shot"===e.id))&&e.push(game.i18n.localize("PF1.RapidShot")),this.shared.manyShot&&e.push(game.i18n.localize("PF1.Manyshot")),this.item.hasAttack&&this.shared.rollData.attributes?.acp?.attackPenalty>0&&e.push(game.i18n.localize("PF1.ArmorCheckPenalty")),this.shared.conditionals?.length&&this.shared.conditionals.forEach((t=>{e.push(this.shared.action.data.conditionals[t].name)})),this.shared.rollData.attributes?.woundThresholds?.level>0&&e.push(pf1.config.woundThresholdConditions[this.shared.rollData.attributes.woundThresholds.level]),e}addCombatPropertyLabels(){const e=[];return e.push(game.i18n.format("PF1.CombatInfo_Round",{round:game.combat.round})),e}generateChatMetadata(){const e={actor:this.actor.uuid,item:this.item.id,action:this.action.id,combat:void 0,template:this.shared.template?.id??null,rolls:{attacks:[]},targets:this.shared.targets.map((e=>e.document.uuid)),config:{critMult:this.shared.rollData.critMult}};this.actor&&game.combat?.combatants.some((e=>e.actor===this.actor))&&(e.combat=game.combat.id);for(let t=0;t<this.shared.chatAttacks.length;t++){const s=this.shared.chatAttacks[t],a={attack:null,damage:[],critConfirm:null,critDamage:[]};if(s.attack&&(a.attack=s.attack.toJSON()),s.damage.rolls.length)for(let e=0;e<s.damage.rolls.length;e++){const t=s.damage.rolls[e];a.damage[e]=t.toJSON()}if(s.critConfirm&&(a.critConfirm=s.critConfirm.toJSON()),s.critDamage.rolls.length)for(let e=0;e<s.critDamage.rolls.length;e++){const t=s.critDamage.rolls[e];a.critDamage[e]=t.toJSON()}s.ammo?.id&&(a.ammo={id:s.ammo.id,quantity:1,misfire:s.ammo.misfire??!1}),e.rolls.attacks[t]=a}return this.shared.saveDC&&(e.save={dc:this.shared.saveDC,type:this.shared.save}),"spell"===this.item.type&&(e.spell={cl:this.shared.rollData.cl,sl:this.shared.rollData.sl}),e}async executeScriptCalls(e="use"){const t=this.shared;"attackData"in t||Object.defineProperty(t,"attackData",{get:()=>(foundry.utils.logCompatibilityWarning("shared.attackData is deprecated in favor of directly accessing shared",{since:"PF1 v10",until:"PF1 v12"}),t)});const s=await this.item.executeScriptCalls(e,{},t);"use"===e&&(this.shared.scriptData=s)}async postMessage(){if(this.shared.event,this.shared.skipDialog,this.shared.chatData,this.shared.templateData,this.shared,this.shared.chatTemplate||="systems/pf1/templates/chat/attack-roll.hbs",this.shared.templateData.damageTypes=pf1.registry.damageTypes.toObject(),!1===Hooks.call("pf1PreDisplayActionUse",this))return;let e;if(this.shared.chatMessage&&!0!==this.shared.scriptData.hideChat){const t={rollData:this.shared.rollData,secrets:this.isOwner,async:!0,relativeTo:this.actor},s=await renderTemplate(this.shared.chatTemplate,this.shared.templateData);this.shared.chatData.content=await TextEditor.enrichHTML(s,t);const a=this.shared.chatData["flags.pf1.identifiedInfo"];a?.description&&(a.description=await TextEditor.enrichHTML(a.description,t)),a?.actionDescription&&(a.actionDescription=await TextEditor.enrichHTML(a.actionDescription,t)),this.shared.chatData.rollMode??=game.settings.get("core","rollMode"),ChatMessage.implementation.applyRollMode(this.shared.chatData,this.shared.chatData.rollMode),e=await ChatMessage.implementation.create(this.shared.chatData),this.shared.message=e}else e=this.shared;return e}async getTargets(){const e=this.shared.template?.object;let t=e?await e.getTokensWithin():null;t??=Array.from(game.user.targets),this.shared.targets=t.filter((e=>e.document.disposition!==CONST.TOKEN_DISPOSITIONS.SECRET&&!0!==e.combatant?.isDefeated))}getDefenseDC(e){const t=this._getDefenseDCParts(e);return RollPF.safeRollSync(t.join(" + "))}_getDefenseDCParts(e){const t=[],s=e.d20.total;t.push(`${s}[${game.i18n.localize("PF1.Rolls.Check.Label")}]`);const a=game.i18n.localize("PF1.BAB"),i=e.terms.find((e=>e.flavor===a))?.number??0;return t.push(`${Math.floor(i/2)}[${game.i18n.localize("PF1.HalfBAB")}]`),t}prepareChargeCost(){const e=this.shared.rollData;let t=this.shared.action.getChargeCost({rollData:e})+(this.shared.rollData.chargeCostBonus??0);null!==this.shared.cost&&(t=this.shared.cost),this.shared.rollData.chargeCost=t}async process({skipDialog:e=!1}={}){const t=this.shared;let s,a,i=await this.checkRequirements();if(i>0)return{err:pf1.actionUse.ERR_REQUIREMENT,code:i};if(await this.autoSelectAmmo(),t.rollData=this.getRollData(),Hooks.callAll("pf1CreateActionUse",this),t.fullAttack=!0,await this.generateAttacks(!0),!e&&(s=await this.createAttackDialog(),!s))return;if(this.formData=s??{},await this.alterRollData(s),t.action.ammoType&&(t.attacks=t.attacks.filter((e=>e.hasAmmo)),0===t.attacks.length))return void ui.notifications.error(game.i18n.localize("PF1.AmmoDepleted"));if(t.fullAttack||(t.attacks=t.attacks.slice(0,1)),await this.handleConditionals(),this.prepareChargeCost(),0!=t.rollData.chargeCost&&this.shared.action.data.uses?.perAttack){const e=t.rollData.chargeCost,s=t.item.charges;if(t.attacks.forEach(((t,a)=>{t.chargeCost=s>=(a+1)*e?e:null})),t.attacks=t.attacks.filter((e=>null!==e.chargeCost)),0===t.attacks.length)return void ui.notifications.error(game.i18n.localize("PF1.ChargesDepleted"))}if(i=await this.checkAttackRequirements(),i>0)return{err:pf1.actionUse.ERR_REQUIREMENT,code:i};if(await this.generateChatAttacks(),t.useMeasureTemplate&&canvas.scene&&(a=await this.promptMeasureTemplate(),!a.result))return;if(!1===Hooks.call("pf1PreActionUse",this))return void await(a?.delete());if(await this.getTargets(),await this.executeScriptCalls(),t.scriptData?.reject)return void await(a?.delete());const n=[];n.push(this.handleDiceSoNice());const o=this.action.ammoCost;0!=o&&n.push(this.subtractAmmo(o));let r=t.rollData?.chargeCost;this.action.data.uses.perAttack&&(r=this.shared.attacks.reduce(((e,t)=>e+t.chargeCost),0)),0!=r&&(t.totalChargeCost=r,n.push(this.item.addCharges(-r))),t.action.isSelfCharged&&n.push(t.action.update({"uses.self.value":t.action.data.uses.self.value-1})),await Promise.all(n),this.updateAmmoUsage(),await this.getMessageData();let l=Promise.resolve();return!0!==t.scriptData?.hideChat&&(l=this.postMessage()),game.settings.get("pf1","clearTargetsAfterAttack")&&game.user.targets.size&&(game.user.updateTokenTargets([]),game.user.broadcastActivity({targets:[]})),await l,await this.executeScriptCalls("postUse"),Hooks.callAll("pf1PostActionUse",this,l instanceof pf1.documents.ChatMessagePF?l:null),l}}class ActionUseAttack{type;label;attackBonus;abstract;ammo=null;chargeCost=null;chatAttack=null;get hasAmmo(){return!!this.ammo}constructor(e,t="",s=null,{abstract:a=!1,type:i=null}={}){this.label=e,this.attackBonus=t,this.ammo=s,this.abstract=a??!1,this.type=i}}class ItemPF extends ItemBasePF{constructor(...e){super(...e),this.links??={},Array.isArray(this.system.actions)&&(this.actions??=new Collection)}static system=Object.freeze({isPhysical:!1,hasIdentifier:!0,hasChanges:!0});static getDefaultArtwork(e){const t=super.getDefaultArtwork(e),s=pf1.config.defaultIcons.items[e?.type];return s&&(t.img=s),t}async _preCreate(e,t,s){await super._preCreate(e,t,s);if(this.actor&&e?.system?.changes?.length>0){const t=e.system.changes;let s=new Set;for(;s.size<t.length;)s.add(foundry.utils.randomID(8));s=Array.from(s);for(const e of t)e._id=s.pop();this.updateSource({"system.changes":t})}const a=this.preCreateData(e,t,s);Object.keys(a).length&&this.updateSource(a)}preCreateData(e,t,s){return{}}_onCreate(e,t,s){super._onCreate(e,t,s),this.actor,s===game.user.id&&this.isActive&&["buff","feat"].includes(this.type)&&this.executeScriptCalls("toggle",{state:!0})}async _preUpdate(e,t,s){if(await super._preUpdate(e,t,s),!e.system)return;this._preUpdateNumericValueGuard(e.system);const a=["system.attackNotes","system.effectNotes","system.contextNotes","system.scriptCalls","system.actions","system.changes"],i=this.toObject();for(const t of a)keepUpdateArray(i,e,t);await this._chargePreUpdate(e,t)}_preUpdateNumericValueGuard(e){}async _chargePreUpdate(e,t){const s=e.system.uses;if(s?.value&&this.isCharged){const a=this.maxCharges;s.value>a&&(s.value=a);const i=this.links.charges;i&&(await i.update({"system.uses.value":s.value},t),delete e.system.uses.value)}}_onDelete(e,t){super._onDelete(e,t);if(!this.actor)return;const s=this.getLinkedItemsSync("charges");if(s.length)for(const e of s)e.links?.charges&&(delete e.links.charges,e.reset())}get memoryVariables(){return["quantity","level"]}static get isPhysical(){return this.system.isPhysical}get isPhysical(){return this.constructor.isPhysical}static get hasChanges(){return this.system.hasChanges}get hasChanges(){return this.constructor.hasChanges}get subType(){return this.system.subType??null}get normalMaterial(){return"equipment"===this.type?this.system.armor?.material?.normal.value||null:this.system.material?.normal.value||null}get addonMaterial(){return"equipment"===this.type?this.system.armor?.material?.addon?.filter((e=>e??!1))??[]:this.system.material?.addon?.filter((e=>e??!1))??[]}get alignments(){return this.system.alignments??null}get firstAction(){return foundry.utils.logCompatibilityWarning("ItemPF.firstAction is deprecated in favor of ItemPF.defaultAction",{since:"PF1 v10",until:"PF1 v12"}),this.defaultAction}get defaultAction(){return this.actions?.get(this.system.actions?.[0]?._id)}get hasAttack(){return this.actions?.some((e=>e.hasAttack))??!1}get hasDamage(){return this.actions?.some((e=>e.hasDamage))??!1}getProficiency(e=!0){throw Error(`Item type ${this.type} has no concept of proficiency`)}get isProficient(){return!0}get isOwned(){return super.isOwned||null!=this.parentItem}get hasAction(){return this.system.actions?.length>0}get isSingleUse(){return"single"===this.system.uses?.per}get isCharged(){return this.isSingleUse||["round","day","week","charges"].includes(this.system.uses?.per)}get hasFiniteCharges(){return this.isSingleUse||["charges"].includes(this.system.uses?.per)}get charges(){if(!this.actor)return 0;const e=this.links?.charges;return e?e.charges:this.system.uses?.per?this.isSingleUse?this.system.quantity||0:this.system.uses?.value??0:1/0}get autoDeductCharges(){return 0!=this.getDefaultChargeCost()}getDefaultChargeCost({rollData:e}={}){e??=this.getRollData();const t=this.getDefaultChargeFormula();return RollPF.safeRollAsync(t,e).total}getDefaultChargeFormula(){return this.system.uses?.autoDeductChargesCost||"1"}get maxCharges(){const e=this.links?.charges;return e?e.maxCharges:this.system.uses?.per?this.isSingleUse?this.system.quantity||0:this.system.uses?.max??0:1/0}async recharge({value:e,period:t="day",exact:s=!1,maximize:a=!1,commit:i=!0,rollData:n,context:o}={}){const r=this.system.uses??{};if(!r.per)return;if(this.links.charges)return;if(["charges","single"].includes(r.per)){if("any"!==t)return}else if(pf1.config.limitedUsePeriodOrder.includes(t)&&!s){const e=pf1.config.limitedUsePeriodOrder.indexOf(t);if(!pf1.config.limitedUsePeriodOrder.slice(0,e+1).includes(r.per))return}else if(r.per!==t&&"any"!==t)return;if(!(void 0!==e)){const t=r.rechargeFormula||"";if(t){n??=this.getRollData();if(e=(await RollPF.safeRollAsync(t,n,"recharge")).total,!Number.isFinite(e))return void console.warn(`Formula "${t}" produced non-numeric value "${e}"`)}else a=!0}if(a&&(e=r.max),(e=Math.clamped(e,0,r.max))===r.value)return;const l={system:{uses:{value:e}}};return i?this.update(l,o):l}get auraStrength(){const e=this.system.cl||0;return e<1?0:e<6?1:e<12?2:e<21?3:4}get parentActor(){return foundry.utils.logCompatibilityWarning("ItemPF.parentActor is deprecated in favor of Item.actor",{since:"PF1 v9",until:"PF1 v11"}),this.actor}get limited(){return this.parentItem?this.parentItem.limited:super.limited}get uuid(){return this.parentItem&&(this.parentItem.uuid,this.id),super.uuid}testUserPermission(e,t,{exact:s=!1}={}){return this.isEmbedded?this.parent.testUserPermission(e,t,{exact:s}):this.parentItem?this.parentItem.testUserPermission(e,t,{exact:s}):super.testUserPermission(e,t,{exact:s})}get permission(){return this.actor?this.actor.permission:super.permission}get fullDescription(){return this.system.description.value}getDescription({chatcard:e=!1,data:t={},rollData:s,header:a=!0,body:i=!0}={}){return i?this.system.description.value:""}get effect(){return this.actor.effects.find((e=>!!e.origin&&/\.Item\.(?<itemId>[^.]+)/.exec(e.origin)?.groups.itemId===this.id))}get actionTypes(){const e=this.actions?.map((e=>e.data.actionType)).filter(Boolean)??[];return[...new Set(e)]}static get defaultContextNote(){return foundry.utils.logCompatibilityWarning("ItemPF#defaultContextNote is deprecated in favor of pf1.components.ContextNote",{since:"PF1 v10",until:"PF1 v11"}),(new pf1.components.ContextNote).toObject()}async addCharges(e){const t=this.links.charges;return t?t.addCharges(e):this.isSingleUse&&this.isPhysical?this.update({"system.quantity":(this.system.quantity||0)+e}):this.update({"system.uses.value":(this.system.uses?.value||0)+e})}get defaultAmmo(){const e=this.getFlag("pf1","defaultAmmo");return this.actor?.items.get(e)}get showUnidentifiedData(){return!1}prepareDerivedData(){super.prepareDerivedData(),this.prepareLinks(),this.system,this.hasChanges&&this._prepareChanges(),this._prepareScriptCalls();const e=this.system.weaponGroups;e&&(e.value??=[],e.custom??=[],e.total=new Set([...e.value.map((e=>pf1.config.weaponGroups[e]||e)),...e.custom])),this.actor&&!1===this.actor._initialized||this._prepareDependentData(!0)}_prepareDependentData(e=!1){this._updateMaxUses(),e&&this._prepareActions()}prepareBaseData(){super.prepareBaseData(),this._prepareIdentifier(),this.inContainer&&this.adjustContained(),this.system.contextNotes?.length&&(this.system.contextNotes=this.system.contextNotes.map((e=>new pf1.components.ContextNote(e,{parent:this}))))}_prepareIdentifier(){(this.constructor.system?.hasIdentifier??!1)&&(this.system.tag||(this.system.tag=pf1.utils.createTag(this.name)))}adjustContained(){}getLabels({actionId:e,rollData:t}={}){const s=e?this.actions.get(e):this.defaultAction;return{activation:pf1.config.abilityActivationTypes.passive,...s?.getLabels({rollData:t})??{}}}prepareLinks(){if(this.links)for(const[e,t]of Object.entries(this.links))if("charges"===e){if(!t.getLinkedItemsSync("charges").some((e=>e.id===this.id))){delete this.links.charges;continue}this._updateInheritedCharges(t)}}_prepareChanges(){const e=this.changes,t=new Collection;for(const s of this.system.changes??[]){let a=null;if(e&&e.has(s._id)){a=e.get(s._id);const t={...s};a.updateSource(t,{recursive:!1}),a.prepareData()}else a=new pf1.components.ItemChange(s,{parent:this});t.set(s._id||a.data._id,a)}this.changes=t}_prepareActions(){const e=this.system.actions??[],t=this.actions,s=new Collection;for(const a of e){let e=null;t&&t.has(a._id)?(e=t.get(a._id),e.data=foundry.utils.mergeObject(ItemAction.defaultData,a),e.prepareData()):e=new pf1.components.ItemAction(a,this),s.set(a._id||e.data._id,e)}this.actions=s;for(const e of t??[])this.actions.get(e.id)!==e&&Object.values(e.apps).forEach((e=>e.close({pf1:{action:"delete"},submit:!1,force:!0})))}_prepareScriptCalls(){const e=this.system.scriptCalls;if(!e)return;const t=this.scriptCalls,s=new Collection;for(const a of e){const e=a._id;let i=t?.get(e);i?i.data=a:i=new pf1.components.ItemScriptCall(a,this),s.set(e,i)}this.scriptCalls=s}async executeScriptCalls(e,t={},s={}){const a=this.scriptCalls?.filter((t=>t.category===e))??[];s.category=e;try{for(const e of a)await e.execute(s,t)}catch(e){throw console.error("Script call execution failed\n",e,this),Error("Error occurred while executing a script call",{cause:e})}return s}async update(e,t={}){if(!1===t.recursive){if(!this.inContainer)return super.update(e,t);this.rootItem.update(this._transformContainerUpdateData(e,{recursive:!0}),t)}e=foundry.utils.expandObject(e),this.memorizeVariables();const s=this.parentItem;return s?(t.pf1??={},t.pf1.containerItem=this.id,await s.update(this._transformContainerUpdateData(e),t),this):super.update(e,t)}_transformContainerUpdateData(e,{recursive:t=!1}={}){const s=this.parentItem;if(s){const a={system:{items:{[this.id]:e}}};return t?s._transformContainerUpdateData(a,{recursive:t}):a}return e}memorizeVariables(){if(null!=this._memoryVariables)return;const e=this.memoryVariables;this._memoryVariables={};for(const t of e)foundry.utils.hasProperty(this.system,t)&&(this._memoryVariables[t]=foundry.utils.deepClone(foundry.utils.getProperty(this.system,t)));for(const e of this.items??[])e.memorizeVariables()}_onUpdate(e,t,s){if(super._onUpdate(e,t,s),s===game.user.id){{let t=null;if("buff"===this.type?t=e.system?.active:"feat"===this.type&&void 0!==e.system?.disabled&&(t=!0!==e.system.disabled),null!=t){const e=this.effect?.duration.startTime??game.time.worldTime;this.executeScriptCalls("toggle",{state:t,startTime:e})}}const t=this._memoryVariables?.level;if(void 0!==t&&void 0!==e.system?.level){const e={previous:parseInt(t),new:parseInt(this.system.level)};for(const[t,s]of Object.entries(e))Number.isNaN(s)&&(e[t]=null);void 0!==e.new&&e.new!==e.previous&&this.executeScriptCalls("changeLevel",{level:e})}}this._memoryVariables=null}_updateMaxUses(){const e=this.system.uses?.per;if(!e)return;if(this.links?.charges)return;const t=this.system.uses.maxFormula;if("single"===e)this.system.uses.max=1;else if(t)try{if(Roll.parse(t).every((e=>e.isDeterministic))){const e=this.getRollData(),s=RollPF.safeRollSync(t,e,{formula:t,item:this},{suppressError:!this.isOwner});this.system.uses.max=s.total;this.getLinkedItemsSync("charges").forEach((e=>e._updateInheritedCharges(this)))}else{const e=game.i18n.format("PF1.Warning.NoDiceAllowedInFormula",{formula:t,context:game.i18n.localize("PF1.ChargePlural")});ui.notifications.warn(e,{console:!1}),console.warn(e,this)}}catch(e){console.error("Invalid max uses formula:",{formula:t,item:this},e)}else this.system.uses.max=0}_updateInheritedCharges(e){const t=e.system.uses;if(!t)return;const s=this.system.uses;s.per=t.per,s.max=t.max,s.maxFormula=t.maxFormula,s.value=t.value,s.rechargeFormula=t.rechargeFormula}async getRawEffectData(){return{name:this.name,icon:this.img,origin:this.getRelativeUUID(this.actor),duration:{startTime:game.time.worldTime},disabled:!this.isActive}}getScriptCalls(e){return this.scriptCalls?.filter((t=>t.category===e))??[]}async displayCard(e={},{token:t}={}){const s=this.actor;if(s&&!s.isOwner)return void ui.notifications.warn(game.i18n.format("PF1.Error.NoActorPermissionAlt",{name:s.name}));t??=s?.token;const a=this.getRollData(),i=await this.getChatData({rollData:a}),n=!!(a.item?.identified??!0),o={actor:this.actor,token:t,tokenId:t?.uuid,item:this.toObject(),labels:this.getLabels({rollData:a}),hasAttack:this.hasAttack,hasMultiAttack:this.hasMultiAttack,hasAction:this.hasAction,isVersatile:this.isVersatile,isSpell:"spell"===this.type,name:this.getName(!0),description:n?i.identifiedDescription:i.unidentifiedDescription,rollData:a,hasExtraProperties:!1,extraProperties:[]},r={},l={rollData:a,secrets:this.isOwner,async:!0,relativeTo:this.actor};if(!1===n&&(r.identifiedInfo={identified:n,name:this._source.name,description:await TextEditor.enrichHTML(i.identifiedDescription,l)}),game.combat){const e=[];e.push(game.i18n.format("PF1.CombatInfo_Round",{round:game.combat.round})),e.length>0&&(o.extraProperties.push({header:game.i18n.localize("PF1.CombatInfo_Header"),value:e,css:"combat-properties"}),o.hasExtraProperties=!0)}const c=`systems/pf1/templates/chat/${["consumable"].includes(this.type)?this.type:"item"}-card.hbs`;r.metadata={},r.metadata.item=this.id;const u=foundry.utils.mergeObject({type:CONST.CHAT_MESSAGE_TYPES.OTHER,speaker:ChatMessage.implementation.getSpeaker({actor:s,token:t,alias:t?.name}),flags:{core:{canPopout:!0},pf1:r}},e);if(!1===Hooks.call("pf1DisplayCard",this,{template:c,templateData:o,chatData:u}))return;const p=await renderTemplate(c,o);return u.content=await TextEditor.enrichHTML(p,l),u.rollMode??=game.settings.get("core","rollMode"),ChatMessage.implementation.applyRollMode(u,u.rollMode),ChatMessage.implementation.create(u)}async getChatData({chatcard:e=!1,actionId:t=null,rollData:s={}}={}){const a={},i=t?this.actions.get(t):this.defaultAction;s??=i?i.getRollData():this.getRollData();const n=s.item??this.system,o=s.action??i?.data??{},r=this.getLabels({actionId:t,rollData:s});a.identifiedDescription=this.getDescription({chatcard:e,rollData:s}),a.unidentifiedDescription=n.description.unidentified,a.description=this.showUnidentifiedData?a.unidentifiedDescription:a.identifiedDescription,a.actionDescription=o.description;const l=[];if(!0!==e&&(r.subType&&!0!==r.childTypeDistinct&&l.push(r.subType),r.childType&&l.push(r.childType)),!this.showUnidentifiedData){if(r.activation&&l.push(r.activation),null!=o.range){const e=i.getRange({type:"max",rollData:s}),t="mi"===o.range.units?"mi":"ft",a=pf1.utils.convertDistance(e,t),n=e>0?game.i18n.format("PF1.RangeNote",{distance:e,units:a[1]}):null;n&&l.push(n)}if(r.save){l.push(r.save);const e=o.save?.description;e&&l.push(e)}if(null!=o.duration){let e;if("spec"===o.duration.units)e=o.duration.value;else if(!["inst","perm"].includes(o.duration.units)){e=[await RollPF.safeRollAsync(o.duration.value||"0",s).total,pf1.config.timePeriods[o.duration.units]].filterJoin(" ")}e&&l.push(e)}const e=o.enh?.value??n.enh??0;e>0&&l.push(game.i18n.format("PF1.EnhancementInline",{bonus:e}))}this.getTypeChatData(a,r,l,s,{actionId:t,chatcard:e});const c=o.save?.harmless;return c&&l.push(game.i18n.localize("PF1.Harmless")),a.properties=l,a}getTypeChatData(e,t,s,a,{actionId:i=null,chatcard:n=!1}={}){if(this.isCharged){const e=this.charges;Number.isFinite(e)&&s.push(`${game.i18n.localize("PF1.ChargePlural")}: ${e}/${this.maxCharges}`)}}async use({actionId:e="",actionID:t="",cost:s=null,ev:a=null,skipDialog:i=getSkipActionPrompt(),chatMessage:n=!0,dice:o=pf1.dice.D20RollPF.standardRoll,rollMode:r,token:l,options:c={}}={}){if(r||=game.settings.get("core","rollMode"),null!==s&&!Number.isSafeInteger(s))throw Error("Invalid value for cost override: "+s);if(t&&(foundry.utils.logCompatibilityWarning("ItemPF.use() actionID parameter is deprecated in favor of actionId",{since:"PF1 v10",until:"PF1 v11"}),e||=t),c.held&&("twohanded"===c.held?c.held="2h":"offhand"===c.held&&(c.held="oh")),!this.hasAction){const e={event:a,skipDialog:i,chatMessage:n,rollMode:r};"attackData"in e||Object.defineProperty(e,"attackData",{get:()=>(foundry.utils.logCompatibilityWarning("shared.attackData is deprecated in favor of directly accessing shared",{since:"PF1 v10",until:"PF1 v12"}),e)});const t=await this.executeScriptCalls("use",{},e);if(r=t.rollMode||r,t.reject)return t;if(this.isCharged){const e=s??this.getDefaultChargeCost();if(this.charges<e)return this.isSingleUse?void ui.notifications.warn(game.i18n.localize("PF1.Error.NoQuantity")):void ui.notifications.warn(game.i18n.format("PF1.Error.InsufficientCharges",{name:this.name}));await this.addCharges(-e)}return!0!==t.hideChat&&n&&(t.descriptionOnly=!0,t.chatCard=await this.displayCard({rollMode:r})),t}let u;if(a&&a.originalEvent&&(a=a.originalEvent),!(this.system.actions.length>0))return void console.error("This item does not have an action associated with it.");if(e){if(u=this.actions.get(e),!u)throw Error(`Could not find action by ID "${e}"`)}else{if(this.system.actions.length>1&&!0!==i)return pf1.applications.ActionSelector.open(this,{ev:a,chatMessage:n,dice:o,rollMode:r,token:l});u=this.defaultAction}const p={event:a,rollData:{},skipDialog:i,chatMessage:n,dice:o,cost:s,fullAttack:!0,useOptions:c,attackBonus:[],damageBonus:[],attacks:[],chatAttacks:[],rollMode:r,useMeasureTemplate:u.hasTemplate&&game.settings.get("pf1","placeMeasureTemplateOnQuickRolls"),conditionals:null,conditionalPartsCommon:{},casterLevelCheck:!1,concentrationCheck:!1,scriptData:{}};Object.defineProperties(p,{action:{value:u,writable:!1,enumerable:!0},item:{value:this,writable:!1,enumerable:!0},token:{value:l,writable:!1,enumerable:!0}}),p.useOptions.ammo&&(u.data.usesAmmo?await this.setFlag("pf1","defaultAmmo",p.useOptions.ammo):console.error("Attempted to set ammo for action that does not use ammo"));return new ActionUse(p).process({skipDialog:i})}getContextChanges(e=["attack"]){if(!this.actor)return[];const t=this.getContextStack(e);return this.actor.changes.filter((e=>t.has(e.target)))}getContextStack(e){const t=new Set(e);for(const s of e)switch(s){case"mattack":case"rattack":case"nattack":case"tattack":t.add("attack");break;case"wdamage":case"sdamage":t.add("damage");break;case"mwdamage":case"rwdamage":case"twdamage":t.add("damage"),t.add("wdamage")}return(t.has("rwdamage")||t.has("twdamage"))&&t.add("rdamage"),t}getRollData(){const e=this.actor,t={...e?.getRollData()??{}};t.item=foundry.utils.deepClone(this.system);const s=t.item.class;s&&(t.class=t.classes?.[s]);const a=this.system.tag;return t.item.dFlags=t.dFlags?.[a],t.item.bFlags=Object.fromEntries(Object.entries(t.item.flags?.boolean??{}).map((([e,t])=>[e,t?1:0]))),this.isPhysical&&(t.item.auraStrength=this.auraStrength,this.system.resizing&&void 0!==t.size&&(t.item.size=t.size)),Hooks.events.pf1GetRollData?.length>0&&Hooks.callAll("pf1GetRollData",this,t),t}static chatListeners(e){e.on("click",".card-buttons button, .inline-action",this._onChatCardButton.bind(this)),e.on("click",".item-name",this._onChatCardToggleContent.bind(this))}static async _onChatCardButton(e){e.preventDefault();const t=e.currentTarget;t.disabled=!0;const s=t.closest(".chat-card"),a=s.closest(".message").dataset.messageId,i=game.messages.get(a),n=t.dataset.action;if(!(["save","applyDamage"].includes(n)||game.user.isGM||i.isAuthor))return;if("applyDamage"===n)return await this._onChatCardAction(n,{button:t,event:e}),void(t.disabled=!1);const o=ChatMessage.getSpeakerActor(i.speaker).items.get(s.dataset.itemId);await this._onChatCardAction(n,{button:t,item:o,event:e})||(t.disabled=!1)}static async _onChatCardAction(e,{button:t=null,item:s=null,event:a}={}){const i=game.messages.get(t.closest(".chat-message").dataset.messageId);if("applyDamage"===e){let e=!1;t.dataset.tags?.split(" ").includes("nonlethal")&&(e=!0);const s=parseInt(t.dataset.value);if(isNaN(s))return void console.warn("Invalid damage value:",s,{button:t});const n=parseInt(t.closest("[data-index]")?.dataset.index),o=t.dataset.type,r=i.systemRolls?.attacks?.[n],l="critical"===o,c=[];let u;r&&("normal"===o?u=r.damage:l&&(u=r.critDamage));const p=i.getFlag("pf1","metadata")??{};if(u)for(const e of u)c.push({value:e.total,types:e.damageType});pf1.documents.actor.ActorPF.applyDamage(s,{asNonlethal:e,event:a,element:t,message:i,isCritical:l,critMult:l?p.config.critMult??0:0,instances:c})}else{if(["recoverAmmo","forceRecoverAmmo"].includes(e)){if(!s?.isOwner)return;const a=t.closest(".chat-attack").dataset.index;if(!a)return;const n=t.closest(".ammo")?.dataset.ammoId||t.dataset.ammoId,o=t.closest(".ammo")?.dataset.ammoQuantity||t.dataset.ammoQuantity||1;if(0==o)return;const r=i.getFlag("pf1","ammoRecovery"),l=r?.[a]?.[n];if(!0===l?.failed)return;if(void 0!==l?.recovered)return;const c=s.actor.items.get(n);if(!c)return;if(c.getFlag("pf1","abundant"))return;let u=100;"recoverAmmo"===e&&(u=c.system.recoverChance??50);let p=0;if(u>0)for(let e=0;e<o;e++)u<=100*Math.random()&&(p+=1);const m=[];return p>0&&m.push(c.addCharges(p)),m.push(i.setFlag("pf1","ammoRecovery",{[a]:{[n]:{recovered:p}}})),await Promise.all(m),!0}"concentration"===e?s.actor.rollConcentration(s.system.spellbook):"caster-level-check"===e&&s.actor.rollCL(s.system.spellbook)}return!1}static _onChatCardToggleContent(e){e.preventDefault();const t=e.currentTarget,s=t.closest(".chat-card").querySelector(".card-content");s.style.display="none"===s.style.display?"block":"none";const a=t.closest(".chat-popout");ui.windows[a?.dataset.appid]?.setPosition()}canCreateItemLink(e,t,s,a){const i=this.actor,n=i&&s.actor&&s.actor.id===i.id,o=["children","charges","ammunition"].includes(e);if(o&&!i)return!1;if(a===this.id)return!1;if((this.system.links?.[e]||[]).some((e=>e.id===a||e.uuid===a)))return!1;const r=s.system.links?.[e]??[];if(o&&n){if("charges"===e){if(r.length>0)return ui.notifications.warn(game.i18n.format("PF1.Warning.CannotCreateChargeLink",{source:this.name,target:s.name})),!1;if(null!=s.links.charges)return ui.notifications.warn(game.i18n.format("PF1.Warning.CannotCreateChargeLink2",{source:this.name,target:s.name,deeptarget:s.links.charges.name})),!1}return!0}if("classAssociations"===e&&"compendium"===t)return!0;if("supplements"===e){if(!s.actor)return!0;ui.notifications.error(game.i18n.localize("PF1.LinkErrorNoActorSource"))}return!1}generateInitialLinkData(e,t,s,a,i={}){const n={name:s.name};switch(n.uuid=a,"classAssociations"===e&&(n.level=1),e){case"classAssociations":case"supplements":"system"===game.packs.get(s.pack)?.metadata.packageType&&delete n.name;break;case"charges":case"children":delete n.name}return foundry.utils.mergeObject(n,i),n}async createItemLink(e,t,s,a,i){if(this.canCreateItemLink(e,t,s,a)){const n=this.generateInitialLinkData(e,t,s,a,i),o=this.toObject(),r=foundry.utils.deepClone(o.system.links?.[e]??[]);r.push(n);const l={_id:this.id,["system.links."+e]:r},c=[];return"charges"===e&&c.push({_id:s.id,system:{uses:{"-=value":null,"-=maxFormula":null,"-=per":null,"-=rechargeFormula":null}}}),this.actor&&c.length>0?await this.actor.updateEmbeddedDocuments("Item",[l,...c]):await this.update(l),Hooks.callAll("pf1CreateItemLink",this,n,e),!0}if("children"===e&&"data"!==t){const e=s.toObject();"spell"===e.type&&(e.system.spellbook="spelllike");const[t]=await this.actor.createEmbeddedDocuments("Item",[e]);await this.createItemLink("children","data",t,t.getRelativeUUID(this.actor))}return!1}async getLinkedItems(e,t=!1,{recursive:s=!1,_results:a}={}){const i=this.system.links?.[e];if(!i)return[];const n=a??new Set;for(const a of i){if(!a.uuid)continue;const i=await fromUuid(a.uuid,{relative:this.actor});if(i){if(t){if(n.some((e=>e.item===i)))continue}else if(n.has(i))continue;t?n.add({item:i,linkData:a}):n.add(i),"charges"!==e&&s&&await i.getLinkedItems(e,{recursive:s,_results:n})}}return Array.from(n)}getLinkedItemsSync(e,{recursive:t=!1,_results:s}={}){const a=this.system.links?.[e];if(!a)return[];const i=s??new Set;for(const s of a){if(!s.uuid)continue;const a=fromUuidSync(s.uuid,{relative:this.actor});if(a){if(i.has(a))continue;i.add(a),"charges"!==e&&t&&a.getLinkedItemsSync(e,{recursive:t,_results:i})}}return Array.from(i)}async getAllLinkedItems(){const e=[];for(const t of Object.values(this.system.links??{}))for(const s of t){if(!s.uuid)continue;const t=await fromUuid(s.uuid,{relative:this.actor});t&&e.push(t)}return e}async removeItemLink(e,{commit:t=!0}={}){const s={};for(const[t,a]of Object.entries(this.system.links??{})){const i=foundry.utils.deepClone(a),n=i.findIndex((t=>t.uuid===e));n>=0&&(i.splice(n,1),s["system.links."+t]=i)}if(!foundry.utils.isEmpty(s))return t?this.update(s):s}async getLinkItem(e,t=!1){foundry.utils.logCompatibilityWarning("ItemPF.getLinkItem() is deprecated in favor of fromUuid(linkData.uuid, {relative:actor})",{since:"PF1 v10",until:"PF1 v11"});const s=await fromUuid(e.uuid,{relative:this.actor});return t?{item:s,linkData:e}:s}getLinkedItemSync(e={}){return foundry.utils.logCompatibilityWarning("ItemPF.getLinkedItemSync() is deprecated in favor of fromUuidSync(linkData.uuid, {relative:actor})",{since:"PF1 v10",until:"PF1 v11"}),fromUuidSync(e.uuid,{relative:this.actor})}getChangeTargets(e){const t={};if("skill"===e)if(this.actor){const e=foundry.utils.mergeObject(pf1.config.skills,this.actor.system.skills,{inplace:!1});for(const[s,a]of Object.entries(e))if(a.subSkills)for(const[e,i]of Object.entries(a.subSkills))t[`skill.${s}.${e}`]=`${pf1.config.skills[s]} (${i.name})`;else a.custom?t["skill."+s]=a.name:t["skill."+s]=pf1.config.skills[s]}else for(const[e,s]of Object.entries(pf1.config.skills))t["skill."+e]=s;else if(foundry.utils.hasProperty(pf1.config.buffTargets,e))for(const[s,a]of Object.entries(pf1.config.buffTargets[e]))s.startsWith("_")||s.startsWith("~")||(t[s]=a);return t}getChangeSubTargets(e){return foundry.utils.logCompatibilityWarning("ItemPF.getChangeSubTargets() is deprecated in favor of ItemPF.getChangeTargets",{since:"PF1 v10",until:"PF1 v11"}),this.getChangeTargets(e)}getValue(){return foundry.utils.logCompatibilityWarning("ItemPF.getValue() is deprecated, only physical items have value",{since:"PF1 v10",until:"PF1 v11"}),0}async addItemBooleanFlag(e,t={}){e=(e+"").replace(/[^\w_-]/g,"-").replace(/^-+/,"_");const s=this.system.flags?.boolean??{};if(Array.isArray(s))throw Error(`${this.name} [${this.id}] requires migration.`);return void 0===s[e]&&(await this.update({["system.flags.boolean."+e]:!0},t),!0)}async removeItemBooleanFlag(e,t={}){return void 0!==(this.system.flags?.boolean??{})[e]&&(await this.update({["system.flags.boolean.-="+e]:null},t),!0)}hasItemBooleanFlag(e){return!0===(this.system.flags?.boolean??{})[e]}getItemBooleanFlags(){const e=this.system.flags?.boolean??{};return Object.keys(e)}async setItemDictionaryFlag(e,t,s={}){e=(e+"").replace(/[^\w_-]/g,"-").replace(/^-+/,"_");return(this.system.flags?.dictionary??{})[e]!==t&&(await this.update({["system.flags.dictionary."+e]:t},s),!0)}async removeItemDictionaryFlag(e,t={}){return void 0!==(this.system.flags?.dictionary??{})[e]&&(await this.update({["system.flags.dictionary.-="+e]:null},t),!0)}getItemDictionaryFlag(e){return(this.system.flags?.dictionary||{})[e]}getItemDictionaryFlags(){return this.system.flags?.dictionary||{}}getAttackArray(e){foundry.utils.logCompatibilityWarning("ItemPF.getAttackArray() is deprecated. Use ItemAction.getAttacks() instead.",{since:"PF1 v10",until:"PF1 v11"});const t=this.actions.get(e),s=t?.data,a=t?.getRollData();if(!s)return[0];return t.getAttacks({full:!0,rollData:a,conditionals:!0,bonuses:!0})}get attackArray(){return foundry.utils.logCompatibilityWarning("ItemPF.attackArray is deprecated. Use ItemAction.getAttacks() instead.",{since:"PF1 v10",until:"PF1 v11"}),this.getAttackArray(this.defaultAction.id)}getAttackSources(e,{rollData:t}={}){const s=this.actions.get(e);if(!s)return;const a=[],i=this.actor?.system,n=this.system,o=s.data;if(!i||!o)return a;t??=s.getRollData();const describePart=(e,t,s,i=0)=>{0!=e&&a.push({value:e,name:t,modifier:s,sort:i})},r=s.isCombatManeuver?pf1.config.sizeSpecialMods[t.traits.size]:pf1.config.sizeMods[t.traits.size];0!=r&&describePart(r,game.i18n.localize("PF1.Size"),"size",-20);const l=s.attackSources,c=getHighestChanges(l,{ignoreTarget:!0});if(c.forEach((e=>describePart(e.value,e.flavor,e.type,-800))),o.ability.attack){const e=i.abilities?.[o.ability.attack]?.mod??0;describePart(e,pf1.config.abilities[o.ability.attack],"untyped",-50)}const u=RollPF.safeRollAsync(o.attackBonus||"0",t);0!=u.total&&describePart(u.total,u.flavor??game.i18n.localize("PF1.AttackRollBonus"),"untyped",-100);const p=s.enhancementBonus??(n.masterwork?1:0);c.find((e=>"enh"===e.type&&e.value>p))||(Number.isFinite(s.enhancementBonus)&&0!==s.enhancementBonus?describePart(s.enhancementBonus,game.i18n.localize("PF1.EnhancementBonus"),"enh",-300):n.masterwork&&describePart(1,game.i18n.localize("PF1.Masterwork"),"enh",-300));try{this.getProficiency(!0)||describePart(-4,game.i18n.localize("PF1.Proficiency.Penalty"),"untyped",-500)}catch(e){}if(this.isBroken&&describePart(-2,game.i18n.localize("PF1.Broken"),"untyped",-500),!0!==o.naturalAttack.primaryAttack&&"natural"===n.subType){const e=o.naturalAttack?.secondary?.attackBonus||"-5",s=RollPF.safeRollSync(""+e,t).total??0;describePart(s,game.i18n.localize("PF1.SecondaryAttack"),"untyped",-400)}return o.conditionals.filter((e=>e.default&&e.modifiers.find((e=>"attack"===e.target)))).forEach((e=>{e.modifiers.forEach((s=>{if("allAttack"===s.subTarget){const a=RollPF.safeRollAsync(s.formula,t);if(0==a.total)return;describePart(a.total,e.name,s.type,-5e3)}}))})),a.sort(((e,t)=>t.sort-e.sort))}get attackSources(){return this.getAttackSources(this.defaultAction.id)}getAllDamageSources(e){return this.actions.get(e)?.allDamageSources}get allDamageSources(){return this.getAllDamageSources(this.defaultAction.id)}get inContainer(){return!!this.parentItem}get rootItem(){return this.parentItem?.rootItem??this}}class ItemAttackPF extends ItemPF{async _preUpdate(e,t,s){await super._preUpdate(e,t,s),e.system&&"natural"===e.system.subType&&(e.system.held=null)}get isQuasiPhysical(){return["weapon","item"].includes(this.subType)}get isBroken(){return!!this.isQuasiPhysical&&!0===this.system.broken}getProficiency(e=!0){if(!e)throw Error("Attacks do not support non-weapon proficiency");return this.isProficient}get isProficient(){return!!this.system.proficient||("weapon"!==this.subType||(this.actor?.hasWeaponProficiency?.(this)??!0))}static fromItem(e){if("weapon"!==e.type)throw Error(`Unsupported item type "${e.type}"`);const t=e.toObject().system,s=t.uses??{};"single"===s.per&&(s.per="charges",s.maxFormula="1");const a={name:e.name,type:"attack",img:e.img,system:{subType:"weapon",held:t.held,masterwork:t.masterwork,proficient:t.proficient,enh:t.enh,broken:e.isBroken,timeworn:t.timeworn,cursed:t.cursed,artifact:t.artifact,baseTypes:t.baseTypes,tags:t.tags,weaponGroups:t.weaponGroups,actions:t.actions??[],material:t.material,alignments:t.alignments,attackNotes:t.attackNotes??[],effectNotes:t.effectNotes??[]}};for(const e of a.system.actions)e._id=foundry.utils.randomID(16);return a}getLabels({actionId:e,rollData:t}={}){const s=super.getLabels({actionId:e,rollData:t});return this.system,s.subType=pf1.config.attackTypes[this.subType],s}}class ItemBuffPF extends ItemPF{async _preUpdate(e,t,s){if(await super._preUpdate(e,t,s),e.system&&(e.system?.active&&void 0===e.system?.duration?.start&&foundry.utils.setProperty(e,"system.duration.start",game.time.worldTime),this.isActive&&0==e.system?.active)){const e=this.effect;t.pf1??={},t.pf1.startTime=e?.duration.startTime}}_onUpdate(e,t,s){if(super._onUpdate(e,t,s),void 0===e.system)return;const a=this.actor;if(!a)return;const i=e.system?.active;void 0!==i&&Hooks.callAll("pf1ToggleActorBuff",a,this,i),game.user.id===s&&this._updateTrackingEffect(e)}_onCreate(e,t,s){super._onCreate(e,t,s);const a=this.actor,i=this.isActive;a&&i&&Hooks.callAll("pf1ToggleActorBuff",a,this,!0),game.user.id===s&&i&&this._updateTrackingEffect(e)}_onDelete(e,t){if(super._onDelete(e,t),game.users.get(t)?.isSelf&&this.isActive){const t=e.pf1?.startTime;this.executeScriptCalls("toggle",{state:!1,startTime:t})}const s=this.actor;s&&this.isActive&&Hooks.callAll("pf1ToggleActorBuff",s,this,!1)}async _updateTrackingEffect(e,t){const s=e.system.active;if(void 0===s)return;const a=this.effect;if(s){const e=await this.getRawEffectData();e.active=s,e.transfer=!0,setProperty(e,"flags.pf1.tracker",!0),a?a.update(e):ActiveEffect.implementation.create(e,{parent:this})}else a?.delete({render:!1})}async _preDelete(e,t){const s=this.effect;s&&(e.pf1??={},e.pf1.startTime=s?.duration.startTime,s?.parent!==this&&await s.delete({pf1:{delete:this.uuid}})),await super._preDelete(e,t)}getLabels({actionId:e,rollData:t}={}){const s=super.getLabels({actionId:e,rollData:t}),a=this.system;if(s.subType=pf1.config.buffTypes[a.subType],this.system.duration){const e=this.system.duration,a=pf1.config.timePeriodsShort[e.units];if("turn"===a)s.duration=game.i18n.format("PF1.Time.Format",{value:1,unit:a});else if(a&&e.value)try{t??=this.getRollData();const i=RollPF.safeRollSync(e.value,t,{formula:e.value,item:this},{},{maximize:!0});let n;n=i.isDeterministic?i.total??0:pf1.utils.formula.simplify(e.value,t),s.duration=game.i18n.format("PF1.Time.Format",{value:n,unit:a})}catch(t){console.warn(`Error with buff duration formula "${e.value}"`,this)}}return s}_prepareDependentData(e=!1){super._prepareDependentData(e),this._prepareDuration(),this._prepareTraits()}_prepareTraits(){const e=this.system.conditions??={};e.all=new Set([...e.value??[],...e.custom??[]])}_prepareDuration({rollData:e}={}){const t=this.system,s=t.duration??{},{units:a,value:i}=s;if(!a)return;let n=NaN;if("turn"===a)n=CONFIG.time.roundTime;else{if(!i)return;e??=this.getRollData();const t=RollPF.safeRollSync(i,e,{formula:i,item:this},{},{minimize:!0});if(!t.isDeterministic)return;const s=t.isDeterministic?t.total:t.formula;switch(a){case"hour":n=60*s*60;break;case"minute":n=60*s;break;case"round":n=s*CONFIG.time.roundTime}}t.duration.totalSeconds=n}async getDuration({rollData:e}={}){const t=this.system.duration??{},{units:s,value:a}=t;if(!s)return null;e??=this.getRollData();let i=0;if("turn"===s)i=CONFIG.time.roundTime;else{if(!a)return;e??=this.getRollData();const t=await RollPF.safeRollAsync(a,e).total;switch(s){case"hour":i=60*t*60;break;case"minute":i=60*t;break;case"round":i=t*CONFIG.time.roundTime}}return i}async getRawEffectData({rollData:e}={}){const t=await super.getRawEffectData();t.statuses=Array.from(this.system.conditions.all);const s=this.system.hideFromToken,a={duration:{}};a.show=!s;const i=this.system.duration,n=""+i.value;let o=0,r=this.system.duration.end||"turnStart";return"turn"===i.units?r="turnEnd":n&&(o=await this.getDuration({rollData:e})),a.duration.end=r,a.duration.initiative=game.combat?.initiative,foundry.utils.mergeObject(t,{"flags.pf1":a}),o>=0&&(t.duration.seconds=o),t}getRollData(){const e=super.getRollData();return e.item.level=this.system.level,e}get isActive(){return this.system.active??!1}get effect(){return this.effects.find((e=>!0===e.getFlag("pf1","tracker")))}async setActive(e,t){return this.update({"system.active":e},t)}}class ItemClassPF extends ItemPF{async _preUpdate(e,t,s){if(await super._preUpdate(e,t,s),!e.system)return;void 0!==e.system.level&&(t.pf1??={},t.pf1.level??={},t.pf1.level.old=this.system.level);const a=e.system.links?.classAssociations;a?.length&&(a.forEach((e=>e.level||=1)),a.sort(((e,t)=>e.level-t.level)))}_onCreate(e,t,s){if(super._onCreate(e,t,s),s!==game.user.id)return;const a=this.actor;if(!a)return;const i=this.system.level??0;if(i>0&&this._onLevelChange(0,i,{event:"create"}),this.system.casting?.type){const e={...this.system.casting,class:this.system.tag};a.createSpellbook(e)}}_onDelete(e,t){if(super._onDelete(e,t),t!==game.user.id)return;const s=this.actor;if(!s)return;const a=this.system.level;a>0&&this._onLevelChange(a,0,{event:"delete"});const i=this.system.tag;if(!i||!this.system.casting?.type)return;const n=s.system.attributes.spells.spellbooks??{},o=Object.entries(n).find((([e,t])=>!!t.class&&t.class===i));if(void 0===o)return;const[r,l]=o;l.inUse&&s.update({[`system.attributes.spells.spellbooks.${r}.inUse`]:!1})}_onUpdate(e,t,s){if(super._onUpdate(e,t,s),game.user.id!==s)return;const a=e.system?.level;if(void 0!==a){const e=t.pf1?.level?.old??0;this._onLevelChange(e,a??0,{event:"update"})}}async _onLevelChange(e=0,t=0,{event:s}={}){const a=this.actor;if(a&&e!==t){if(t>e){const s=(this.system.links?.classAssociations??[]).filter((s=>s.level>e&&s.level<=t)),i=new Map,n=[];for(const e of s){const t=await fromUuid(e.uuid);if(!t){const t="Could not find class association: "+e.uuid;console.warn(e.uuid,t,this),ui.notifications?.warn(t,{console:!1});continue}i.set(t.uuid,e);const s=game.items.fromCompendium(t,{clearFolder:!0});s.system.class=this.system.tag,n.push({data:s,link:e})}if(n.length){const e=n.sort(((e,t)=>e.link.level-t.link.level)).map((e=>e.data)),t={};for(const s of e)t[s.type]??=a.itemTypes[s.type].sort(((e,t)=>t.sort-e.sort))[0]?.sort??0,t[s.type]+=CONST.SORT_INTEGER_DENSITY,s.sort=t[s.type];const s=await a.createEmbeddedDocuments("Item",e),o={},r={flags:{pf1:{links:{classAssociations:o}}}};for(const e of s){const t=i.get(e.getFlag("core","sourceId"));o[e.id]=t?.level??1}await this.update(r,{render:!1})}}if(t<e){const e=foundry.utils.deepClone(this.getFlag("pf1","links.classAssociations")||{}),i=[];for(const[s,n]of Object.entries(e)){const o=a.items.get(s);o?n>t&&(i.push(o.id),delete e[s]):delete e[s]}"delete"!==s&&await this.setFlag("pf1","links.classAssociations",e),await Item.implementation.deleteDocuments(i,{parent:a})}Hooks.callAll("pf1ClassLevelChange",this.actor,this,e,t)}}prepareBaseData(){super.prepareBaseData();const e=this.system;e.hitDice=void 0,e.mythicTier=void 0,e.casting?.type&&(e.casting.progression??="high",e.casting.ability??="int",e.casting.spells??="arcane",e.casting.domainSlots??=1,e.casting.cantrips??=!0)}prepareDerivedData(){super.prepareDerivedData();const e=this.system,t=game.settings.get("pf1","useFractionalBaseBonuses");{const s=t?pf1.config.classFractionalSavingThrowFormulas:pf1.config.classSavingThrowFormulas;for(const a of Object.keys(pf1.config.savingThrows)){const i=e.subType||"base";let n;const o=e.savingThrows[a],r=o.value;n="custom"===r?o.custom||"0":s[i][r],null==n&&(n="0");const l=RollPF.safeRollSync(n,{level:e.level,hitDice:this.hitDice}).total;o.base=l,t&&(o.good=!0===s[i].goodSave&&"high"===r)}}{const s=t?pf1.config.classFractionalBABFormulas:pf1.config.classBABFormulas,a=e.bab;let i;i="custom"===a?e.babFormula||"0":s[a]||"0",e.babBase=RollPF.safeRollSync(i,{level:e.level,hitDice:this.hitDice}).total}this.actor?.system&&this._registerOnActor()}_registerOnActor(){const e=this.actor;if(!e.classes)return;e.system;const t=this.system;if(!t.tag)return void console.error("Class doesn't have a tag",this);t.subType||console.warn(this.name+" lacks class type",this);const s=game.settings.get("pf1","healthConfig").getClassHD(this),a="base"===(t.subType||"base");e.classes[t.tag]={_id:this.id,level:t.level,unlevel:t.level,name:this.name,hd:t.hd,hitDice:this.hitDice,mythicTier:this.mythicTier,bab:t.bab,hp:s.auto,savingThrows:{fort:t.savingThrows.fort.base,ref:t.savingThrows.ref.base,will:t.savingThrows.will.base},fc:{hp:a?t.fc.hp.value:0,skill:a?t.fc.skill.value:0,alt:a?t.fc.alt.value:0}}}get hitDice(){const e=this.system;if(void 0===e.hitDice)if("mythic"===e.subType)e.hitDice=0;else if(e.customHD?.length>0){const t={item:{level:this.system.level}};e.hitDice=RollPF.safeRollSync(e.customHD,t).total}else e.hitDice=e.level;return e.hitDice}get mythicTier(){const e=this.system;return void 0===e.mythicTier&&(e.mythicTier="mythic"===this.subType?e.level:0),e.mythicTier}recharge(){}getLabels({rollData:e}={}){const t=super.getLabels({rollData:e}),s=this.system;return t.subType=pf1.config.classTypes[s.subType],t.bab=pf1.config.classBAB[s.bab],t.saves={fort:pf1.config.classSavingThrows[s.savingThrows?.fort?.value],ref:pf1.config.classSavingThrows[s.savingThrows?.ref?.value],will:pf1.config.classSavingThrows[s.savingThrows?.will?.value]},t.hitDie=s.hd,"mythic"!==s.subType&&(t.hitDie=game.i18n.format("PF1.DieSize",{size:s.hd})),t.hasFCB=s.fc?.hp>0||s.fc?.skill>0||s.fc?.alt>0,t}}class ItemPhysicalPF extends ItemPF{async _preUpdate(e,t,s){await super._preUpdate(e,t,s),!1!==t.diff&&!1!==t.recursive&&e.system&&await this._resetChargesOnQuantityUpdate(e)}static system=Object.freeze(foundry.utils.mergeObject(super.system,{isPhysical:!0},{inplace:!1}));_preUpdateNumericValueGuard(e){super._preUpdateNumericValueGuard(e),void 0!==e.quantity&&(!Number.isSafeInteger(e.quantity)||e.quantity<0)&&(e.quantity=0),void 0===e.price||Number.isFinite(e.price)||(e.price=0),void 0===e.unidentified?.price||Number.isFinite(e.unidentified.price)||(e.unidentified.price=0),void 0!==e.hardness&&(!Number.isSafeInteger(e.hardness)||e.hardness<0)&&(e.hardness=0),void 0===e.hp?.value||Number.isSafeInteger(e.hp.value)||(e.hp.value=0),void 0!==e.hp?.max&&(!Number.isSafeInteger(e.hp.max)||e.hp.max<0)&&(e.hp.max=0)}async _preCreate(e,t,s){await super._preCreate(e,t,s),"npc"===this.actor?.type&&void 0===e.system?.identified&&this.updateSource({"system.identified":!1})}_onCreate(e,t,s){super._onCreate(e,t,s),!0===this.system.equipped&&this.executeScriptCalls("equip",{equipped:!0});const a=this.system.quantity||0;a>0&&this.executeScriptCalls("changeQuantity",{quantity:{previous:0,new:a}})}_onUpdate(e,t,s){super._onUpdate(e,t,s);const a=e.system?.equipped;null!=a&&this.executeScriptCalls("equip",{equipped:a});const i=this._memoryVariables?.quantity;if(void 0!==i){const e={previous:i,new:this.system.quantity};null!=e.new&&e.new!==e.previous&&this.executeScriptCalls("changeQuantity",{quantity:e})}}_onDelete(e,t){super._onDelete(e,t),game.users.get(t)?.isSelf&&(!0===this.system.equipped&&this.executeScriptCalls("equip",{equipped:!1}),this.system.quantity>0&&this.executeScriptCalls("changeQuantity",{quantity:{previous:this.system.quantity,new:0}}))}async _resetChargesOnQuantityUpdate(e){if(this.links.charges)return;const t=e.system.quantity;if(void 0===t)return;if((t||0)>=(this.system.quantity||0))return;if(void 0!==e.system.uses?.value)return;const s=this.system.uses??{};if(s.per&&0===s.value&&s.max>0){const t=await this.recharge({period:"any",commit:!1});t&&(e.system.uses??={},e.system.uses.value=t.system.uses.value)}}prepareBaseData(){this.showUnidentifiedData?this.name=this.system.unidentified?.name||this._source.name:this.name=this._source.name,this.system.size||="med",this.system.weight??={},this.system.weight.value||=0,this.system.quantity||=0,super.prepareBaseData();const e=this.system;e.weight??={},e.weight.value??=0,e.weight.total=0,e.weight.converted??={}}prepareDerivedData(){super.prepareDerivedData(),this.prepareWeight(),this.isPhysical&&this.showUnidentifiedData&&(this.system.description.value=this.system.description.unidentified)}async setActive(e,t){return this.update({"system.equipped":e},t)}get isActive(){return!((this.system.hp?.value||0)<=0)&&(!(this.system.quantity<=0)&&(this.system.equipped??!1))}get activeState(){return this.system.equipped||!1}prepareWeight(){const e=this.system,t=e.weight,s=t.value*this.getWeightMultiplier();t.total||=0,t.total+=s*e.quantity,t.converted.value=pf1.utils.convertWeight(s),t.converted.total=pf1.utils.convertWeight(t.total)}getWeightMultiplier(){return 1}_getArmorWeightMultiplier(){const e=this.actor?.system.traits?.size,t=this.system.size||"med",s=this.system.resizing&&e||t;return pf1.config.armorWeight[s]??1}getValue({recursive:e=!0,sellValue:t=.5,inLowestDenomination:s=!1,forceUnidentified:a=!1,single:i=!1,identical:n=!1,maximized:o=!1}={}){const r=this.hasFiniteCharges,l=r?this.maxCharges:0,c=r?o?l:this.charges:0,getActualValue=(e=!0,t=!1)=>{let a=0;if(a=e?this.system.price||0:this.system.unidentified?.price||0,e&&r){let e=t?l:c;(!Number.isFinite(e)||e<0)&&(e=0),a+=(this.system.uses?.pricePerUse??0)*e}return s&&(a*=100),this.isBroken&&(a*=.75),this.system.timeworn&&(a*=r&&0===c?.01:.5),a},u=!a&&!this.showUnidentifiedData,p=i?1:this.system.quantity||0;let m=getActualValue(u);return p>1&&(r&&!0!==n?m+=getActualValue(u,!0)*(p-1):m*=p),"loot"===this.type&&["tradeGoods","treasure"].includes(this.subType)||(m*=t),m}get canUse(){return this.system.equipped&&this.system.quantity>0}get isBroken(){if(this.system.broken)return!0;const e=this.system.hp??{},t=e.max??0;if(t>0){return(e.value??0)<=Math.floor(t/2)}return!1}getLabels({actionId:e,rollData:t}={}){const s=super.getLabels({actionId:e,rollData:t}),a=this.system,i='<i class="fas fa-check"></i>',n='<i class="fas fa-times"></i>';return s.equipped="",!0===a.equipped?s.equipped=i:s.equipped=n,s.carried="",!0===a.carried?s.carried=i:s.carried=n,s.identified="",!0===a.identified?s.identified=i:s.identified=n,s}getName(e=!1){return game.user.isGM&&e&&!1===this.system.identified&&this.system.unidentified?.name||this.name}get showUnidentifiedData(){return!game.user.isGM&&!1===this.system.identified}getRollData(){const e=super.getRollData();return e.item.broken=this.isBroken,e}}class ItemConsumablePF extends ItemPhysicalPF{adjustContained(){super.adjustContained(),this.system.carried=!0}get canEquip(){return!this.inContainer}getLabels({actionId:e,rollData:t}={}){const s=super.getLabels({actionId:e,rollData:t});return s.subType=pf1.config.consumableTypes[this.subType],s}}class ItemContainerPF extends ItemPhysicalPF{static system=Object.freeze({...super.system,hasIdentifier:!0});constructor(...e){super(...e),this.items??=null}async _preUpdate(e,t,s){if(await super._preUpdate(e,t,s),!e.system)return;if(!1===t.recursive||!1===t.diff)return;const a=e.system.items;if(a)for(const[e,s]of Object.entries(a))await this._containedItemUpdate(e,s,a,t)}async _containedItemUpdate(e,t,s,a){if(e.startsWith("-=")){const t=this.items.get(e.replace(/^-=/,""));return void(t&&await t._preDelete(a,game.user))}const i=this.items.get(e);let n;if(i)await i._preUpdate(t,a,game.user),n=i.updateSource(t,{dryRun:!0,fallback:!1}),"data"in this.system.items[e]&&(n["-=data"]=null);else{const e=new Item.implementation(t);await e._preCreate(t,a,game.user),n=e.toObject()}s[e]=n}_onUpdate(e,t,s){const a=e.system?.items;if(a)for(const[e,i]of Object.entries(a)){const a=this.items.get(e);try{e.startsWith("-=")||(i._id?a._onCreate(i,t,s):a._onUpdate(i,t,s))}catch(e){console.error(e,{parent:this,item:a})}}super._onUpdate(e,t,s)}prepareBaseData(){super.prepareBaseData();const e=(100-(this.system.weight?.reduction?.percent??0))/100;this.system.weight.currency=this._calculateCoinWeight()*e}prepareDerivedData(){this._prepareInventory(),super.prepareDerivedData()}_prepareInventory(){const e=this.items,t=new Collection;this.system.items??={};for(const[s,a]of Object.entries(this.system.items))try{let i=e?.get(s);i?i.updateSource(new Item.implementation(a).toObject(),{recursive:!1}):(i=new Item.implementation(a,{parent:this.actor}),i.parentItem=this),i.reset(),t.set(s,i)}catch(e){throw console.error("Error preparing contained item:",{id:s,data:a},this),e}this.items=t}prepareWeight(){this.system.weight??={};const e=this.system.weight;e.total=0;const t=(100-(e.reduction?.percent||0))/100,s=this._calculateCoinWeight();e.currency=s*t,e.contents=this.items.reduce(((e,t)=>e+t.system.weight.total),0),e.contents+=s;const a=e.reduction?.value??0;e.total+=Math.max(0,e.contents*t-a),e.converted.reduction=pf1.utils.convertWeight(a),e.converted.contents=pf1.utils.convertWeight(e.contents),e.converted.currency=pf1.utils.convertWeight(e.currency),super.prepareWeight()}getContainerContent(e){return this.items.get(e)}async createContainerContent(e,t={renderSheet:!1}){e=e instanceof Array?e:[e];const s=deepClone(t),a=game.user,i=[],n={system:{items:{}}};for(const o of e){do{o._id=foundry.utils.randomID(16)}while(void 0!==this.system.items[o._id]);const e=new Item.implementation(o);let r=await e._preCreate(o,t,game.user)??!0;r&&=t.noHook||Hooks.call("preCreateItem",e,o,s,a.id),!1!==r?(e.updateSource({_stats:{coreVersion:game.version,systemVersion:game.system.version,createdTime:Date.now(),lastModifiedBy:a.id}}),n.system.items[o._id]=e.toObject(),i.push(o._id)):console.debug(vtt+" | Item creation prevented during pre-create")}await this.update(n,{pf1:{createContained:i}});const o=this.items.filter((e=>i.includes(e.id)));return t.renderSheet&&o.forEach((e=>e.sheet.render(!0))),o}async deleteContainerContent(e,t={}){const s=new Set(e instanceof Array?e:[e]),a="ContainerContent",i=game.user,n={system:{items:{}}},o=[];for(const e of s){const s=this.items.get(e);let r=await s._preDelete(t,i)??!0;r&&=t.noHook||Hooks.call("preDelete"+a,s,t,i.id),!1!==r?(n.system.items["-="+e]=null,o.push(e)):console.debug(`${vtt} | ${a} deletion prevented during pre-delete`)}await this.update(n,{pf1:{removeContained:o}})}async updateContainerContents(e){e=e instanceof Array?e:[e];const t="ContainerContent",s=game.user,a={diff:!0},i=[],n={system:{items:{}}};for(const o of e){if(!o._id)throw Error("You must provide an id for every Embedded Document in an update operation");const e=this.items.get(o._id);let r={};try{r=e.updateSource(o,{dryRun:!0,fallback:!1})}catch(e){console.error(e);continue}let l=await e._preUpdate(r,a,s)??!0;l&&=a.noHook||Hooks.call("preUpdate"+t,e,r,a,s.id),!1!==l?(r._stats={coreVersion:game.version,systemVersion:game.system.version,modifiedTime:Date.now(),lastModifiedBy:s.id},n.system.items[o._id]=r,i.push(o._id)):console.debug(`${vtt} | ${t} update prevented during pre-update`)}await this.update(n,{pf1:{updateContained:i}})}getTotalCurrency({inLowestDenomination:e=!1}={}){const t=this.system.currency||{},s=1e3*(t.pp||0)+100*(t.gp||0)+10*(t.sp||0)+(t.cp||0);return e?s:s/100}convertCurrency(e="pp"){const t=this.getTotalCurrency({inLowestDenomination:!0}),s=pf1.utils.currency.convert(t,e);return this.update({system:{currency:s}})}_calculateCoinWeight(){const e=game.settings.get("pf1","coinWeight");return e?Object.values(this.system.currency||{}).reduce(((e,t)=>e+(t||0)),0)/e:0}getValue({recursive:e=!1,inLowestDenomination:t=!1,...s}={}){s.single&&(e=!1);const a={recursive:e,inLowestDenomination:t,...s};let i=super.getValue(a);return e?(i+=this.getTotalCurrency({inLowestDenomination:t}),this.items.forEach((e=>{i+=e.getValue(a)})),i):i}async getChatData({chatcard:e,rollData:t}={}){const s=await super.getChatData({chatcard:e,rollData:t}),a=this.getValue({sellValue:1,recursive:!0,inLowestDenomination:!0})-this.getValue({sellValue:1,recursive:!1,inLowestDenomination:!0}),i=pf1.utils.currency.split(a),n=game.i18n.localize("PF1.Containers.Contents.Value")+": "+game.i18n.format("PF1.SplitValue",i);s.properties.push(n);const o={...this.system.currency};o.gp||=0,o.gp+=10*o.pp;const r=game.i18n.localize("PF1.Currency.Label")+": "+game.i18n.format("PF1.SplitValue",o);return s.properties.push(r),s}recharge(){}adjustContained(){super.adjustContained(),this.system.carried=!0}}class ItemEquipmentPF extends ItemPhysicalPF{async _preUpdate(e,t,s){if(await super._preUpdate(e,t,s),!e.system)return;const a=e.system?.subType;if(void 0!==a&&a!==this.subType){const t=e.system?.equipmentSubtype??this.system.equipmentSubtype??"",s=Object.keys(pf1.config.equipmentTypes[a]??{}).filter((e=>!e.startsWith("_")));s.includes(t)||(0===s.length?e.system.equipmentSubtype="":s.length>0&&(e.system.equipmentSubtype=s[0]));const i=e.system?.slot??this.system.slot??"",n="other"===a?"wondrous":a,o=Object.keys(pf1.config.equipmentSlots[n]??{});i&&o.includes(i)||(e.system.slot=o[0])}}getLabels({actionId:e,rollData:t}={}){const s=super.getLabels({actionId:e,rollData:t}),a=this.system;let i=this.subType;const n=Object.keys(pf1.config.equipmentTypes);n.includes(i)||(i=n[0]);let o=this.system.equipmentSubtype;const r=Object.keys(pf1.config.equipmentTypes[i]).filter((e=>!e.startsWith("_")));r.includes(o)||(o=r[0]);const l=!this.showUnidentifiedData,c=pf1.config.equipmentTypes[i];s.subType=c._label,l?s.childType=c[o]:"wondrous"===this.subType&&(s.subType=pf1.config.equipmentTypes.other._label),["armor","shield"].includes(this.subType)&&s.childType&&(s.childTypeDistinct=!0);let u=a.armor.value||0;l&&(u+=a.armor?.enh||0),u>0&&(s.armor=`${u} ${game.i18n.localize("PF1.ACNormal")}`,s.armorValue=u);const p=a.armor?.acp||0;p>0&&(s.acp=!0,s.acpEffective=Math.max(0,p+(a.masterwork?-1:0)));const m=a.armor?.dex??null;return Number.isFinite(m)&&(s.mdex=!0),this.hasSlots&&("armor"===this.subType?s.slot=pf1.config.equipmentSlots.armor.armor:"shield"===this.subType?s.slot=pf1.config.equipmentSlots.shield.shield:"clothing"===this.subType?s.slot=pf1.config.equipmentSlots.clothing.clothing:s.slot=pf1.config.equipmentSlots.wondrous[a.slot]),s}adjustContained(){super.adjustContained(),this.system.carried=!0,this.canEquip||(this.system.equipped=!1)}get canEquip(){if(!this.inContainer)return!0;switch(this.subType){case"armor":case"shield":case"clothing":return!1;case"wondrous":case"other":return"slotless"===this.system.slot}return!0}prepareDerivedData(){super.prepareDerivedData();const e=this.system;e.armor.enh??=0;const t=e.armor.enh||0;e.armor.total=(e.armor.value||0)+t,!1!==e.equipped&&this.applyEquippedEffects()}applyEquippedEffects(){const e=this.system;if(!this.isActive)return;const t=this.actor;if(t?.system&&t?.equipment)switch(this.subType){case"shield":{const s=pf1.config.shieldTypes,a=e.equipmentSubtype;let i=t.equipment.shield.type;"other"===a&&i<s.other?i=s.other:"lightShield"===a&&i<s.light?i=s.light:"heavyShield"===a&&i<s.heavy?i=s.heavy:"towerShield"===a&&i<s.tower&&(i=s.tower),t.equipment.shield.type!==i&&(t.equipment.shield.type=i,t.equipment.shield.id=this.id);break}case"armor":{const s=pf1.config.armorTypes,a=e.equipmentSubtype;let i=t.equipment.armor.type;"lightArmor"===a&&i<s.light?i=s.light:"mediumArmor"===a&&i<s.medium?i=s.medium:"heavyArmor"===a&&i<s.heavy&&(i=s.heavy),i!==t.equipment.armor.type&&(t.equipment.armor.type=i,t.equipment.armor.id=this.id);break}}}get hasSlots(){return["wondrous","other"].includes(this.subType)}getProficiency(e=!0){if(e)return this.isProficient;const t=this.subType;if(!["armor","shield"].includes(t))throw Error(`"${t}" does not support proficiency`);const s=this.actor;return!s||s.hasArmorProficiency(this)}get baseArmorProficiency(){const e=this.subType;if(!["armor","shield"].includes(e))throw Error(`"${e}" does not support proficiency`);return{armor:{lightArmor:"lgt",mediumArmor:"med",heavyArmor:"hvy"},shield:{other:"shl",lightShield:"shl",heavyShield:"shl",towerShield:"twr"}}[e][this.system.equipmentSubtype]??null}getWeightMultiplier(){return["armor","shield"].includes(this.subType)?this._getArmorWeightMultiplier():1}get isProficient(){return!!this.system.proficient||(this.actor?.hasWeaponProficiency?.(this)??!0)}}class ItemFeatPF extends ItemPF{_onDelete(e,t){super._onDelete(e,t),game.users.get(t)?.isSelf&&this.isActive&&this.executeScriptCalls("toggle",{state:!1})}async setActive(e,t){return this.update({"system.disabled":!e},t)}get isActive(){return!0!==this.system.disabled}getLabels({actionId:e,rollData:t}={}){const s=super.getLabels({actionId:e,rollData:t}),{subType:a,abilityType:i}=this.system;return s.subType=pf1.config.featTypes[a],s.featType=pf1.config.featTypes[a],s.abilityType=pf1.config.abilityTypes[this.system.abilityType]?.short,s.traitType=pf1.config.traitTypes[this.system.traitType],i&&"none"!==i?(s.abilityType=pf1.config.abilityTypes[i].short,s.abilityTypeLong=pf1.config.abilityTypes[i].long):s.abilityType&&delete s.abilityType,s}getTypeChatData(e,t,s,a){super.getTypeChatData(e,t,s,a),t.abilityType&&s.push(t.abilityType)}}class ItemLootPF extends ItemPhysicalPF{get extraType(){return this.system.extraType}async _preUpdate(e,t,s){await super._preUpdate(e,t,s),e.system&&(void 0!==e.flags?.pf1?.abundant&&(foundry.utils.logCompatibilityWarning("flags.pf1.abundant is deprecated in favor of system.abundant",{since:"PF1 v10",until:"PF1 v11"}),e.system.abundant=e.flags.pf1.abundant,delete e.flags.pf1.abundant),void 0!==e.system?.subType&&e.system?.subType!==this.system.subType&&void 0===e.system?.extraType&&(e.system.extraType=""))}getLabels({actionId:e,rollData:t}={}){const s=super.getLabels({actionId:e,rollData:t});return this.showUnidentifiedData||(s.subType=pf1.config.lootTypes[this.subType]),s}get isActive(){return!((this.system.hp?.value||0)<=0)&&(!(this.system.quantity<=0)&&(!!pf1.config.unequippableLoot.includes(this.subType)||(this.system.equipped??!1)))}get isSingleUse(){return"ammo"===this.subType||super.isSingleUse}adjustContained(){super.adjustContained(),this.system.carried=!0,this.system.equipped=!1}get canEquip(){return!this.inContainer}}class ItemRacePF extends ItemPF{static system=Object.freeze({...super.system,hasIdentifier:!1});async _preCreate(e,t,s){await super._preCreate(e,t,s);const a=this.actor;if(a){const e=a.itemTypes.race.find((e=>e!==this));if(e){e.system.size;await e.delete();a.system.traits.size;this.system.size}}}async _preUpdate(e,t,s){if(await super._preUpdate(e,t,s),!e.system)return;const a=this.actor;if("basic"===a?.type)return;const i=e.system?.size;if(a&&void 0!==i){const e=a.system.traits?.size;this.system.size===e&&i!==e&&(t._pf1SizeChanged=!0)}}_onCreate(e,t,s){if(super._onCreate(e,t,s),game.user.id===s&&this.actor){const e={};for(const[t,s]of Object.entries(this.system.speeds??{}))e[t]={base:s};this.system.speeds?.fly>0&&(e.fly.maneuverability=this.system.speeds.flyManeuverability||"average"),this.actor.update({"system.attributes.speed":e})}}_onUpdate(e,t,s){super._onUpdate(e,t,s);const a=this.actor;a&&t._pf1SizeChanged&&game.user.id===s&&a.update({"system.traits.size":this.system.size})}_onDelete(e,t){if(super._onDelete(e,t),game.user.id!==t)return;const s=this.actor;0===s?.itemTypes.race.length&&s.update({"system.attributes.speed":{"land.base":30,"fly.base":0,"fly.maneuverability":"average","swim.base":0,"climb.base":0,"burrow.base":0}})}recharge(){}}const l=["systems/pf1/templates/actors/parts/actor-summary.hbs","systems/pf1/templates/actors/parts/actor-level.hbs","systems/pf1/templates/actors/parts/actor-traits.hbs","systems/pf1/templates/actors/parts/actor-inventory.hbs","systems/pf1/templates/actors/parts/actor-features.hbs","systems/pf1/templates/actors/parts/actor-spellbook-front.hbs","systems/pf1/templates/actors/parts/actor-spellbook.hbs","systems/pf1/templates/actors/parts/actor-skills-front.hbs","systems/pf1/templates/actors/parts/actor-skills.hbs","systems/pf1/templates/actors/parts/actor-combat.hbs","systems/pf1/templates/actors/parts/actor-defenses_tables.hbs","systems/pf1/templates/actors/parts/actor-buffs.hbs","systems/pf1/templates/actors/parts/actor-attributes.hbs","systems/pf1/templates/actors/parts/actor-settings.hbs","systems/pf1/templates/actors/parts/actor-settings-ability-scores.hbs","systems/pf1/templates/actors/parts/actor-item-summary.hbs","systems/pf1/templates/internal/item-search.hbs","systems/pf1/templates/internal/table_magic-items.hbs","systems/pf1/templates/items/parts/item-actions.hbs","systems/pf1/templates/items/parts/item-advanced.hbs","systems/pf1/templates/items/parts/item-alignments.hbs","systems/pf1/templates/items/parts/item-ammo.hbs","systems/pf1/templates/items/parts/item-aura.hbs","systems/pf1/templates/items/parts/item-base-types.hbs","systems/pf1/templates/items/parts/item-changes.hbs","systems/pf1/templates/items/parts/item-class-link.hbs","systems/pf1/templates/items/parts/item-contents.hbs","systems/pf1/templates/items/parts/item-description.hbs","systems/pf1/templates/items/parts/item-sidebar-inputs.hbs","systems/pf1/templates/items/parts/item-sidebar-tags.hbs","systems/pf1/templates/items/parts/item-sidebar-conditions.hbs","systems/pf1/templates/items/parts/item-sidebar-aura.hbs","systems/pf1/templates/items/parts/item-links.hbs","systems/pf1/templates/items/parts/item-materials-addon.hbs","systems/pf1/templates/items/parts/item-materials.hbs","systems/pf1/templates/items/parts/item-name.hbs","systems/pf1/templates/items/parts/item-notes.hbs","systems/pf1/templates/items/parts/item-proficiencies.hbs","systems/pf1/templates/items/parts/item-conditions.hbs","systems/pf1/templates/items/parts/item-size.hbs","systems/pf1/templates/items/parts/item-tag.hbs","systems/pf1/templates/items/parts/item-tags.hbs","systems/pf1/templates/items/parts/item-weapon-groups.hbs","systems/pf1/templates/items/parts/spell-descriptors.hbs","systems/pf1/templates/internal/content-source-view.hbs","systems/pf1/templates/apps/attack-roll-dialog.hbs","systems/pf1/templates/apps/vision-sharing.hbs","systems/pf1/templates/apps/help-browser.hbs","systems/pf1/templates/apps/action-select.hbs","systems/pf1/templates/apps/item-select.hbs","systems/pf1/templates/apps/actor-select.hbs","systems/pf1/templates/apps/item-action/action.hbs","systems/pf1/templates/apps/item-action/activation.hbs","systems/pf1/templates/apps/item-action/template.hbs","systems/pf1/templates/apps/item-action/conditionals.hbs","systems/pf1/templates/apps/compendium-browser/entries.hbs","systems/pf1/templates/apps/compendium-browser/checkbox-filter.hbs","systems/pf1/templates/apps/compendium-browser/minmax-filter.hbs","systems/pf1/templates/chat/roll-ext.hbs","systems/pf1/templates/chat/defenses.hbs","systems/pf1/templates/chat/parts/gm-description.hbs","systems/pf1/templates/chat/parts/attack-roll-header.hbs","systems/pf1/templates/chat/parts/attack-roll-footer.hbs","systems/pf1/templates/chat/parts/attack-roll-targets.hbs","systems/pf1/templates/chat/parts/item-notes.hbs","systems/pf1/templates/internal/spell-description.hbs","systems/pf1/templates/internal/token-config_vision.hbs","systems/pf1/templates/internal/damage-type-visual.hbs","systems/pf1/templates/hud/tooltip.hbs","systems/pf1/templates/hud/quick-actions.hbs","systems/pf1/templates/apps/level-up/health.hbs","systems/pf1/templates/apps/level-up/ability-score.hbs","systems/pf1/templates/apps/level-up/fcb.hbs","systems/pf1/templates/apps/level-up/summary.hbs","systems/pf1/templates/extended-tooltip.hbs"],preloadHandlebarsTemplates=async()=>loadTemplates(l),renderCachedTemplate=(e,t={})=>{const s=Handlebars.partials[e];if(!s)throw Error(`Template ${e} not found in cache`);return s(t,{allowProtoMethodsByDefault:!0,allowProtoPropertiesByDefault:!0,preventIndent:!0})};class ItemSpellPF extends ItemPF{static system=Object.freeze({...super.system,hasIdentifier:!1,hasChanges:!1});async _preCreate(e,t,s){await super._preCreate(e,t,s),this._assignLevelOnCreate(e,t);{const t=e.system.preparation??{},s={};void 0!==t.maxAmount&&(foundry.utils.logCompatibilityWarning("ItemSpellPF preparation.maxAmount is now preparation.max",{since:"PF1 v10",until:"PF1 v11"}),s.max=t.maxAmount,s["-=maxAmount"]=null),void 0!==t.preparedAmount&&(foundry.utils.logCompatibilityWarning("ItemSpellPF preparation.preparedAmount is now preparation.value",{since:"PF1 v10",until:"PF1 v11"}),s.value=t.preparedAmount,s["-=preparedAmount"]=null),void 0!==t.spontaneousPrepared&&(foundry.utils.logCompatibilityWarning("ItemSpellPF preparation.spontaneousPrepared is now preparation.value",{since:"PF1 v10",until:"PF1 v11"}),s.value=t.spontaneousPrepared?1:0,s["-=spontaneousPrepared"]=null),this.actor&&void 0===s.value&&"spontaneous"===this.spellbook?.spellPreparationMode&&(s.value??=1,s.max??=1),foundry.utils.isEmpty(s)||this.updateSource({system:{preparation:s}})}}async _preUpdate(e,t,s){if(await super._preUpdate(e,t,s),!e.system)return;this._preparationPreUpdate(e);const a=e.system.preparation;a&&(void 0!==a.maxAmount&&(foundry.utils.logCompatibilityWarning("ItemSpellPF preparation.maxAmount is now preparation.max",{since:"PF1 v10",until:"PF1 v11"}),a.max=a.maxAmount,delete a.maxAmount),void 0!==a.preparedAmount&&(foundry.utils.logCompatibilityWarning("ItemSpellPF preparation.preparedAmount is now preparation.value",{since:"PF1 v10",until:"PF1 v11"}),a.value=a.preparedAmount,delete a.preparedAmount),void 0!==a.spontaneousPrepared&&(foundry.utils.logCompatibilityWarning("ItemSpellPF preparation.spontaneousPrepared is now preparation.value",{since:"PF1 v10",until:"PF1 v11"}),a.value=a.spontaneousPrepared?1:0,delete a.spontaneousPrepared))}_preparationPreUpdate(e){const t=e.system.preparation;if(!t)return;const s=this.system.preparation,a=t.max??s.max??0,i=t.value??s.value??0;i>a&&(void 0!==t.max?t.value=a:void 0!==t.value&&(t.max=i)),t.max<0&&(t.max=0),t.value<0&&(t.value=0)}_assignLevelOnCreate(e,t){const s=this.actor,a=this.system.spellbook,i=s?.system.attributes?.spells?.spellbooks?.[a]?.class,n=this.system.learnedAt?.class?.[i];Number.isFinite(n)&&this.updateSource({"system.level":Math.clamped(n,0,9)})}getLabels({actionId:e,rollData:t}={}){const s=super.getLabels({actionId:e,rollData:t}),a=this.system;return s.level=pf1.config.spellLevels[a.level],s.school=pf1.config.spellSchools[a.school],s.components=this.getSpellComponents({compact:!0}).join(" "),s}getEffectiveSpellLevel(e=0){return foundry.utils.logCompatibilityWarning("ItemSpellPF.getEffectiveSpellLevel() is deprecated. Use ItemSpellPF.spellLevel instead.",{since:"PF1 v10",until:"PF1 v11"}),(this.spellLevel??0)+e}getEffectiveCasterLevel(e=0){return foundry.utils.logCompatibilityWarning("ItemSpellPF.getEffectiveCasterLevel() is deprecated. Use ItemSpellPF.casterLevel instead.",{since:"PF1 v10",until:"PF1 v11"}),(this.casterLevel??0)+e}preCreateData(e,t,s){const a=super.preCreateData(e,t,s);return this.actor&&!0===this.spellbook?.psychic&&(!0===this.system.components?.verbal&&(a["system.components.verbal"]=!1,a["system.components.thought"]=!0),!0===this.system.components?.somatic&&(a["system.components.somatic"]=!1,a["system.components.emotion"]=!0)),a}prepareBaseData(){super.prepareBaseData(),this.system.preparation??={};const e=this.system.preparation,t=[["maxAmount","max"],["preparedAmount","value"],["spontaneousPrepared","value"]];for(const[s,a]of t)Object.getOwnPropertyDescriptor(e,s)?.get||(delete e[s],Object.defineProperty(e,s,{get:()=>(foundry.utils.logCompatibilityWarning(`ItemSpellPF preparation.${s} is deprecated in favor of preparation.${a}`,{since:"PF1 v10",until:"PF1 v11"}),e[a]),enumerable:!1}))}prepareDerivedData(){super.prepareDerivedData();const e=this.system.descriptors;e&&(e.custom??=[],e.value??=[],e.total=new Set([...e.value.map((e=>pf1.config.spellDescriptors[e]||e)),...e.custom]))}getRollData(){const e=super.getRollData();e.sl=this.spellLevel||0;const t=this.spellbook;if(t){const s=t.ability;let a="";""!==s&&(a=e.abilities?.[s]?.mod),e.ablMod=a,e.cl=this.casterLevel||0,"_hd"===t.class?e.class={level:e.attributes.hd?.total??e.details?.level?.value??0}:e.class=e.classes?.[t.class]??{},Object.defineProperty(e,"classLevel",{get(){return foundry.utils.logCompatibilityWarning("@classLevel is deprecated in favor of @class.level",{since:"PF1 v10",until:"PF1 v11"}),this.class?.level}}),e.spellbook=e.spells[this.system.spellbook]}else{const[t,s]=this.constructor.getMinimumCasterLevelBySpellData(this);e.sl=t,e.cl=s,e.ablMod=Math.floor(t/2)}return e}getConditionalSubTargets(e){const t=super.getConditionalSubTargets(e);return"effect"===e&&(t.cl=game.i18n.localize("PF1.CasterLevel")),"misc"===e&&"spell"===this.type&&this.useSpellPoints()&&(t.charges=game.i18n.localize("PF1.SpellPointsCost")),t}getTypeChatData(e,t,s,a){a.item.sr&&s.push(game.i18n.localize("PF1.SpellResistance")),this.isCharged&&!this.system.atWill&&(this.useSpellPoints()?s.push(`${game.i18n.localize("PF1.SpellPoints")}: ${this.charges}/${this.maxCharges}`):s.push(`${game.i18n.localize("PF1.ChargePlural")}: ${this.charges}/${this.maxCharges}`))}async addCharges(e,t=null){if(!this.actor)return;if(this.system.atWill)return;const s=this.spellbook;if(!s)return;const a=s.spontaneous,i=this.system.spellbook||"primary",n=this.system.level;if(this.useSpellPoints()){const t=this.getSpellUses(),s={};return s[`system.attributes.spells.spellbooks.${i}.spellPoints.value`]=t+e,await this.actor.update(s),this}{const o=Math.max(0,a?(s.spells?.["spell"+n]?.value||0)+e:(this.system.preparation?.value||0)+e);if(a){const e={};return e[`system.attributes.spells.spellbooks.${i}.spells.spell${n}.value`]=o,await this.actor.update(e),this}{const e="system.preparation.value";if(null==t)return(t={})[e]=o,this.update(t);t[e]=o}}}get isCharged(){return!this.system.atWill}get hasFiniteCharges(){return!this.system.atWill&&this.getDefaultChargeCost()>0}get charges(){return this.getSpellUses()}get maxCharges(){return this.getSpellUses(!0)}getDefaultChargeCost({rollData:e}={}){if(this.system.atWill)return 0;if(this.useSpellPoints()){e??=this.getRollData();const t=this.getDefaultChargeFormula();return RollPF.safeRollAsync(t,e).total}return super.getDefaultChargeCost({rollData:e})}getDefaultChargeFormula(){return this.useSpellPoints()?this.system.spellPoints?.cost||game.settings.get("pf1","spellPointCost")||"0":super.getDefaultChargeFormula()}async recharge({value:e,period:t="day",exact:s=!1,maximize:a=!0,commit:i=!0,rollData:n,context:o}={}){const r=this.spellbook;if("prepared"!==(r?.spellPreparationMode||"prepared"))return;if(r?.spellPoints?.useSystem)return;if("week"==t){if(s)return;t="day"}if(!["day","any"].includes(t))return;const l=this.system.preparation??{};if(!(Number.isFinite(e)&&e>=0)&&(e=l.max||0),(e=Math.clamped(e,0,l.max||0))===(l.value||0)||!Number.isFinite(e))return;const c={system:{preparation:{value:e}}};return i?this.update(c,o):c}get spellLevel(){return this.system.level+(this.system.slOffset||0)}get casterLevel(){const e=this.spellbook;return e?e.cl.total+(this.system.clOffset||0):null}get spellbook(){const e=this.system.spellbook;return this.actor?.system.attributes?.spells.spellbooks[e]}getDC(e=null){return foundry.utils.logCompatibilityWarning("ItemSpellPF.getDC() is deprecated in favor of ItemAction.getDC()",{since:"PF1 v10",until:"PF1 v11"}),this.defaultAction?.getDC(e)??10}getSpellUses(e=!1){const t=this.system;if(t.atWill)return 1/0;const s=this.spellbook,a=s?.spontaneous??!1,i=t.level;return this.useSpellPoints()?e?s.spellPoints?.max??0:s.spellPoints?.value??0:a?t.preparation.value>0?e?s.spells?.["spell"+i]?.max||0:s.spells?.["spell"+i]?.value||0:0:e?t.preparation?.max??0:t.preparation?.value??0}useSpellPoints(){return this.spellbook?.spellPoints?.useSystem??!1}getSpellComponents({compact:e=!1}={}){const t=pf1.config.re.traitSeparator,s=this.system.components??{},a=this.system.materials??{},i=this.spellbook?.kind,n="divine"===i,o=[],r=pf1.config.spellComponents;s.verbal&&o.push(r.verbal),s.somatic&&o.push(r.somatic),s.thought&&o.push(r.thought),s.emotion&&o.push(r.emotion);const l=1,c=2,u=3;let p=s.divineFocus;if(n&&p===c&&e)p=l;else if(s.material){let t=r.material;i&&e||p!==c||(t=`${t}/${r.divineFocus}`),a.value&&!e&&(t=`${t} (${a.value})`),t&&o.push(t)}if(n&&p===u&&e)p=l;else if(s.focus){let t=r.focus;i&&e||p!==u||(t=`${t}/${r.divineFocus}`),a.focus&&!e&&(t=`${t} (${a.focus})`),t&&o.push(t)}return p===l&&o.push(r.divineFocus),r.value&&o.push(...s.value.split(t)),o}static getMinimumCasterLevelBySpellData(e){const t=Object.entries(e.system.learnedAt?.class??{})?.reduce(((e,[t,s])=>{const a=t.split("/");for(const t of a)e.push([t,s]);return e}),[]),s=[9,20];for(const[e,a]of t){s[0]=Math.min(s[0],a);const t=pf1.config.classCasterType[e]||"high";"high"===t?s[1]=Math.min(s[1],1+2*Math.max(0,a-1)):"med"===t?s[1]=Math.min(s[1],1+3*Math.max(0,a-1)):"low"===t&&(s[1]=Math.min(s[1],1+3*Math.max(0,a)))}return s}static _replaceConsumableConversionString(e,t){return e.replace(/@sl/g,`${t.sl}[${game.i18n.localize("PF1.SpellLevel")}]`).replace(/@cl/g,"@item.cl").replace(/@ablMod/g,`${t.ablMod}[${game.i18n.localize("PF1.AbilityScore")}]`)}static async toConsumable(e,t,{spellType:s="arcane"}={}){const a="wand"===t,i="potion"===t,n="scroll"===t,[o,r]=this.getMinimumCasterLevelBySpellData(e),l=e.sl??o??1,c=e.cl??r??1,u=e.system.materials?.gpValue??0,p={type:"consumable",name:e.name,system:{subType:t,spellType:e.spellType||s,description:{},identified:e.identified??!0,unidentified:{name:e.unidentifiedName||game.i18n.localize("PF1.CreateItem"+t.capitalize())},cl:c,aura:{school:e.system.school},uses:{per:"single"},price:0,hardness:0,hp:{value:1,max:1},actions:e.system.actions??[]}};0==p.system.actions.length&&p.system.actions.push(m);const m=p.system.actions[0]??pf1.components.ItemAction.defaultData;m.range??={},m.activation.type="standard",m.activation.unchained.type="action",m.activation.unchained.cost=2;const d={item:e.system,ablMod:Math.floor(l/2),sl:l,cl:c};a?(p.name=game.i18n.format("PF1.CreateItemWandOf",{name:e.name}),m.name=game.i18n.localize("PF1.Use"),p.img="systems/pf1/icons/items/inventory/wand-star.jpg",p.system.uses.pricePerUse=Math.floor(Math.max(.5,l)*c*750/50*100)/100+u,p.system.hardness=5,p.system.hp.max=5,p.system.hp.value=5,p.system.uses.maxFormula="50",p.system.uses.value=50,p.system.uses.max=50,p.system.uses.per="charges"):i?(p.name=game.i18n.format("PF1.CreateItemPotionOf",{name:e.name}),m.name=game.i18n.localize("PF1.Drink"),p.img="systems/pf1/icons/items/potions/minor-blue.jpg",p.system.price=Math.max(.5,l)*c*50+u,p.system.hardness=1):n&&(p.name=game.i18n.format("PF1.CreateItemScrollOf",{name:e.name}),m.name=game.i18n.localize("PF1.Use"),p.img="systems/pf1/icons/items/inventory/scroll-magic.jpg",p.system.price=Math.max(.5,l)*c*25+u);const convertNotes=e=>{for(const t of["attackNotes","effectNotes"]){const s=e[t];if(s)for(let e=0;e<s.length;e++)s[e]=this._replaceConsumableConversionString(s[e],d)}};for(const t of p.system.actions){if(i&&m===t)t.range.units="personal",delete t.range.value;else if(["close","medium","long"].includes(t.range?.units)){const e=pf1.config.distanceUnits[t.range.units],s=RollPF.safeRollSync(pf1.config.spellRangeFormulas[t.range.units],d).total??0;t.range.value=`${s}[${e}]`,t.range.units="ft"}t.measureTemplate?.type&&(t.measureTemplate.size=this._replaceConsumableConversionString(t.measureTemplate.size,d));const s=t.extraAttacks;if(s){s.formula?.count?.length&&(s.formula.count=this._replaceConsumableConversionString(s.formula.count,d)),s.formula?.bonus?.length&&(s.formula.bonus=this._replaceConsumableConversionString(s.formula.bonus,d));for(const e of s.manual??[])e.formula=this._replaceConsumableConversionString(e.formula,d)}for(const e of t.damage?.parts??[])e.formula=this._replaceConsumableConversionString(e.formula,d);if(t.save?.type){const s=t.save.dc;t.save.dc=`10 + ${e.sl}[${game.i18n.localize("PF1.SpellLevel")}] + ${Math.floor(e.sl/2)}[${game.i18n.localize("PF1.SpellcastingAbility")}]`,s?.length&&(t.save.dc+=` + (${s})[${game.i18n.localize("PF1.DCOffset")}]`)}convertNotes(t)}convertNotes(p.system);const h=new Item.implementation(e);h.reset();const g=h.getDescription({charcard:!1,header:!0,body:!0,rollData:d});return p.system.description.value=this._replaceConsumableConversionString(g,d),new ItemPF(foundry.utils.expandObject(p)).toObject()}static async toConsumablePrompt(e,{allowSpell:t=!0,spellType:s="arcane",actor:a}={}){const[i,n]=CONFIG.Item.documentClasses.spell.getMinimumCasterLevelBySpellData(e),getFormData=t=>{const s=foundry.utils.expandObject(new FormDataExtended(t.querySelector("form")).object);return foundry.utils.mergeObject(e,s),Number.isNaN(e.sl)&&(e.sl=1),e},createConsumable=(e,t)=>this.toConsumable(e,t,{spellType:e.spellType}),o={potion:{icon:'<i class="fas fa-prescription-bottle"></i>',label:game.i18n.localize("PF1.CreateItemPotion"),callback:e=>createConsumable(getFormData(e),"potion")},scroll:{icon:'<i class="fas fa-scroll"></i>',label:game.i18n.localize("PF1.CreateItemScroll"),callback:e=>createConsumable(getFormData(e),"scroll")},wand:{icon:'<i class="fas fa-magic"></i>',label:game.i18n.localize("PF1.CreateItemWand"),callback:e=>createConsumable(getFormData(e),"wand")},spell:{icon:'<i class="fas fa-hand-sparkles"></i>',label:game.i18n.localize("TYPES.Item.spell"),callback:()=>!1}};return t||delete o.spell,Dialog.wait({title:game.i18n.format("PF1.CreateItemForSpell",{name:e.name}),content:await renderTemplate("systems/pf1/templates/internal/create-consumable.hbs",{name:e.name,sl:i,cl:n,isGM:game.user.isGM,config:pf1.config,spellType:s,isNPC:"npc"===a?.type}),itemData:e,buttons:o,close:()=>null,default:"potion"},{classes:[...Dialog.defaultOptions.classes,"pf1","create-consumable"],jQuery:!1})}get canCast(){return foundry.utils.logCompatibilityWarning("ItemSpellPF.canCast is deprecated in favor of ItemBasePF.canUse and ItemAction.canUse",{since:"PF1 v10",until:"PF1 v11"}),this.canUse&&(this.defaultAction?.canUse??!0)}get canUse(){return!!this.system.atWill||(this.system.preparation?.value??0)>0}get isDomain(){return!0===this.system.domain}getDescription({chatcard:e=!1,data:t={},rollData:s,header:a=!0,body:i=!0}={}){return(a?renderCachedTemplate("systems/pf1/templates/internal/spell-description.hbs",{...t,...this.getDescriptionData({rollData:s}),chatcard:!0===e}):"")+(i?this.system.description.value:"")}getDescriptionData({rollData:e}={}){pf1.config.re.traitSeparator;const t=this.system,s=this.defaultAction,a=s?.data??{};e??=s?.getRollData()??this.getRollData();const i={school:pf1.config.spellSchools[t.school],subschool:t.subschool||"",descriptors:""},n={data:foundry.utils.mergeObject(this.system,t,{inplace:!1}),label:i};{const e=t.descriptors?.value??[],s=t.descriptors?.custom??[];i.descriptors=[...e.map((e=>pf1.config.spellDescriptors[e]??e)),...s].filter((e=>e)).join(", ")}n.learnedAt={},t.learnedAt&&["class","domain","subDomain","elementalSchool","bloodline"].forEach((e=>n.learnedAt[e]=Object.entries(t.learnedAt[e]).map((([e,t])=>`${e} ${t}`)).join(", ")));const o=game.settings.get("pf1","unchainedActionEconomy"),r=s?.activation;if(null!=r){const e=r.cost,t=r.type,s=o?pf1.config.abilityActivationTypes_unchained:pf1.config.abilityActivationTypes,a=o?pf1.config.abilityActivationTypesPlurals_unchained:pf1.config.abilityActivationTypesPlurals;t&&(null!=a[t]?i.castingTime=1===e?""+s[t]:""+a[t]:i.castingTime=""+s[t]),Number.isNaN(e)||null==i.castingTime||(i.castingTime=`${e} ${i.castingTime}`)}i.components=this.getSpellComponents().join(", ");const l=a.duration;switch(l?.units){case"spec":i.duration=l.value;break;case"seeText":case"inst":case"perm":i.duration=pf1.config.timePeriods[l.units];break;case"turn":{const e=pf1.config.timePeriods[l.units];i.duration=game.i18n.format("PF1.Time.Format",{value:1,unit:e});break}case"round":case"minute":case"hour":case"day":case"month":case"year":if(l.value){const t=pf1.config.timePeriods[l.units],s=Roll.defaultImplementation.safeRollAsync(l.value,e),a=s.total;s.err?console.error("Error in duration formula:",{formula:l.value,rollData:e,roll:s},s.err,this):i.duration=game.i18n.format("PF1.Time.Format",{value:a,unit:t}),i.durationFormula=l.value,n.variableDuration=/@\w/.test(l.value)}}i.duration&&l.dismiss&&"spec"!==l.units&&(i.duration+=" "+game.i18n.localize("PF1.DismissableMark"));{const e=a.spellEffect;e&&(i.effect=e)}{const e=a.target?.value;e&&(i.targets=e)}{const t=a.range?.units,s=a.range?.value;if(null!=t&&"none"!==t){i.range=pf1.config.distanceUnits[t];const a=pf1.utils.getDistanceSystem();switch(t){case"close":i.range=`${i.range} ${game.i18n.localize("metric"==a?"PF1.SpellRangeShortMetric":"PF1.SpellRangeShort")}`;break;case"medium":i.range=`${i.range} ${game.i18n.localize("metric"==a?"PF1.SpellRangeMediumMetric":"PF1.SpellRangeMedium")}`;break;case"long":i.range=`${i.range} ${game.i18n.localize("metric"==a?"PF1.SpellRangeLongMetric":"PF1.SpellRangeLong")}`;break;case"ft":case"mi":if(s){let a=calculateRangeFormula(s,t,e);"mi"===t&&(a/=5280);const[n,o]=pf1.utils.convertDistance(a,t),r=pf1.config.measureUnitsShort[o];i.range=`${n} ${r}`}else i.range="";break;case"spec":i.range=s||i.range}}}{const e=a.area;e&&(i.area=e)}{const e=a.save?.description;i.savingThrow=e||game.i18n.localize("PF1.None");const s=t.sr;i.sr=(!0===s?game.i18n.localize("PF1.Yes"):game.i18n.localize("PF1.No")).toLowerCase(),"personal"!==a.range?.units&&(n.useDCandSR=!0)}return(a.save?.harmless??!1)&&(i.harmless=game.i18n.localize("PF1.Yes").toLowerCase()),n}get slotCost(){return this.system.atWill?0:this.system.slotCost??1}}class ItemWeaponPF extends ItemPhysicalPF{async _preUpdate(e,t,s){if(await super._preUpdate(e,t,s),!e.system)return;const a=e.system?.subType;if(null!=a&&a!==this.system.subType){const t=e.system.weaponSubtype??this.system.weaponSubtype??"",s=Object.keys(pf1.config.weaponTypes[a]).filter((e=>!e.startsWith("_")));t&&s.includes(t)||(e.system.weaponSubtype=s[0])}}getLabels({actionId:e,rollData:t}={}){const s=super.getLabels({actionId:e,rollData:t}),{weaponTypes:a}=pf1.config;let i=this.system.subType;const n=Object.keys(a);n.includes(i)||(i=n[0]);let o=this.system.weaponSubtype;const r=Object.keys(a[i]).filter((e=>!e.startsWith("_")));return r.includes(o)||(o=r[0]),s.subType=a[i]._label,s.childType=a[i][o],s.properties=[...Object.entries(this.system.properties??{}).filter((([e,t])=>t)).map((([e])=>pf1.config.weaponProperties[e]||e))],s}getTypeChatData(e,t,s,a,{actionId:i=null,chatcard:n=!1}={}){super.getTypeChatData(e,t,s,a,{actionId:i,chatcard:n}),this.showUnidentifiedData||t.weaponSubtype&&s.push(t.weaponSubtype)}adjustContained(){super.adjustContained(),this.system.equipped=!1,this.system.carried=!0}get canEquip(){return!this.inContainer}getProficiency(e=!0){if(!e)throw Error("Weapons do not support non-weapon proficiency");return this.isProficient}get isProficient(){return!!this.system.proficient||(this.actor?.hasWeaponProficiency?.(this)??!0)}getWeightMultiplier(){return this._getArmorWeightMultiplier()}}class ItemImplantPF extends ItemPhysicalPF{_onCreate(e,t,s){super._onCreate(e,t,s),!0===this.system.implanted&&this.executeScriptCalls("implant",{implanted:!0})}_onDelete(e,t){super._onDelete(e,t),game.users.get(t)?.isSelf&&!0===this.system.implanted&&this.executeScriptCalls("implant",{implanted:!1})}_onUpdate(e,t,s){super._onUpdate(e,t,s);const a=e.system?.implanted;null!=a&&this.executeScriptCalls("implant",{implanted:a})}getLabels({actionId:e,rollData:t}={}){const s=super.getLabels({actionId:e,rollData:t});if(s.subType=pf1.config.implantTypes[this.subType],"cybertech"===this.subType)s.slot=pf1.config.implantSlots.cybertech[this.system.slot]??pf1.config.implantSlots.cybertech.none;return s.equipped=this.system.implanted?'<i class="fas fa-check"></i>':'<i class="fas fa-times"></i>',s}adjustContained(){this.system.carried=!0,this.system.implanted=!1}prepareWeight(){super.prepareWeight();const e=this.system,t=e.weight;if(e.implanted&&(t.total=0,t.converted.total=0,e.quantity>1)){const s=t.value*this.getWeightMultiplier();t.total=s*(e.quantity-1),t.converted.total=pf1.utils.convertWeight(t.total)}}get isActive(){return!(this.system.quantity<=0)&&(("cybertech"!==this.subType||!this.system.disabled)&&(this.system.implanted||!1))}get activeState(){return this.system.implanted||!1}async setActive(e,t){return this.update({"system.implanted":e},t)}}const c=Object.freeze(Object.defineProperty({__proto__:null,ItemAttackPF,ItemBasePF,ItemBuffPF,ItemClassPF,ItemConsumablePF,ItemContainerPF,ItemEquipmentPF,ItemFeatPF,ItemImplantPF,ItemLootPF,ItemPF,ItemPhysicalPF,ItemRacePF,ItemSpellPF,ItemWeaponPF},Symbol.toStringTag,{value:"Module"}));class Spellbook{key;actor;data;spells=[];level={};constructor(e,t){this.actor=t,this.data=t.system.attributes.spells.spellbooks[e]}addSpell(e){this.spells.push(e);const t=e.system.level;Math.clamped(t,0,9)===t?(this.level[t]??=new SpellbookLevel(this),this.level[t].spells.push(e)):console.error("Spell with impossible spell level:",e)}}class SpellbookLevel{book;spells=[];constructor(e){this.book=e}}class SpellbookSlots{level=0;max=0;value=0;domain=0;domainMax=0;domainUnused=0;used=0;total=0;constructor({max:e=0,domain:t=0,level:s=0}={}){this.level=s,0===s&&(t=0),this.value=e+t,this.max=e,this.domain=t,this.domainMax=t,this.domainUnused=t,this.total=e+t}}class SpellRanges{close;medium;long;cl;constructor(e){this.cl=e,this.close=pf1.utils.calculateRange(null,"close",{cl:e})[0],this.medium=pf1.utils.calculateRange(null,"medium",{cl:e})[0],this.long=pf1.utils.calculateRange(null,"long",{cl:e})[0]}}class SpellbookMode{raw;get isHybrid(){return"hybrid"===this.raw}get isPrestige(){return"prestige"===this.raw}get isSpontaneous(){return"spontaneous"===this.raw}get isPrepared(){return"prepared"===this.raw}get usesSpellpoints(){return!0===this.book.spellPoints?.useSystem}get isSemiSpontaneous(){return this.isSpontaneous||this.isHybrid||this.isPrestige||this.usesSpellpoints||!1}constructor(e){this.book=e;let t=e.spellPreparationMode;t||(t=e.spellPreparationMode="spontaneous"),this.raw=t}}const u=Object.freeze(Object.defineProperty({__proto__:null,SpellRanges,Spellbook,SpellbookLevel,SpellbookMode,SpellbookSlots},Symbol.toStringTag,{value:"Module"}));Hooks.on("getActorDirectoryEntryContext",(function sharedVision(e,t){t.push({name:"PF1.Application.VisionSharing.Label",icon:'<i class="fas fa-eye"></i>',condition:()=>game.user.isGM,callback:([e])=>game.actors.get(e.dataset.documentId)?.visionSharingSheet?.render(!0,{focus:!0,top:Math.min(e.offsetTop,window.innerHeight-350),left:window.innerWidth-720})})}));class VisionSharingSheet extends ActorSheet{static get defaultOptions(){const e=super.defaultOptions;return{...e,classes:[...e.classes,"vision-sharing"],template:"systems/pf1/templates/apps/vision-sharing.hbs",width:400,height:"auto",closeOnSubmit:!0,submitOnClose:!1,submitOnChange:!1,sheetConfig:!1}}get title(){let e=game.i18n.localize("PF1.Application.VisionSharing.Label")+": "+this.actor.name;return this.actor.token&&(e+="["+game.i18n.localize("Token")+"]"),e}async getData(){const e={levels:{false:"PF1.No",true:"PF1.Yes"},users:game.users.players.reduce(((e,t)=>(e[t.id]={user:t,level:null},e)),{})},t=this.actor.getFlag("pf1","visionSharing");return e.default=(t?.default??!1)+"",t?.users&&Object.entries(t.users).forEach((([t,s])=>e.users[t].level=(s??null)+"")),e}_getHeaderButtons(){return super._getHeaderButtons().filter((e=>"import"!==e.class))}async _updateObject(e,t){t=foundry.utils.expandObject(t);for(const[e,s]of Object.entries(t.users))s?t.users[e]=!!s:t.users["-="+e]=null;await this.actor.setFlag("pf1","visionSharing",t)}}class Resource{get id(){return this._id}#e;get item(){return this.#e}async add(e){return this.item.addCharges(e)}constructor(e){this.#e=e;const t=e.system.tag;Object.defineProperties(this,{value:{get(){return this.item.charges},enumerable:!0},max:{get(){return this.item.maxCharges},enumerable:!0},_id:{value:e.id,enumerable:!0},tag:{value:t,enumerable:!0}})}}class ActorPF extends ActorBasePF{constructor(...e){super(...e),void 0===this.itemFlags&&(this.itemFlags={boolean:{},dictionary:{}}),void 0===this.changeItems&&(this.changeItems=[]),void 0===this.changes&&(this.changes=new Collection),void 0===this._queuedUpdates&&(this._queuedUpdates={}),void 0===this._rollData&&(this._rollData=null),void 0===this.containerItems&&(this.containerItems=[]),void 0===this._states&&(this._states={}),this._visionSharingSheet??=null}static getDefaultArtwork(e){const t=super.getDefaultArtwork(e),s=pf1.config.defaultIcons.actors[e?.type];return s&&(t.img=s,t.texture.src=s),t}async _preCreate(e,t,s){await super._preCreate(e,t,s);const a=this.preCreateData(e,t,s);Object.keys(a).length&&this.updateSource(a)}preCreateData(e,t,s){return{}}static chatListeners(e){e.on("click","button[data-action], a[data-action]",this._onChatCardButtonAction.bind(this))}static async _onChatCardButtonAction(e){e.preventDefault();const t=e.currentTarget,s=t.closest(".chat-card"),a=t.dataset.action;if("defense-save"===a){const a=s.closest(".chat-message").dataset.messageId,i=game.messages.get(a),n=ChatMessage.getSpeakerActor(i.speaker),o=t.dataset.save;n.rollSavingThrow(o,{event:e})}else if("save"===a){const s=t.dataset.type;let a=canvas.tokens.controlled.map((e=>e.actor)).filter((e=>!!e));0==a.length&&game.user.character&&(a=[game.user.character]);let i=!1;for(const t of a)t?.rollSavingThrow(s,{event:e,noSound:i}),i=!0}else"open-compendium-entry"===a&&openJournal(t.dataset.compendiumEntry)}get spellFailure(){return this.itemTypes.equipment.filter((e=>!0===e.system.equipped)).reduce(((e,t)=>e+(t.system.spellFailure||0)),0)}get race(){return this.itemTypes.race[0]??null}static _getSourceLabel(e){const t=e.change?.parent;if(t){const s=t.subType;let a;return a=s&&((t.system.identified??1)||game.user.isGM)?game.i18n.localize(`PF1.Subtypes.Item.${t.type}.${s}.Single`):game.i18n.localize("TYPES.Item."+t.type),`${e.name} (${a})`}return e.name}get _skillTargets(){const e=[];for(const[t,s]of Object.entries(this.system.skills))if(null!=s){e.push("skill."+t);for(const a of Object.keys(s.subSkills??[]))e.push(`skill.${t}.${a}`)}return e}get _spellbookTargets(){const e=[];for(const[t,s]of Object.entries(this._source.system.attributes?.spells?.spellbooks??{}))s.inUse&&e.push("cl.book."+t,"concn."+t);return e}_prepareContainerItems(){const e=[];function getContainerContents(t){"container"===t.type&&t.items.forEach((t=>{e.push(t),getContainerContents(t)}))}this.itemTypes.container.forEach((e=>{getContainerContents(e)})),this.containerItems=e}_prepareItemFlags(){const e=this.allItems,t={},s={};for(const a of e){if(a.isActive){const e=a.system.flags?.boolean||{};for(const s of Object.keys(e))t[s]??={sources:[]},t[s].sources.push(a)}const e=a.system.tag;if(e){const t=Object.entries(a.system.flags?.dictionary||{});if(t.length){s[e]||={};for(const[i,n]of t){if(void 0!==s[e][i]&&this.isOwner){const t=game.i18n.format("PF1.Warning.DuplicateDFlag",{actor:this.uuid,item:a.name,key:i,tag:e});ui.notifications.warn(t,{console:!1}),console.warn(t,a)}s[e][i]=a.isActive?n:0}}}}this.itemFlags={boolean:t,dictionary:s}}_prepareChanges(){this.changeItems=this.items.filter((e=>e.hasChanges&&e.isActive));const e=[];for(const t of this.changeItems)e.push(...t.changes);addDefaultChanges.call(this,e);const t=new Collection;for(const s of e){const e=`${s.parent?.id??"Actor"}-${s._id}`;t.set(e,s)}this.changes=t}applyActiveEffects(){super.applyActiveEffects(),this.prepareConditions(),this._prepareContainerItems(),this._prepareItemFlags(),this._prepareChanges()}async expireActiveEffects({combat:e,timeOffset:t=0,event:s=null,initiative:a=null}={},i={}){if(!this.isOwner)throw Error("Must be owner");const n=game.time.worldTime+t,o=this._effectsWithDuration.filter((t=>{const{seconds:i,startTime:o}=t.duration,{rounds:r,startRound:l}=t.duration;let c=1/0;if(Number.isFinite(i)&&i>=0){c=i-(n-(o??0))}else if(r>0&&e){c=(r-(e.round-(l??0)))*CONFIG.time.roundTime}const u=t.getFlag("pf1","duration")??{},p=u.end||"turnStart";return!(c>0)&&(null!==a?"initiative"!==p?c<0:u.initiative<=a:(0!==c||"turnEnd"!==p||"turnStart"!==s)&&c<=0)})),r=[],l=[],c=[];for(const e of o){let t;t=e.parent instanceof Item?e.parent:e.origin?fromUuidSync(e.origin,{relative:this}):null,"buff"===t?.type?c.push({_id:t.id,"system.active":!1}):e.getFlag("pf1","autoDelete")?l.push(e.id):r.push({_id:e.id,disabled:!0})}if(i.pf1??={},i.pf1.reason="duration",l.length){const e=foundry.utils.mergeObject({render:!c.length&&!r.length},i);await this.deleteEmbeddedDocuments("ActiveEffect",l,e)}if(r.length){const e=foundry.utils.mergeObject({render:!c.length},i);await this.updateEmbeddedDocuments("ActiveEffect",r,e)}c.length&&await this.updateEmbeddedDocuments("Item",c,i)}prepareBaseData(){this._initialized=!1,super.prepareBaseData(),this.system.details??={},this.system.details.level??={},this.sourceInfo={},this.changeFlags={},this.equipment={shield:{type:pf1.config.shieldTypes.none,id:void 0},armor:{type:pf1.config.armorTypes.none,id:void 0}},this.classes={},this.system.resources??={},this._resetInherentTotals(),this._prepareNaturalReach(),Hooks.events.pf1PrepareBaseActorData?.length&&Hooks.callAll("pf1PrepareBaseActorData",this);const e=this.itemTypes.class,{level:t,mythicTier:s}=e.reduce(((e,t)=>(t.reset(),e.level+=t.hitDice,e.mythicTier+=t.mythicTier,e)),{level:0,mythicTier:0});this.system.details.level.value=t,this.system.details.mythicTier=s;for(const e of Object.values(this.system.abilities)){const t=e.value;null===t?(e.total=null,e.base=null):(e.undrained=t,e.total=t-e.drain,e.penalty=(e.penalty||0)-Math.abs(e.userPenalty||0),e.base=e.total)}this.refreshAbilityModifiers();{const t="system.attributes.bab.total",s=Math.floor(e.reduce(((e,s)=>{const a=s.system.babBase;return 0!==a&&getSourceInfo(this.sourceInfo,t).positive.push({name:s.name,value:fractionalToString(a)}),e+a}),0));this.system.attributes.bab.total=Math.floor(s),this.system.attributes.bab.value&&(this.system.attributes.bab.total+=this.system.attributes.bab.value??0)}this._prepareClassSkills(),foundry.utils.setProperty(this.system,"attributes.hd.total",this.system.details.level.value)}prepareConditions(){this.system.conditions={};const e=this.system.conditions;for(const t of pf1.registry.conditions.keys())e[t]=!1;for(const t of this.statuses)t in e&&(e[t]=!0);Object.getOwnPropertyDescriptor(this.system.attributes,"conditions")?.get||(delete this.system.attributes.conditions,Object.defineProperty(this.system.attributes,"conditions",{get:()=>(foundry.utils.logCompatibilityWarning("actor.system.attributes.conditions is deprecated in favor of actor.system.conditions and actor.statuses",{since:"PF1 v10",until:"PF1 v11"}),e),enumerable:!1}))}_prepareNaturalReach(){this.system.traits.reach??={};const e=this.system.traits.reach;e.base=this.constructor.getReach(this.system.traits.size,this.system.traits.stature),e.natural=e.base,e.total={...e.base},getSourceInfo(this.sourceInfo,"system.traits.reach.total.melee").positive.push({name:game.i18n.localize("PF1.BuffTarReach"),modifier:"base",value:e.base.melee}),getSourceInfo(this.sourceInfo,"system.traits.reach.total.reach").positive.push({name:game.i18n.localize("PF1.BuffTarReach"),modifier:"base",value:e.base.reach})}_prepareClassSkills(){const e=new Set;this.items.filter((e=>["class","race","feat"].includes(e.type))).forEach((t=>{for(const[s,a]of Object.entries(t.system.classSkills||{}))!0===a&&e.add(s)}));for(const[t,s]of Object.entries(this.system.skills))if(s){this.system.skills[t].cs=e.has(t);for(const a of Object.keys(s.subSkills??{}))foundry.utils.setProperty(s,`subSkills.${a}.cs`,e.has(t))}else console.warn(`Bad skill data for "${t}"`,this)}hasArmorProficiency(e){if("equipment"!==e.type||!["armor","shield"].includes(e.system.subType))return!0;const t=this.system.traits?.armorProf;if(!t)return!1;if(t.total.includes(e.baseArmorProficiency))return!0;const s=t.customTotal??[];if(0==s.length)return!1;const a=e.system.baseTypes??[];return 0!=a.length&&s.some((e=>a.includes(e)))}hasWeaponProficiency(e,{override:t=!0}={}){if(t&&e.system.proficient)return!0;const s=this.system.traits?.weaponProf;if(!s)return!1;if("weapon"===e.type&&s.total.includes(e.subType))return!0;const a=s.customTotal??[];if(0==a.length)return!1;const i=e.system.baseTypes??[];return 0!=i.length&&a.some((e=>i.includes(e)))}_updateSpellBook(e,t,s){const a=this.system,i=a.attributes.spells.spellbooks[e];if(!i)return void console.error(`Spellbook data not found for "${e} on actor`,this);if(i.isSchool="divine"!==i.kind,i.label=i.name||game.i18n.localize("PF1.SpellBook"+e.capitalize()),!i.inUse)return;if(i.name)i.label=i.name;else if(i.class)if("_hd"===i.class)i.label=i.name||game.i18n.localize("PF1.SpellBookSpelllike");else{const e=this.classes[i.class]?._id,t=this.items.get(e);t&&(i.label=t.name)}t??=this.getRollData({refresh:!0}),s??=this._generateSpellbookCache();const n=s.books[e],o=a.abilities[i.ability],r=RollPF.safeRollSync(i.spellSlotAbilityBonusFormula||"0",t).total,l=(o?.total??10)+r,c=pf1.utils.getAbilityModifier(l);let u=0;{const s=`system.attributes.spells.spellbooks.${e}.cl.total`,n=i.cl.formula||"0";let o=0;if("npc"===this.type){const e=i.cl.base||0;o+=e,u+=e,setSourceInfoByName(this.sourceInfo,s,game.i18n.localize("PF1.Base"),e)}if("_hd"===i.class){const e=a.attributes.hd.total;o+=e,u+=e,setSourceInfoByName(this.sourceInfo,s,game.i18n.localize("PF1.HitDie"),e)}else if(i.class&&t.classes[i.class]){const e=t.classes[i.class].unlevel;o+=e,u+=e,setSourceInfoByName(this.sourceInfo,s,t.classes[i.class].name,e)}if(i.autoSpellLevelCalculation){const e=i.cl.autoSpellLevelCalculationFormula||"0",a=RollPF.safeRollSync(e,t).total??0,n=Math.clamped(o+a,1,20);i.cl.autoSpellLevelTotal=n,u+=a,0!==a&&setSourceInfoByName(this.sourceInfo,s,game.i18n.localize("PF1.AutoSpellClassLevelOffset.Formula"),a)}const r=RollPF.safeRollSync(n,t).total;u+=r,r>0?setSourceInfoByName(this.sourceInfo,s,game.i18n.localize("PF1.CasterLevelBonusFormula"),r):r<0&&setSourceInfoByName(this.sourceInfo,s,game.i18n.localize("PF1.CasterLevelBonusFormula"),r,!1),t.attributes.energyDrain&&(u=Math.max(0,u-t.attributes.energyDrain),setSourceInfoByName(this.sourceInfo,s,game.i18n.localize("PF1.Condition.energyDrain"),-Math.abs(t.attributes.energyDrain),!1)),u+=i.cl.total??0,u+=i.cl.bonus??0,i.cl.total=u}{Number.isFinite(i.concentration)&&(console.error(`Bad spellbook concentration value "${i.concentration}" in spellbook "${e}"`),i.concentration={});const s=i.concentrationFormula,n=s.length?RollPF.safeRollSync(s,t,void 0,void 0,{minimize:!0}):{total:0,isDeterministic:!0},o=n.isDeterministic?n.total:0,r=a.abilities[i.ability]?.mod??0,l=u+r+o,c=i.concentration.total??0;setSourceInfoByName(this.sourceInfo,`system.attributes.spells.spellbooks.${e}.concentration.total`,game.i18n.localize("PF1.CasterLevel"),u,!1),setSourceInfoByName(this.sourceInfo,`system.attributes.spells.spellbooks.${e}.concentration.total`,game.i18n.localize("PF1.SpellcastingAbility"),r,!1),setSourceInfoByName(this.sourceInfo,`system.attributes.spells.spellbooks.${e}.concentration.total`,game.i18n.localize("PF1.ByBonus"),n.isDeterministic?n.total:n.formula,!1),i.concentration??={},i.concentration.total=c+l}const getAbilityBonus=e=>0!==e?ActorPF.getSpellSlotIncrease(c,e):0,p=new SpellbookMode(i),m=i.autoSpellLevelCalculation;m?i.spellPoints.useSystem=!1:i.autoSpellLevels=!1;const d=!0===i.spellPoints.useSystem;i.spontaneous=p.isSemiSpontaneous;const h=i.spontaneous;if(m){let e=i.casterType;if(void 0===pf1.config.casterProgression.castsPerDay[p.raw]?.[e]){const t=Object.keys(pf1.config.casterProgression.castsPerDay[p.raw]);p.isPrestige?i.casterType=e=t[0]:i.casterType=e=t.at(-1)}const s=pf1.config.casterProgression[h?"castsPerDay":"spellsPreparedPerDay"][p.raw][e];let a=Math.clamped(i.cl.autoSpellLevelTotal,1,20);if(!Number.isSafeInteger(a)){const e=`Actor ${this.id} has invalid caster class level.`;console.error(e,a),ui.notifications?.error(e),a=Math.floor(a)}t.ablMod=c;const n=i[h?"castPerDayAllOffsetFormula":"preparedAllOffsetFormula"]||"0",o=RollPF.safeRollSync(n,t).total??0;for(let n=0;n<10;n++){const r=i.spells["spell"+n],l=(0===n&&h?pf1.config.casterProgression.spellsPreparedPerDay[p.raw][e][a-1][n]:s[a-1][n])??NaN;r.base=l||0;const c=r[h?"castPerDayOffsetFormula":"preparedOffsetFormula"]||"0",u=0===n&&i.hasCantrips||Number.isFinite(l)?l+getAbilityBonus(n)+o+(RollPF.safeRollSync(c,t).total??0):NaN;r.max=u,Number.isFinite(r.value)||(r.value=u)}}else for(let e=i.hasCantrips?0:1;e<10;e++){const t=i.spells["spell"+e];let s=t.base;Number.isNaN(s)||null===s?(t.base=null,t.max=0):i.autoSpellLevels&&s>=0?(s+=getAbilityBonus(e),t.max=s):t.max=s||0,Number.isFinite(t.value)||(t.value=t.max)}for(let e=0;e<10;e++)i.spells["spell"+e].value||=0;{const e={};for(let t=0;t<10;t++)e[t]=new SpellbookSlots({level:t,max:i.spells["spell"+t].max||0,domain:i.domainSlotValue||0});for(let t=0;t<10;t++){const s=n.level[t]?.spells??[],a=e[t],o=i.spells["spell"+t];if(o.slots={used:0,max:a.max},!h){for(const e of s)if(Number.isFinite(e.maxCharges)){const t=e.slotCost,s=e.maxCharges*t;e.isDomain?a.domain-=s:a.used+=s,a.value-=s}o.value=a.value,o.slots.used=a.used,o.slots.remaining=o.slots.max-o.slots.used,o.slots.excess=Math.max(0,-o.slots.remaining),o.domain={max:a.domainMax,remaining:a.domain},o.domain.excess=Math.max(0,-o.domain.remaining),o.mismatchSlots=-(o.slots.excess+o.domain.excess-Math.max(0,o.slots.remaining)),0==o.mismatchSlots&&(o.mismatchSlots=o.slots.remaining),o.invalidSlots=0!=o.mismatchSlots||0!=o.slots.remaining}}const s=(o?.total??0)-10,a=i.preparedAllOffsetFormula||"0",r=RollPF.safeRollSync(a,t).total??0,l=i.casterType||"high",c=Math.floor(Math.clamped(i.cl.autoSpellLevelTotal,1,20));for(let a=0;a<10;a++){const o=i.spells["spell"+a];s<a&&(o.hasIssues=!0,o.lowAbilityScore=!0),o.known={unused:0,max:0};const u=a>0?e[a].domainMax??0:0;o.preparation={unused:0,max:0,domain:u};let d=0;if(p.isPrepared)d=o.value,o.preparation.max=o.max+u;else{let s=m?pf1.config.casterProgression.spellsPreparedPerDay[p.raw][l]?.[c-1][a]:o.max;s+=r;const i=o.preparedOffsetFormula||"0";s+=RollPF.safeRollSync(i,t).total??0,o.known.max=s,Number.isNaN(s)&&(o.hasIssues=!0,o.lowLevel=!0);let u=e[a].domain;const h=n.level[a]?.spells.reduce(((e,t)=>{const{preparation:s,atWill:a,domain:i}=t.system;if(!a&&s.value){const s=t.slotCost;i&&u>0?u-=s:e+=s}return e}),0)??0;e[a].domainUnused=u,e[a].used=h,d=s-h}const g=e[a],f=a>0?g.domain:0;o.remaining=d,0==d&&f<=0||(o.hasIssues=!0,h?(o.known.unused=Math.max(0,d),o.known.excess=-Math.min(0,d),m&&(o.invalidKnown=0!=o.known.unused||0!=o.known.excess,o.mismatchKnown=d)):o.preparation.unused=Math.max(0,d))}}if(d){const e=i.spellPoints.maxFormula||"0";t.cl=i.cl.total,t.ablMod=c;const s=i.class??"";t.classLevel="_hd"===s?t.attributes.hd?.total??t.details.level.value:t.classes[s]?.level||0;const a=RollPF.safeRollSync(e,t);i.spellPoints.max=a.total}else i.spellPoints.max=0;i.range=new SpellRanges(i.cl.total)}_generateSpellbookCache(){const e=Object.keys(this.system.attributes.spells.spellbooks),t=this.itemTypes.spell,s={spells:t,books:{}};return e.forEach((e=>{s.books[e]??=new Spellbook(e,this)})),t.forEach((t=>{const a=t.system.spellbook;if(!e.includes(a))return console.error("Spell has invalid book",t);s.books[a].addSpell(t)})),s}updateSpellbookInfo(e,t){e??=this.getRollData({refresh:!0}),t??=this._generateSpellbookCache();const s=this.system.attributes.spells.spellbooks;for(const a of Object.keys(s))this._updateSpellBook(a,e,t);Object.defineProperty(this.system.attributes.spells,"usedSpellbooks",{get:()=>(foundry.utils.logCompatibilityWarning("actor.system.attributes.spells.usedSpellbooks is deprecated with no replacement.",{since:"PF1 v10",until:"PF1 v11"}),Object.keys(s).filter((e=>s[e].inUse)))})}refreshDerivedData(){this.system.attributes.maxDexBonus=null,this.system.abilities.dex.maxBonus=this.system.abilities.dex.mod;{const e=this._computeEncumbrance(),t=this._applyArmorPenalties();this.system.attributes.acp.encumbrance=e.acp,this.system.attributes.acp.gear=t.acp,this.system.attributes.acp.total=Math.max(e.acp,t.acp),this.system.attributes.acp.skill=Math.max(e.acp,t.acpSkill),null==e.maxDexBonus&&null==t.maxDexBonus||(this.system.attributes.maxDexBonus=Math.min(e.maxDexBonus??1/0,t.maxDexBonus??1/0),this.system.abilities.dex.maxBonus=Math.min(this.system.abilities.dex.maxBonus,this.system.attributes.maxDexBonus))}}prepareDerivedData(){super.prepareDerivedData();const e=this.race;if(e){const t=e?.system.creatureType||"humanoid";this.system.traits??={},this.system.traits.type=t,this.system.traits.humanoid="humanoid"===t,this.system.attributes??={},this.system.attributes.quadruped??=e?.system.quadruped??!1}this.prepareProficiencies(),delete this._rollData,this.items.forEach((e=>{e._prepareDependentData(!1),this.updateItemResources(e)})),applyChanges.call(this);const t=this.system.traits.reach.total;t.melee<0&&(t.melee=0),t.reach<0&&(t.reach=0),this.prepareSpecificDerivedData(),this.prepareCMB(),this.prepareItemLinks(),this._prepareOverlandSpeeds(),delete this._rollData,this.items.forEach((e=>{e._prepareDependentData(!0),this.updateItemResources(e,{warnOnDuplicate:!1})})),this._initialized=!0,this._setSourceDetails()}_prepareOverlandSpeeds(){for(const e of Object.values(this.system.attributes?.speed??{}))e.overland=e.total>0?pf1.utils.overlandSpeed(e.total).speed:0}prepareProficiencies(){const e=this.system,t={armorProf:pf1.config.armorProficiencies,weaponProf:pf1.config.weaponProficiencies,languages:pf1.config.languages};for(const[s,a]of Object.entries(t)){const t=e.traits[s]?.custom||[],i=this.items.reduce(((e,i)=>{if(foundry.utils.hasProperty(i,"system."+s)){let n=getSourceInfo(this.sourceInfo,"system.traits."+s).positive.find((e=>e.name===i.name));const o=!!n;n?"string"==typeof n.value&&(n.value=n.value.split(", ")):n={name:i.name,value:[]};for(const t of i.system[s].value)n.value.includes(t)||n.value.push(a[t]),e.includes(t)||e.push(t);const r=i.system[s].custom||[];n.value.push(...r),t.push(...r),n.value.length>0&&(o&&(n.value=[...new Set(n.value)]),n.value=n.value.join(", "),o||getSourceInfo(this.sourceInfo,"system.traits."+s).positive.push(n))}return e}),[...e.traits[s]?.value??[]]);e.traits[s]??={},e.traits[s].total=[...i],e.traits[s].customTotal=[...t]}}prepareCMB(){const e=this.system.attributes.attack.shared??0,t=this.system.attributes.attack.general??0,s=this.system.attributes.cmbAbility,a=this.system.abilities[s]?.mod??0,i=this.system.traits.size,n=e+t+(pf1.config.sizeSpecialMods[i]??0)+(this.system.attributes.cmb.bonus??0)+a;this.system.attributes.cmb.total=n}prepareSpecificDerivedData(){Hooks.events.pf1PrepareDerivedActorData?.length&&Hooks.callAll("pf1PrepareDerivedActorData",this),this.refreshDerivedData();const e=this.system.attributes,t=this.system.abilities;for(const e of Object.keys(t)){const s=t[e].base,a=t[e].penalty||0,i=t[e].damage;t[e].baseMod=pf1.utils.getAbilityModifier(s,{penalty:a,damage:i})}const s=this.system,a=s,i=game.settings.get("pf1","healthConfig"),n={up:Math.ceil,nearest:Math.round,down:Math.floor}[i.rounding];for(const t of["hp","vigor"])e[t].max=n(e[t].max);for(const e of["hp","wounds","vigor"]){const t=this.system.attributes[e];Number.isFinite(t?.offset)&&(t.value=t.max+t.offset)}{const t=e.bab.total-e.acp.attackPenalty-(e.energyDrain??0);e.attack.shared=t}this.updateWoundThreshold();for(const e of pf1.config.arbitrarySkills){if(null==a.skills[e])continue;const t=a.skills[e];t.subSkills=t.subSkills||{};for(const e of Object.keys(t.subSkills))null==t.subSkills[e]&&delete t.subSkills[e]}for(const e of Object.keys(a.skills)){null==a.skills[e]&&delete a.skills[e]}for(const e of Object.keys(a.skills))if(pf1.config.backgroundSkills.includes(e)){const t=a.skills[e];t.background=!0;for(const e of Object.keys(t.subSkills??{}))t.subSkills[e].background=!0}for(const t of["ac.normal.total","ac.shield.total","ac.natural.total"]){const a=foundry.utils.getProperty(s,t);if(a)for(const t of["normal","flatFooted"])e.ac[t].total+=a}{const s=e.ac.normal.ability??"dex",a=e.ac.touch.ability??"dex",i=e.cmd.dexAbility??"dex";let n=t[s]?.mod??0,o=t[a]?.mod??0;const r=t[i]?.mod??0;this.changeFlags.loseDexToAC&&(n=Math.min(n,0),o=Math.min(o,0));const l=e.maxDexBonus??null,c={normal:null!==l?Math.min(l,n):n,touch:null!==l?Math.min(l,o):o,flatFooted:Math.min(0,n)},u={normal:s,touch:a,flatFooted:s},p={total:r,flatFootedTotal:Math.min(0,r)};for(const[t,s]of Object.entries(c))e.ac[t].total+=s,getSourceInfo(this.sourceInfo,`system.attributes.ac.${t}.total`).positive.push({value:s,name:pf1.config.abilities[u[t]]});for(const[t,s]of Object.entries(p))e.cmd[t]+=s,getSourceInfo(this.sourceInfo,"system.attributes.cmd."+t).positive.push({value:s,name:pf1.config.abilities[i]})}{let t=!1;const s={name:"",value:game.i18n.localize("PF1.ReducedMovementSpeed")},a=e.encumbrance.level;if(a>0){const e=pf1.config.encumbranceLevels;a>=e.heavy?this.changeFlags.noHeavyEncumbrance||(t=!0,s.name=game.i18n.localize("PF1.HeavyEncumbrance")):a>=e.medium&&(this.changeFlags.noMediumEncumbrance||(t=!0,s.name=game.i18n.localize("PF1.MediumEncumbrance")))}const i={type:0},n=this.equipment;n&&this._prepareArmorData(n.armor,i),i.type!=pf1.config.armorTypes.heavy||this.changeFlags.heavyArmorFullSpeed?i.type!=pf1.config.armorTypes.medium||this.changeFlags.mediumArmorFullSpeed||(t=!0,s.name=game.i18n.localize("PF1.Subtypes.Item.equipment.armor.Types.medium")):(t=!0,s.name=game.i18n.localize("PF1.Subtypes.Item.equipment.armor.Types.heavy"));for(const e of Object.keys(this.system.attributes.speed)){const a=this.system.attributes.speed[e].total;this.system.attributes.speed[e].unhindered=a,t&&a>0&&(this.system.attributes.speed[e].total=this.constructor.getReducedMovementSpeed(a),getSourceInfo(this.sourceInfo,`system.attributes.speed.${e}.total`).negative.push(s))}}let o=null,r=null;switch(e.encumbrance.level){case pf1.config.encumbranceLevels.medium:o=3,r=3;break;case pf1.config.encumbranceLevels.heavy:o=6,r=1}const l=game.i18n.localize("PF1.Encumbrance");if(null!==o&&getSourceInfo(this.sourceInfo,"system.attributes.acp.total").negative.push({name:l,value:o}),null!==r){getSourceInfo(this.sourceInfo,"system.attributes.maxDexBonus").negative.push({name:l,value:r});let e=new Intl.NumberFormat("nu",{signDisplay:"always"}).format(r);e=`${game.i18n.localize("PF1.MaxDexShort")} ${e}`,getSourceInfo(this.sourceInfo,"system.attributes.ac.normal.total").negative.push({name:l,value:e}),getSourceInfo(this.sourceInfo,"system.attributes.ac.touch.total").negative.push({name:l,value:e})}this.updateSpellbookInfo()}getLabels(){const e={};e.alignment=pf1.config.alignments[this.system.details.alignment],e.speed={};for(const[t,s]of Object.entries(this.system.attributes.speed??{})){const a=pf1.utils.convertDistance(s.total);e.speed[t]=`${a[0]} ${pf1.config.measureUnitsShort[a[1]]}`}return e}_applyArmorPenalties(){let e=0;const t={armor:0,shield:0},s={armor:{value:0,item:null},shield:{value:0,item:null}},a={armor:null,shield:null};this.itemTypes.equipment.filter((e=>e.system.equipped)).forEach((i=>{const n=i.system.subType,o=["armor","shield"].includes(n);let r=Math.abs(i.system.armor.acp);if(!0===i.system.masterwork&&o&&(r=Math.max(0,r-1)),o&&(r=Math.max(0,r+(this.system.attributes?.acp?.[n+"Bonus"]??0))),r){if(i.isBroken){s[n].value=r,s[n].item=i;const e=getSourceInfo(this.sourceInfo,"system.attributes.acp.skill").negative.find((e=>e.itemId===i.id));e?e.value=r:getSourceInfo(this.sourceInfo,"system.attributes.acp.skill").negative.push({name:`${i.name} (${game.i18n.localize("PF1.Broken")})`,itemId:i.id,value:r})}const e=getSourceInfo(this.sourceInfo,"system.attributes.acp.total").negative.find((e=>e.itemId===i.id));e?e.value=r:getSourceInfo(this.sourceInfo,"system.attributes.acp.total").negative.push({name:i.name,itemId:i.id,value:r})}if(o&&(r>t[n]&&(t[n]=r),i.getProficiency(!1)||(e+=r)),null!==i.system.armor.dex&&o){const e=Number.parseInt(i.system.armor.dex,10);if(Number.isInteger(e)){const t=e+(this.system.attributes?.mDex?.[n+"Bonus"]??0);a[n]=Math.min(t,a[n]??1/0);const s=getSourceInfo(this.sourceInfo,"system.attributes.maxDexBonus").negative.find((e=>e.itemId===i.id));s?s.value=e:getSourceInfo(this.sourceInfo,"system.attributes.maxDexBonus").negative.push({name:i.name,itemId:i.id,value:e,ignoreNull:!1});let o=new Intl.NumberFormat("nu",{signDisplay:"always"}).format(e);o=`${game.i18n.localize("PF1.MaxDexShort")} ${o}`;for(const t of["system.attributes.ac.normal.total","system.attributes.ac.touch.total"]){const s=getSourceInfo(this.sourceInfo,t).negative.find((e=>"maxDex"===e.id));s?e<s.value&&(s.value=o,s.itemId=i.id,s.name=i.name):getSourceInfo(this.sourceInfo,t).negative.push({name:i.name,value:o,itemId:i.id,id:"maxDex"})}}}}));for(const e of Object.keys(s)){const t=s[e].value;if(0==t)continue;const a=s[e].item.id,i=getSourceInfo(this.sourceInfo,`system.attributes.acp.${e}Bonus`).negative.find((e=>e.brokenId===a));i?i.value=t:getSourceInfo(this.sourceInfo,`system.attributes.acp.${e}Bonus`).negative.push({name:`${s[e].item.name} (${game.i18n.localize("PF1.Broken")})`,brokenId:a,value:t})}const i=t.armor+t.shield,n={maxDexBonus:null,acp:i,acpSkill:i+s.armor.value+s.shield.value};return this.system.attributes.acp.gear=i,null===a.armor&&null===a.shield||(n.maxDexBonus=Math.min(a.armor??1/0,a.shield??1/0)),this.system.attributes.acp.attackPenalty=e,n}prepareItemLinks(){for(const e of this.items){const t=e.system.links;if(t)for(const s of Object.keys(t))for(const a of t[s]){const t=fromUuidSync(a.uuid,{relative:this});if(t)if(t.actor&&t.actor!==this)console.error("Invalid item link:",{type:s,uuid:a.uuid,actor:this,item:e,linked:t});else switch(s){case"charges":t.links.charges=e,t.prepareLinks();break;case"children":t.links.parent=e}}}}_setSourceDetails(){const e=this.system,t={};for(const e of Object.keys(pf1.config.buffTargets)){const s=getChangeFlat.call(this,e,null);for(const e of s)t[e]||(t[e]=[])}t["system.attributes.bab.total"]=[],t["system.attributes.ac.normal.total"].push({name:game.i18n.localize("PF1.Base"),value:10}),t["system.attributes.ac.touch.total"].push({name:game.i18n.localize("PF1.Base"),value:10}),t["system.attributes.ac.flatFooted.total"].push({name:game.i18n.localize("PF1.Base"),value:10}),t["system.attributes.cmd.total"].push({name:game.i18n.localize("PF1.Base"),value:10}),t["system.attributes.cmd.flatFootedTotal"].push({name:game.i18n.localize("PF1.Base"),value:10});for(const[s,a]of Object.entries(e.abilities))t[`system.abilities.${s}.total`].push({name:game.i18n.localize("PF1.Base"),value:a.value}),a.damage>0&&t[`system.abilities.${s}.mod`].push({name:game.i18n.localize("PF1.AbilityDamage"),value:-Math.floor(Math.abs(a.damage)/2)}),a.drain>0&&t[`system.abilities.${s}.total`].push({name:game.i18n.localize("PF1.AbilityDrain"),value:-Math.abs(a.drain)});const s=game.settings.get("pf1","healthConfig").variants,a="npc"===this.type?s.npc:s.pc;if(a.useWoundThresholds>0){const e=this.getWoundThresholdData({healthConfig:a});if(e.level>0){const s=-e.penalty;for(const a of pf1.config.woundThresholdChangeTargets){const i=getChangeFlat.call(this,a,"untyped",s);for(const a of i)a&&t[a].push({name:pf1.config.woundThresholdConditions[e.level],value:s})}}}const i=!0===this.changeFlags.loseDexToAC,n=this.getRollData();for(const[e,s]of Object.entries(this.sourceInfo))for(const a of Object.values(s)){t[e]=t[e]||[];for(const s of a){s.operator||(s.operator="add");const a=this.constructor._getSourceLabel(s);let o=null!=s.value?s.value:RollPF.safeRollAsync(s.formula||"0",n,[e,s,this],{suppressError:!this.isOwner}).total;if("set"===s.operator){let e=o;s.change?.isDistance&&(e=pf1.utils.convertDistance(e)[0]),o=game.i18n.format("PF1.SetTo",{value:e})}if("add"!==s.operator||0!==o||!1===s.ignoreNull){if(i&&o>0&&"dodge"===s.modifier&&"add"===s.operator&&s.change?.isAC)continue;t[e].push({name:a.replace(/[[\]]/g,""),modifier:s.modifier||"",value:o})}}}this.sourceDetails=t}_getInherentTotalsKeys(){const e={"attributes.ac.normal.total":10,"attributes.ac.touch.total":10,"attributes.ac.flatFooted.total":10,"attributes.bab.total":0,"attributes.cmd.total":10,"attributes.cmd.flatFootedTotal":10,"attributes.acp.armorBonus":0,"attributes.acp.shieldBonus":0,"attributes.acp.gear":0,"attributes.acp.encumbrance":0,"attributes.acp.total":0,"attributes.acp.skill":0,"attributes.acp.attackPenalty":0,"attributes.maxDexBonus":null,"ac.normal.total":0,"ac.normal.base":0,"ac.normal.enh":0,"ac.normal.misc":0,"ac.natural.total":0,"ac.natural.base":0,"ac.natural.misc":0,"ac.natural.enh":0,"ac.shield.total":0,"ac.shield.base":0,"ac.shield.enh":0,"ac.shield.misc":0,"attributes.sr.total":0,"attributes.init.bonus":0,"attributes.init.total":this.system.attributes.init.value??0,"attributes.cmb.bonus":0,"attributes.cmb.total":0,"attributes.cmb.value":0,"attributes.hp.max":this.system.attributes.hp.base??0,"attributes.vigor.max":this.system.attributes.vigor.base??0,"attributes.wounds.max":this.system.attributes.wounds.base??0,"attributes.wounds.threshold":0,"attributes.attack.general":0,"attributes.attack.melee":0,"attributes.attack.natural":0,"attributes.attack.ranged":0,"attributes.attack.thrown":0,"attributes.attack.shared":0,"attributes.attack.critConfirm":0,"attributes.mDex":{armorBonus:0,shieldBonus:0},"attributes.damage.general":0,"attributes.damage.weapon":0,"attributes.damage.natural":0,"attributes.damage.melee":0,"attributes.damage.meleeAll":0,"attributes.damage.ranged":0,"attributes.damage.rangedAll":0,"attributes.damage.thrown":0,"attributes.damage.spell":0,"attributes.damage.shared":0,"attributes.woundThresholds.level":0,"attributes.woundThresholds.mod":0,"attributes.woundThresholds.override":-1,"attributes.woundThresholds.penaltyBase":0,"attributes.woundThresholds.penalty":0,"abilities.str.checkMod":0,"abilities.str.total":0,"abilities.dex.checkMod":0,"abilities.dex.total":0,"abilities.con.checkMod":0,"abilities.con.total":0,"abilities.int.checkMod":0,"abilities.int.total":0,"abilities.wis.checkMod":0,"abilities.wis.total":0,"abilities.cha.checkMod":0,"abilities.cha.total":0,"attributes.spells.spellbooks.primary.concentration.total":0,"attributes.spells.spellbooks.secondary.concentration.total":0,"attributes.spells.spellbooks.tertiary.concentration.total":0,"attributes.spells.spellbooks.spelllike.concentration.total":0,"attributes.spells.spellbooks.primary.cl.total":0,"attributes.spells.spellbooks.secondary.cl.total":0,"attributes.spells.spellbooks.tertiary.cl.total":0,"attributes.spells.spellbooks.spelllike.cl.total":0,"details.carryCapacity.bonus.total":0,"details.carryCapacity.multiplier.total":0,"details.feats.bonus":0,"details.skills.bonus":0,"attributes.speed.land.add":0,"attributes.speed.swim.add":0,"attributes.speed.fly.add":0,"attributes.speed.climb.add":0,"attributes.speed.burrow.add":0,"attributes.savingThrows.fort.total":this.system.attributes.savingThrows.fort.base??0,"attributes.savingThrows.ref.total":this.system.attributes.savingThrows.ref.base??0,"attributes.savingThrows.will.total":this.system.attributes.savingThrows.will.base??0};try{const t=getChangeFlat.call(this,"skills");for(const s of t)e[s.replace(/^system\./,"")]=0}catch(e){console.error("Could not determine skills for an actor",this)}return e}_getBaseValueFillKeys(){return[{parent:"abilities.str",key:"base",value:0},{parent:"abilities.dex",key:"base",value:0},{parent:"abilities.con",key:"base",value:0},{parent:"abilities.int",key:"base",value:0},{parent:"abilities.wis",key:"base",value:0},{parent:"abilities.cha",key:"base",value:0}]}_resetInherentTotals(){const e=this._getInherentTotalsKeys();for(const[t,s]of Object.entries(e))try{foundry.utils.setProperty(this.system,t,s)}catch(e){console.error(e,t)}for(const e of this._getBaseValueFillKeys()){const{parent:t,key:s,value:a}=e,i=getProperty(this.system,t);i&&(i[s]??=a)}}static getReducedMovementSpeed(e){return e-5*Math.floor(e/5/3)}static getSpellSlotIncrease(e,t){return 0===t||e<=0?0:Math.max(0,Math.ceil((e+1-t)/4))}getLevelExp(e){return 0}async _preUpdate(e,t,s){if(await super._preUpdate(e,t,s),!1===t.diff||!1===t.recursive)return;if(!e.system)return;const a=this.system;this._syncProtoTokenSize(e);const i=e.system.attributes;if(i){for(const e of["hp","wounds","vigor"]){const t=i[e];if(t){if(void 0!==t.value&&void 0===t.offset){const s=t.max??a.attributes[e]?.max??0;t.offset=t.value-s}delete t.value}}const e=i.vigor;if(e?.offset<0){const t=a.attributes.vigor.max,s=-(t+e.offset);s>0&&(i.wounds??={},i.wounds.offset??=a.attributes?.wounds?.offset??0,i.wounds.offset-=s,e.offset=-t)}}if(void 0!==e.system.attributes?.quadruped){e.system.attributes.quadruped===(this.race?.system.quadruped??!1)&&(e.system.attributes.quadruped=null)}const n=e.system.abilities;if(n){const e=["userPenalty","damage","drain"],t=Object.keys(n);for(const s of t){const t=n[s];if(t)for(const s of e)void 0!==t[s]&&(t[s]=Math.abs(t[s]))}}const o=e.system.attributes?.energyDrain;void 0!==o&&(e.system.attributes.energyDrain=Math.abs(o));const r=e.system.attributes?.conditions;void 0!==e.system.conditions&&delete e.system.conditions,r&&(foundry.utils.logCompatibilityWarning("Toggling conditions via Actor.update() is deprecated in favor of Actor.setCondition()",{since:"PF1 v10",until:"PF1 v11"}),delete e.system.attributes.conditions,await this.setConditions(r))}_syncProtoTokenSize(e){const t=e.system.traits?.size;if(!t)return;if(this.token)return;if(e.prototypeToken?.flags?.pf1?.staticSize??this.prototypeToken.getFlag("pf1","staticSize")??!1)return;const s=pf1.config.tokenSizes[t];s&&(e.prototypeToken??={},void 0===e.prototypeToken?.width&&(e.prototypeToken.width=s.w),void 0===e.prototypeToken?.height&&(e.prototypeToken.height=s.h))}_onUpdate(e,t,s){if(super._onUpdate(e,t,s),!e.system)return;const a=game.user.id===s;let i=!1,n=!1;if(foundry.utils.hasProperty(e.system,"traits.senses")?(i=!0,e.system.traits.senses.ll&&(n=!0)):e.flags?.pf1?.visionSharing&&(i=!0,n=!0),(i||n)&&this.testUserPermission(game.user,"OBSERVER")){const e={refreshLighting:!0,refreshVision:!0};if(i){for(const e of this.getActiveTokens(!1,!0))e._syncSenses();e.initializeVision=!0}n&&(e.initializeLighting=!0),canvas.perception.update(e,!0)}if(a){const t=e.system.traits?.size;void 0!==t&&this._updateTokenSize(t)}}async _updateTokenSize(e,t={}){const s=pf1.config.tokenSizes[e];if(!s)throw Error(`Size key "${e}" is invalid`);const a=canvas.scene;if(!a)return null;const i=this.token?[this.token]:this.getActiveTokens(!1,!0).filter((e=>!e.getFlag("pf1","staticSize"))),n=this.prototypeToken?.texture??{},o=i.map((e=>({_id:e.id,width:s.w,height:s.h,texture:{scaleX:s.scale*(n.scaleX||1),scaleY:s.scale*(n.scaleY||1)}})));return TokenDocument.implementation.updateDocuments(o,{parent:a})}_onCreateDescendantDocuments(e,t,s,a,i,n){if(super._onCreateDescendantDocuments(...arguments),n===game.user.id){if("items"===t){const e=s.find((e=>"race"===e.type));e?.system.size&&this.system.traits.size!==e.system.size&&this.update({"system.traits.size":e.system.size})}"effects"===t&&!1!==i.pf1?.updateConditionTracks&&this._handleConditionTracks(s,i)}}async _handleConditionTracks(e){const t={},s={},a=pf1.registry.conditions.trackedConditions();for(const i of e)for(const e of i.statuses??[])if(pf1.registry.conditions.has(e)){t[e]=!0;for(const t of a)if(t.includes(e))for(const a of t)a!==e&&(s[a]=!1)}if(this._conditionToggleNotify(t),!foundry.utils.isEmpty(s))return this.setConditions(s)}_onDeleteDescendantDocuments(e,t,s,a,i,n){if(super._onDeleteDescendantDocuments(e,t,s,a,i,n),"effects"===t){const e={};for(const t of s)for(const s of t.statuses??[])pf1.registry.conditions.has(s)&&!this.statuses.has(s)&&(e[s]=!1);!1!==i?.pf1?.updateConditionTracks&&this._conditionToggleNotify(e)}if(game.user.id===n&&"items"===t){this._cleanItemLinksTo(s);const e=new Set,_enumChildren=t=>{e.add(t.id);const s=t.getLinkedItemsSync("children");for(const a of s){if(e.has(a.id))continue;const s=t.actor.items.get(a.id);s&&_enumChildren(s)}};for(const e of s)_enumChildren(e);for(const t of a)e.delete(t);e.size>0&&this.deleteEmbeddedDocuments("Item",Array.from(e))}}async _cleanItemLinksTo(e){const t=[];for(const s of e){const e=s.getRelativeUUID(this);for(const s of this.items){const a=await s.removeItemLink(e,{commit:!1});a&&(a._id=s.id,t.push(a))}}if(t.length)return this.updateEmbeddedDocuments("Item",t)}_conditionToggleNotify(e={}){for(const[t,s]of Object.entries(e))Hooks.callAll("pf1ToggleActorCondition",this,t,s)}updateItemResources(e,{warnOnDuplicate:t=!0}={}){if("spell"===e.type)return!1;if(!e.isCharged)return!1;if(e.isSingleUse)return!1;if(e.isPhysical)return!1;const s=e.system.tag;if(s||console.error("Attempting create resource on tagless item",e),t&&this.system.resources[s]&&this.isOwner){const t=game.i18n.format("PF1.Warning.DuplicateTag",{actor:this.uuid,item:e.name,tag:s});ui.notifications.warn(t,{console:!1}),console.warn(t,e)}const a=new Resource(e);return this.system.resources[s]=a,!0}async createAttackFromWeapon(e){if(foundry.utils.logCompatibilityWarning("ActorPF.createAttackFromWeapon() is deprecated in favor of ItemAttackPF.fromItem()",{since:"PF1 v10",until:"PF1 v11"}),!this.isOwner)return void ui.notifications.warn(game.i18n.format("PF1.Error.NoActorPermissionAlt",{name:this.name}));const t=pf1.documents.item.ItemAttackPF.fromItem(e),[s]=await this.createEmbeddedDocuments("Item",[t]);if(!s)throw Error("Failed to create attack from weapon");return await e.createItemLink("children","data",s,s.id),ui.notifications.info(game.i18n.format("PF1.NotificationCreatedAttack",{item:e.name})),await e.update({"system.showInQuickbar":!1}),s}createSpellbook(e={}){const t=this.system.attributes.spells.spellbooks??{},s=e.class?Object.entries(t).find((([t,s])=>!!s.class&&s.class===e.class)):null;let a;if(s){if(s[1].inUse)return void ui.notifications.warn(game.i18n.localize("PF1.Error.SpellbookExists"));a=s[0]}else{const e=Object.entries(t).find((([e,t])=>!0!==t.inUse));if(void 0===e)return void ui.notifications.warn(game.i18n.localize("PF1.Error.NoFreeSpellbooks"));a=e[0]}e.type??="prepared",e.class??="_hd",e.progression??="high",e.spells??="arcane",e.ability??="int",e.cantrips??=!0,e.domain??=1,e.offset??=0,0!==e.offset&&(e.offset=""+e.offset);const i={["system.attributes.spells.spellbooks."+a]:{inUse:!0,kind:e.spells,class:e.class,spellPreparationMode:e.type,casterType:e.progression,ability:e.ability,psychic:"psychic"===e.spells,arcaneSpellFailure:"arcane"===e.spells,hasCantrips:e.cantrips,domainSlotValue:e.domain,"cl.autoSpellLevelCalculationFormula":e.offset||""}};return this.update(i)}getSkillInfo(e,{rollData:t}={}){const s=e.split(".");s.length>2&&s.splice(1,1);const a=s.shift(),i=s.pop(),n=!!i;e=[a,i].filterJoin("."),t??=this.getRollData();const o=n?this.getSkillInfo(a,{rollData:t}):null,r=i?o.subSkills?.[i]:foundry.utils.deepClone(t.skills[a]);if(!r)throw Error(`Invalid skill ID '${e}'`);return r.journal||=pf1.config.skillCompendiumEntries[n?a:e],r.name||=pf1.config.skills[e]||e,r.id=e,n?(r.fullName=`${o.name} (${r.name})`,r.parentSkill=o):r.fullName=r.name,r}async rollSkill(e,t={}){if(!this.isOwner)return void ui.notifications.warn(game.i18n.format("PF1.Error.NoActorPermissionAlt",{name:this.name}));const s=e.split("."),a=s[0],i=s.length>1?s.at(-1):null;e=i?`${a}.${i}`:a;const n=i?`${a}.subSkills.${i}`:a,o=this.getSkillInfo(e),r=!!i,l=this.getRollData(),c=this.getContextNotes("skill."+e);r&&c.push(...this.getContextNotes("skill."+a,!1));const u=this.formatContextNotes(c,l);o.rt&&!o.rank&&u.push(game.i18n.localize("PF1.Untrained"));const p=[],m=getHighestChanges(this.changes.filter((e=>{const t=e.getTargets(this);return!(!r||!t.includes(`system.skills.${a}.mod`))||t.includes(`system.skills.${n}.mod`)})),{ignoreTarget:!0});if(o.ability&&p.push(`@abilities.${o.ability}.mod[${pf1.config.abilities[o.ability]}]`),o.rank>0&&(p.push(`${o.rank}[${game.i18n.localize("PF1.SkillRankPlural")}]`),o.cs&&p.push(`${pf1.config.classSkillBonus}[${game.i18n.localize("PF1.CSTooltip")}]`)),o.acp&&0!==l.attributes.acp.skill&&p.push(`-@attributes.acp.skill[${game.i18n.localize("PF1.ACPLong")}]`),l.attributes.woundThresholds?.penalty>0){const e=pf1.config.woundThresholdConditions[l.attributes.woundThresholds.level];u.push(e),p.push(`- @attributes.woundThresholds.penalty[${e}]`)}for(const e of m)e.value&&("string"==typeof e.value&&RollPF.parse(e.value).length>1?p.push(`(${e.value})[${e.flavor}]`):p.push(`${e.value}[${e.flavor}]`));const d=[];u.length>0&&d.push({header:game.i18n.localize("PF1.Notes"),value:u});const h=t.token??this.token,g={...t,parts:p,rollData:l,flavor:game.i18n.format("PF1.SkillCheck",{skill:o.fullName}),chatTemplateData:{properties:d},compendium:{entry:pf1.config.skillCompendiumEntries[e]??o.journal,type:"JournalEntry"},subject:{skill:e},speaker:ChatMessage.implementation.getSpeaker({actor:this,token:h,alias:h?.name})};if(!1===Hooks.call("pf1PreActorRollSkill",this,g,e))return;const f=await pf1.dice.d20Roll(g);return f&&Hooks.callAll("pf1ActorRollSkill",this,f,e),f}async rollBAB(e={}){if(!this.isOwner)return void ui.notifications.warn(game.i18n.format("PF1.Error.NoActorPermissionAlt",{name:this.name}));const t=e.token??this.token,s={...e,parts:[`${this.system.attributes.bab.total}[${game.i18n.localize("PF1.BABAbbr")}]`],subject:{core:"bab"},flavor:game.i18n.localize("PF1.BAB"),speaker:ChatMessage.implementation.getSpeaker({actor:this,token:t,alias:t?.name})};if(!1===Hooks.call("pf1PreActorRollBab",this,s))return;const a=await pf1.dice.d20Roll(s);return Hooks.callAll("pf1ActorRollBab",this,a),a}async rollCMB(e={}){return foundry.utils.logCompatibilityWarning("ActorPF.rollCMB() is deprecated in favor of ActorPF.rollAttack({maneuver:true})",{since:"PF1 v10",until:"PF1 v11"}),this.rollAttack({maneuver:!0,...e})}async rollAttack({maneuver:e=!1,ranged:t=!1,ability:s=null,...a}={}){if(!this.isOwner)return void ui.notifications.warn(game.i18n.format("PF1.Error.NoActorPermissionAlt",{name:this.name}));let i;void 0!==a.melee&&(foundry.utils.logCompatibilityWarning("ActorPF.rollAttack() melee parameter has been deprecated.",{since:"PF1 v10",until:"PF1 v11"}),t=!a.melee,delete a.melee),i=e?t?"rcman":"mcman":t?"rwak":"mwak";const n={...pf1.components.ItemAction.defaultData,name:t?game.i18n.localize("PF1.Ranged"):game.i18n.localize("PF1.Melee"),actionType:i},o=this.system.attributes?.attack?.[(t?"ranged":"melee")+"Ability"];n.ability.attack=s??(o||(t?"dex":"str")),n.activation.type="attack",n.activation.unchained.type="attack";return new Item.implementation({type:"attack",name:e?game.i18n.localize("PF1.CMBAbbr"):game.i18n.localize("TYPES.Item.weapon"),system:{actions:[n]}},{parent:this}).use(a)}async rollCL(e,t={}){const s=this.system.attributes.spells.spellbooks[e],a=t.rollData||this.getRollData();a.cl=s.cl.total;const i=[];var n;n=this.sourceDetails[`system.attributes.spells.spellbooks.${e}.cl.total`],n?.reverse().forEach((e=>{return t=e.value,s=e.name,i.push(`${t}[${s}]`);var t,s}));const o=this.getContextNotesParsed("spell.cl."+e),r=this.getWoundThresholdData();r.valid&&o.push(pf1.config.woundThresholdConditions[r.level]);const l=[];o.length>0&&l.push({header:game.i18n.localize("PF1.Notes"),value:o});const c=t.token??this.token,u={...t,parts:i,rollData:a,subject:{core:"cl",spellbook:e},flavor:game.i18n.localize("PF1.CasterLevelCheck"),chatTemplateData:{properties:l},speaker:ChatMessage.implementation.getSpeaker({actor:this,token:c,alias:c?.name})};if(!1===Hooks.call("pf1PreActorRollCl",this,u,e))return;const p=await pf1.dice.d20Roll(u);return Hooks.callAll("pf1ActorRollCl",this,p,e),p}async rollConcentration(e,t={}){const s=this.system.attributes.spells.spellbooks[e],a=t.rollData||this.getRollData();if(a.cl=s.cl.total,a.mod=this.system.abilities[s.ability]?.mod??0,!1===Hooks.call("actorRoll","pf1PreActorRollConcentration",void 0,this,"concentration",e,t))return;const i=[];var n;n=this.sourceDetails[`system.attributes.spells.spellbooks.${e}.concentration.total`],n?.reverse().forEach((e=>{return t=e.value,s=e.name,i.push(`${t}[${s}]`);var t,s}));const o=this.getContextNotesParsed("spell.concentration."+e),r=this.getWoundThresholdData();r.valid&&o.push(game.i18n.localize(pf1.config.woundThresholdConditions[r.level]));const l=[];o.length>0&&l.push({header:game.i18n.localize("PF1.Notes"),value:o});const c=t.token??this.token,u={...t,parts:i,rollData:a,subject:{core:"concentration",spellbook:e},flavor:game.i18n.localize("PF1.ConcentrationCheck"),chatTemplateData:{properties:l},speaker:ChatMessage.implementation.getSpeaker({actor:this,token:c,alias:c?.name})};if(!1===Hooks.call("pf1PreActorRollConcentration",this,u,e))return;const p=pf1.dice.d20Roll(u);return Hooks.callAll("pf1ActorRollConcentration",this,p,e),p}getDefenseHeaders({damageResistances:e=!0,damageVulnerabilities:t=!0}={}){const s=this.system,a=[],i=pf1.config.re.traitSeparator,n=[],o=pf1.registry.damageTypes.getLabels();if(e&&(s.traits.dr.length&&a.push({header:game.i18n.localize("PF1.DamRed"),value:s.traits.dr.split(i)}),s.traits.eres.length&&a.push({header:game.i18n.localize("PF1.EnRes"),value:s.traits.eres.split(i)})),t&&(s.traits.dv.value.length||s.traits.dv.custom.length)){const e=[...s.traits.dv.value.map((e=>o[e])),...s.traits.dv.custom||[]];a.push({header:game.i18n.localize("PF1.DamVuln"),value:e})}if(s.traits.cres.length&&a.push({header:game.i18n.localize("PF1.ConRes"),value:s.traits.cres.split(i)}),s.traits.di.value.length||s.traits.di.custom.length||s.traits.ci.value.length||s.traits.ci.custom.length){const e=[...s.traits.di.value.map((e=>o[e])),...s.traits.di.custom||[],...s.traits.ci.value.map((e=>pf1.config.conditionTypes[e])),...s.traits.ci.custom||[]];a.push({header:game.i18n.localize("PF1.ImmunityPlural"),value:e})}return s.attributes.sr.total>0&&n.push(game.i18n.format("PF1.SpellResistanceNote",{value:s.attributes.sr.total})),n.length>0&&a.push({header:game.i18n.localize("PF1.MiscShort"),value:n}),a}getInitiativeContextNotes(){const e=this.getContextNotes("misc.init").reduce(((e,t)=>{for(const s of t.notes)e.push(...s.split(/[\n\r]+/));return e}),[]);let t;if(e.length>0){const s=[];e.forEach((e=>s.push(`<span class="tag">${e}</span>`))),t='<div class="flexcol property-group gm-sensitive"><label>'+game.i18n.localize("PF1.Notes")+'</label> <div class="flexrow tag-list">'+s.join("")+"</div></div>"}return[e,t]}async rollInitiative({createCombatants:e=!1,rerollInitiative:t=!1,initiativeOptions:s={},dice:a=null,bonus:i=null,rollMode:n=null,skipDialog:o,token:r}={}){r||=this.token;let l=game.combat;if(!l){if(!game.user.isGM)return ui.notifications.warn("COMBAT.NoneActive",{localize:!0}),null;{const e=getDocumentClass("Combat");l=await e.create({scene:canvas.scene?.id,active:!0})}}if(e){const e=this.isToken?[this.token]:this.getActiveTokens().map((e=>e.document)),t=[];if(e.length)for(const s of e)s.inCombat||t.push({tokenId:s.id,sceneId:s.parent.id,actorId:this.id,hidden:s.hidden});else t.push({actorId:this.id,hidden:!1});await l.createEmbeddedDocuments("Combatant",t)}const c=l.combatants.filter((e=>(!r||e.token?.id===r.id)&&(e.actor?.id===this.id&&(t||null===e.initiative)))).map((e=>e.id));return 0==c.length||(foundry.utils.mergeObject(s,{d20:a,bonus:i,rollMode:n,skipDialog:o}),await l.rollInitiative(c,s)),l}async rollSavingThrow(e,t={}){if(!this.isOwner)return void ui.notifications.warn(game.i18n.format("PF1.Error.NoActorPermissionAlt",{name:this.name}));const s=this.getRollData(),a=this.getContextNotes("savingThrow."+e),i=this.formatContextNotes(a,s),n=[],o=this.system.attributes.savingThrows[e]?.base;o&&n.push(`${o}[${game.i18n.localize("PF1.Base")}]`);let r=[];const l=this.changes.filter((t=>["allSavingThrows",e].includes(t.target)));r=getHighestChanges(l.filter((e=>"set"!==e.operator)),{ignoreTarget:!0}).reduce(((e,t)=>(t.value&&e.push({value:t.value,source:t.flavor}),e)),[]);for(const e of r)n.push(`${e.value}[${e.source}]`);if(s.attributes.woundThresholds.penalty>0){const e=pf1.config.woundThresholdConditions[s.attributes.woundThresholds.level];i.push(e),n.push(`- @attributes.woundThresholds.penalty[${e}]`)}const c=this.getDefenseHeaders({damageResistances:!1,damageVulnerabilities:!1});i.length>0&&c.push({header:game.i18n.localize("PF1.Notes"),value:i});const u=pf1.config.savingThrows[e],p=t.token??this.token,m={...t,parts:n,rollData:s,flavor:game.i18n.format("PF1.SavingThrowRoll",{save:u}),subject:{save:e},chatTemplateData:{properties:c},speaker:ChatMessage.implementation.getSpeaker({actor:this,token:p,alias:p?.name})};if(!1===Hooks.call("pf1PreActorRollSave",this,m,e))return;const d=await pf1.dice.d20Roll(m);return Hooks.callAll("pf1ActorRollSave",this,d,e),d}async rollAbilityTest(e,t={}){if(!this.isOwner)return void ui.notifications.warn(game.i18n.format("PF1.Error.NoActorPermissionAlt",{name:this.name}));const s=t.rollData||this.getRollData(),a=this.getContextNotes("abilityChecks."+e),i=this.formatContextNotes(a,s),n=pf1.config.abilities[e],o=[`@abilities.${e}.mod[${n}]`];if(0!=this.system.abilities[e].checkMod){const t=this.sourceDetails[`system.abilities.${e}.checkMod`];for(const e of t)o.push(`${e.value}[${e.name}]`)}if(this.system.attributes.energyDrain&&o.push("-@attributes.energyDrain"),s.attributes.woundThresholds.penalty>0){const e=pf1.config.woundThresholdConditions[s.attributes.woundThresholds.level];i.push(e),o.push(`- @attributes.woundThresholds.penalty[${e}]`)}const r=[];i.length>0&&r.push({header:game.i18n.localize("PF1.Notes"),value:i});const l=t.token??this.token,c={...t,parts:o,rollData:s,flavor:game.i18n.format("PF1.AbilityTest",{ability:n}),subject:{ability:e},chatTemplateData:{properties:r},speaker:ChatMessage.implementation.getSpeaker({actor:this,token:l,alias:l?.name})};if(!1===Hooks.call("pf1PreActorRollAbility",this,c,e))return;const u=await pf1.dice.d20Roll(c);return Hooks.callAll("pf1ActorRollAbility",this,u,e),u}async displayDefenseCard({rollMode:e=null,token:t}={}){if(!this.isOwner)return void ui.notifications.warn(game.i18n.format("PF1.Error.NoActorPermissionAlt",{name:this.name}));const s=this.getRollData(),a=pf1.registry.damageTypes.getLabels(),i=this.getContextNotes("misc.ac"),n=this.formatContextNotes(i,s);this.system.attributes.acNotes&&n.push(...this.system.attributes.acNotes.split(/[\n\r]+/));const o=this.getContextNotes("misc.cmd"),r=this.formatContextNotes(o,s);this.system.attributes.cmdNotes&&r.push(...this.system.attributes.cmdNotes.split(/[\n\r]+/));const l=this.getContextNotes("misc.sr"),c=this.formatContextNotes(l,s);this.system.attributes.srNotes&&c.push(...this.system.attributes.srNotes.split(/[\n\r]+/));const u=this.getContextNotes("allSavingThrows"),p=this.formatContextNotes(u,s);this.system.attributes.saveNotes&&p.push(...this.system.attributes.saveNotes.split(/[\n\r]+/)),pf1.config.re.traitSeparator;const m=Object.values(this.parseResistances("dr")),d=Object.values(this.parseResistances("eres"));if(this.system.traits.di.value.length||this.system.traits.di.custom.length){const e=[...this.system.traits.di.value.map((e=>a[e])),...this.system.traits.di.custom||[]];d.push(...e.map((e=>game.i18n.format("PF1.ImmuneTo",{immunity:e}))))}if(this.system.traits.dv.value.length||this.system.traits.dv.custom.length){const e=[...this.system.traits.dv.value.map((e=>a[e])),...this.system.traits.dv.custom||[]];d.push(...e.map((e=>game.i18n.format("PF1.VulnerableTo",{vulnerability:e}))))}const h=Object.entries(this.system.conditions??{}).filter((([e,t])=>t)).map((([e])=>pf1.registry.conditions.get(e))).filter((e=>e?.showInDefense)).map((e=>e.name)),g=this.getWoundThresholdData();if(g.valid){const e=pf1.config.woundThresholdConditions[g.level];n.push(e),r.push(e)}t??=this.token;const f=this.system,y={actor:this,name:t?.name??this.name,tokenUuid:t?.uuid??null,ac:{normal:f.attributes.ac.normal.total,touch:f.attributes.ac.touch.total,flatFooted:f.attributes.ac.flatFooted.total,notes:n},cmd:{normal:f.attributes.cmd.total,flatFooted:f.attributes.cmd.flatFootedTotal,notes:r},misc:{sr:f.attributes.sr.total,srNotes:c,drNotes:m,energyResistance:d,conditions:h},saves:{notes:p}};((f.traits?.fastHealing||"").length||(f.traits?.regen||"").length)&&(y.regen={regen:f.traits.regen,fastHealing:f.traits.fastHealing}),e??=game.settings.get("core","rollMode");const b={content:await renderTemplate("systems/pf1/templates/chat/defenses.hbs",y),speaker:ChatMessage.implementation.getSpeaker({actor:this,token:t,alias:t?.name}),rollMode:e,flags:{core:{canPopout:!0},pf1:{subject:"defenses"}}};return ChatMessage.implementation.applyRollMode(b,e),ChatMessage.implementation.create(b)}_deprecatePF1PrefixConditions(e){if(/^pf1_/.test(e)){const t=e.replace(/^pf1_/,"");foundry.utils.logCompatibilityWarning(`Condition "${e}" is deprecated in favor of "${t}"`,{since:"PF1 v10",until:"PF1 v11"}),e=t}return e}async toggleCondition(e){return this.setCondition(e,!this.hasCondition(e))}async setCondition(e,t,s){if("boolean"!=typeof t&&"Object"!==foundry.utils.getType(t))throw new TypeError("Actor.setCondition() enabled state must be a boolean or plain object");return this.setConditions({[e]:t},s)}async setConditions(e={},t={}){e=foundry.utils.deepClone(e);for(const t of Object.keys(e)){const s=this._deprecatePF1PrefixConditions(t);s!==t&&(e[s]=e[t],delete e[t])}const s=pf1.registry.conditions.trackedConditions();for(const t of s){const s=t.find((t=>!0===e[t]));if(!s)continue;const a=t.filter((e=>e!==s));for(const t of a)e[t]=!1}const a=[],i=[];for(const[t,s]of Object.entries(e)){const n=pf1.registry.conditions.get(t);if(void 0===n){console.error("Unrecognized condition:",t),delete e[t];continue}const o=this.hasCondition(t)?this.effects.find((e=>e.statuses.has(t))):null;if(s)if(o)delete e[t];else{const e={flags:{pf1:{autoDelete:!0}},statuses:[t],name:n.name,icon:n.texture,label:n.name};"boolean"!=typeof s&&foundry.utils.mergeObject(e,s),i.push(e)}else o?a.push(o.id):delete e[t]}if(t.pf1??={},t.pf1.updateConditionTracks=!1,a.length){const e=foundry.utils.deepClone(t);t.trender&&i.length&&(e.render=!1),await this.deleteEmbeddedDocuments("ActiveEffect",a,t)}return i.length&&(foundry.utils.deepClone(t),await this.createEmbeddedDocuments("ActiveEffect",i,t)),this._conditionToggleNotify(e),e}hasCondition(e){return e=this._deprecatePF1PrefixConditions(e),this.statuses.has(e)}parseResistances(e){const format=(t,s,a,i)=>{let n=s;if(i)if(!1===a)n=game.i18n.format("PF1.Application.DamageResistanceSelector.CombinationFormattedAnd",{type1:s,type2:i});else n=game.i18n.format("PF1.Application.DamageResistanceSelector.CombinationFormattedOr",{type1:s,type2:i});return"dr"===e?`${t}/${n}`:`${n} ${t}`},t=this.system.traits[e],s={};return t.value.forEach(((e,t)=>{const{amount:a,operator:i}=e,n=pf1.registry.damageTypes.get(e.types[0])?.name??pf1.registry.materialTypes.get(e.types[0])?.name??pf1.config.damageResistances[e.types[0]]??"-",o=pf1.registry.damageTypes.get(e.types[1])?.name??pf1.registry.materialTypes.get(e.types[1])?.name??pf1.config.damageResistances[e.types[1]]??"";s[""+(t+1)]=format(a,n,i,o)})),t.custom.length&&t.custom.split(pf1.config.re.traitSeparator).forEach(((e,t)=>{const a=/(?<value>\d+)/.exec(e),i=parseInt(a?.groups.value||"0"),n=e.replace(/\d+\s*\/?/,"").trim();s["custom"+(t+1)]=format(i,n,null,"")})),s}async applyDamage(e,t={}){return this.constructor.applyDamage(e,foundry.utils.mergeObject(t,{targets:[this]}))}static async applyDamage(e=0,{forceDialog:t=!1,reductionDefault:s="",asNonlethal:a=!1,targets:i=null,critMult:n=0,asWounds:o=!1,instances:r=[],event:l,element:c,message:u=null}={}){if(0==e||!Number.isFinite(e))return void console.warn("Attempting to apply 0 damage.");const p=[];let m=canvas.tokens.controlled,d=1;i instanceof Array&&(m=i.filter((e=>e instanceof Token||e instanceof Actor)));const h=game.settings.get("pf1","healthConfig"),g=/(\d+)/g,_submit=async function(t,s){if(t){e=t.find('[name="damage"]').val();let a=t.find('[name="damage-reduction"]').val();e=e.length?RollPF.safeRollSync(e).total:0,a=a.length?RollPF.safeRollSync(a).total:0,e=s<0?Math.min((e=Math.ceil(e*s))-a,0):Math.max((e=Math.floor(e*(s??1)))-a,0);const i=[...t.find(".tokenAffected:checked")].map((e=>e.name.replace("affect.","")));m=m.filter((e=>i.includes(e.id)))}if(0!=e){for(const t of m){const s=t instanceof Token?t.actor:t;if(!s.isOwner){ui.notifications.warn(game.i18n.format("PF1.Error.NoActorPermissionAlt",{name:this.name}));continue}const i={character:"pc",npc:"npc"}[s.type],r=h.variants[i]?.useWoundsAndVigor??!1,l=r?s.system.attributes.vigor:s.system.attributes.hp,c=l.temp||0,u={};if(r){const t=l.value;let i=0;o&&(i-=e,e=0);const r=e>0?Math.min(c,e):0;if(e-=r,a&&e>0&&(t>0?e=Math.min(t,e):(i-=n>1?n:1,e=0)),0!=r&&(u["system.attributes.vigor.temp"]=c-r),0!=e){let s=Math.min(t-e,l.max);e>0&&s<0&&(i-=-s,n>0&&(i-=n),s=0),s!=l.value&&(u["system.attributes.vigor.value"]=s)}if(0!=i){const e=s.system.attributes.wounds;u["system.attributes.wounds.value"]=Math.clamped(e.value+i,0,e.max)}}else{let t=0;a&&e>0&&(t=Math.min(l.max-l.nonlethal,e),e-=t);const s=e>0?Math.min(c,e):0;0!=t&&(u["system.attributes.hp.nonlethal"]=l.nonlethal+t),0!=s&&(u["system.attributes.hp.temp"]=c-s);const i=Math.min(l.value-(e-s),l.max);i!=l.value&&(u["system.attributes.hp.value"]=i)}p.push(s.update(u))}return Promise.all(p)}console.warn("Attempting to apply 0 damage.")};if(pf1.skipConfirmPrompt?!t:t){e<0&&(d=-1,e*=-1);const t=m.map((e=>{const t=e instanceof Token,s=t?e.actor:e;return{_id:t?e.id:s.id,name:t?e.name:s.name,isToken:t,dr:Object.values(s.parseResistances("dr")),eres:Object.values(s.parseResistances("eres")),di:[...s.system.traits.di.value,...s.system.traits.di.custom||[]],dv:[...s.system.traits.dv.value,...s.system.traits.dv.custom||[]],checked:!0}})),i="systems/pf1/templates/apps/damage-dialog.hbs",l={damage:e,healing:-1==d,damageReduction:s,tokens:t,nonlethal:a,asWounds:o,critMult:n,instances:r},c=await renderTemplate(i,l);return Dialog.wait({title:d>0?game.i18n.localize("PF1.ApplyDamage"):game.i18n.localize("PF1.ApplyHealing"),content:c,buttons:{normal:{label:game.i18n.localize("PF1.Apply"),callback:e=>_submit.call(this,e,1*d)},half:{label:game.i18n.localize("PF1.ApplyHalf"),callback:e=>_submit.call(this,e,.5*d)}},default:"normal",close:e=>!1,render:e=>{e.on("click",'a[name="swap-selected"]',(function swapSelected(){[...e[0].querySelectorAll('.selected-tokens input[type="checkbox"]')].forEach((e=>e.checked=!e.checked))})),e.on("click",'a[name="clear-reduction"], p.notes a',(function setReduction(t){e[0].querySelector('input[name="damage-reduction"]').value=t.currentTarget.innerText.match(g)??""})),e.on("wheel","input",(function mouseWheelAdd(e){const t=e.currentTarget;if(/[^\d+-]|(?:\d[+-])/.test(t.value.trim()))return;const s=parseFloat(t.value)||0,a=-Math.sign(e.originalEvent.deltaY);t.value=""+(s+a)}))}},{classes:[...Dialog.defaultOptions.classes,"pf1","apply-hit-points"]},{focus:!0})}return _submit()}getWoundThresholdMultiplier({healthConfig:e}={}){e??=game.settings.get("pf1","healthConfig").variants["npc"===this.type?"npc":"pc"];const t=(this.system.attributes?.woundThresholds??{}).override??-1;return t>=0&&e.allowWoundThresholdOverride?t:e.useWoundThresholds}getWoundThresholdData({healthConfig:e}={}){e??=game.settings.get("pf1","healthConfig").variants["npc"===this.type?"npc":"pc"];const t=this.system.attributes?.woundThresholds??{},s=this.getWoundThresholdMultiplier({healthConfig:e}),a=t.level||0;return{level:a,penalty:a*s+(t.mod||0),multiplier:s,valid:a>0&&s>0}}updateWoundThreshold(){const e=game.settings.get("pf1","healthConfig").variants,t="npc"===this.type?e.npc:e.pc,s=t.useWoundThresholds,a=t.useWoundsAndVigor,i=this.system.attributes.woundThresholds;if(!s||a)return i.level=0,i.penaltyBase=0,i.penalty=0,void(i.mod=0);const n=this.system.attributes.hp,o=n.value,r=n.temp??0,l=n.max;let c=s>0?Math.clamped(4-Math.ceil((o+r)/l*4),0,3):0;Number.isNaN(c)&&(c=0);const u=this.getWoundThresholdMultiplier({healthConfig:t}),p=i.mod??0;i.level=c,i.penaltyBase=c*u,i.penalty=c*u+p;const m=i.penalty,d=pf1.config.woundThresholdChangeTargets;if(0!=m)for(const e of d){const t=getChangeFlat.call(this,e,"untyped",-m);for(const e of t){if(!e)continue;const t=foundry.utils.getProperty(this,e)??0;foundry.utils.setProperty(this,e,t-m)}}}get allSkills(){const e=[];for(const[t,s]of Object.entries(this.system.skills))if(s){e.push(t);for(const a of Object.keys(s.subSkills??{}))e.push(`${t}.${a}`)}return e}get allNotes(){return this.items.filter((e=>e.isActive&&e.system.contextNotes?.length>0)).map((e=>({notes:e.system.contextNotes,item:e})))}get allItems(){return[...this.containerItems,...Array.from(this.items)]}getContextNotes(e,t=!0){e.string&&(e=e.string);const s=this.allNotes;if(e.match(/^attacks\.(.+)/)){const e=RegExp.$1;for(const t of s)t.notes=t.notes.filter((t=>t.target===e)).map((e=>e.text));return s}if(e.match(/^skill\.(.+)/)){const a=RegExp.$1,i=this.getSkillInfo(a).ability;for(const a of s)a.notes=a.notes.filter((s=>[e,i+"Skills"].includes(s.target)||t&&"skills"===s.target)).map((e=>e.text));return s}if(e.match(/^savingThrow\.(.+)/)){const e=RegExp.$1;for(const t of s)t.notes=t.notes.filter((t=>[e,"allSavingThrows"].includes(t.target))).map((e=>e.text));return null!=this.system.attributes.saveNotes&&""!==this.system.attributes.saveNotes&&s.push({notes:[this.system.attributes.saveNotes],item:null}),s}if(e.match(/^abilityChecks\.(.+)/)){const e=RegExp.$1;for(const t of s)t.notes=t.notes.filter((t=>[e+"Checks","allChecks"].includes(t.target))).map((e=>e.text));return s}if(e.match(/^misc\.(.+)/)){const e=RegExp.$1;for(const t of s)t.notes=t.notes.filter((t=>t.target===e)).map((e=>e.text));return s}if(e.match(/^spell\.concentration\.([a-z]+)$/)){const e=RegExp.$1;for(const e of s)e.notes=e.notes.filter((e=>"concentration"===e.target)).map((e=>e.text));const t=this.system.attributes?.spells?.spellbooks?.[e]?.concentrationNotes;return t?.length&&s.push({notes:t.split(/[\n\r]+/),item:null}),s}if(e.match(/^spell\.cl\.([a-z]+)$/)){const e=RegExp.$1;for(const e of s)e.notes=e.notes.filter((e=>"cl"===e.target)).map((e=>e.text));const t=this.system.attributes?.spells?.spellbooks?.[e]?.clNotes;return t?.length&&s.push({notes:t.split(/[\n\r]+/),item:null}),s}if(e.match(/^spell\.effect$/)){for(const e of s)e.notes=e.notes.filter((e=>"spellEffect"===e.target)).map((e=>e.text));return s}return[]}getContextNotesParsed(e,{roll:t=!0}={}){return this.getContextNotes(e).reduce(((e,s)=>{for(const a of s.notes){const i={rollData:null!=s.item?s.item.getRollData():this.getRollData(),rolls:t,async:!1,relativeTo:this};e.push(enrichHTMLUnrolled(a,i))}return e}),[])}formatContextNotes(e,t,{roll:s=!0}={}){const a=[];t??=this.getRollData();for(const i of e){t.item={},null!=i.item&&(t=i.item.getRollData());for(const e of i.notes)a.push(...e.split(/[\n\r]+/).map((e=>enrichHTMLUnrolled(e,{rollData:t,rolls:s,relativeTo:this}))))}return a}_computeEncumbrance(){this.system.attributes??={};const e=this.system.attributes;e.encumbrance??={};const t=e.encumbrance,s=this.getCarryCapacity();t.levels=s,t.levels.carry=2*s.heavy,t.levels.drag=5*s.heavy;const a=Math.max(0,this.getCarriedWeight());t.carriedWeight=Math.round(10*a)/10;let i=pf1.config.encumbranceLevels.light;a>0&&(a>t.levels.medium?i=pf1.config.encumbranceLevels.heavy:a>t.levels.light&&(i=pf1.config.encumbranceLevels.medium)),t.level=i;const n={maxDexBonus:null,acp:0};switch(t.level){case pf1.config.encumbranceLevels.medium:n.acp=3,n.maxDexBonus=3;break;case pf1.config.encumbranceLevels.heavy:n.acp=6,n.maxDexBonus=1}return n}_calculateCoinWeight(){const e=game.settings.get("pf1","coinWeight");return e?Object.values(this.system.currency||{}).reduce(((e,t)=>e+(t||0)),0)/e:0}getCarryCapacity(){const e=this.system.details?.carryCapacity??{},t=this.system.abilities.str.total+e.bonus?.total;let s=e.multiplier?.total;const a=this.system.traits.size;this.system.attributes.quadruped?s*=pf1.config.encumbranceMultipliers.quadruped[a]:s*=pf1.config.encumbranceMultipliers.normal[a];const i=pf1.config.encumbranceLoads;let n=Math.floor(i[t]*s);if(t>=i.length){const e=(t-(i.length-1))/10;n=Math.floor(i[i.length-1]*Math.pow(4,e)*s)}return n=pf1.utils.convertWeight(n),{light:Math.floor(n/3),medium:Math.floor(n/3*2),heavy:n}}getCarriedWeight(){const e=this.items.filter((e=>e.isPhysical&&!1!==e.system.carried)).reduce(((e,t)=>e+t.system.weight.total),this._calculateCoinWeight());return pf1.utils.convertWeight(e)}mergeCurrency({inLowestDenomination:e=!1}={}){return foundry.utils.logCompatibilityWarning("ActorPF.mergeCurrency() is deprecated in favor of ActorPF.getTotalCurrency()",{since:"PF1 v10",until:"PF1 v11"}),this.getTotalCurrency({inLowestDenomination:e},{v2:!0})}getCurrency(e="currency",{inLowestDenomination:t=!0}={}){const s=this.system[e];if(!s)return console.error(`Currency type "${e}" not found.`),NaN;const a=1e3*s.pp+100*s.gp+10*s.sp+s.cp;return t?a:a/100}getTotalCurrency(e,t){if("string"==typeof e||void 0===e)return foundry.utils.logCompatibilityWarning("ActorPF.getTotalCurrency() parameters changed. Options are now the first and only parameter. Old behaviour is found in getCurrency()",{since:"PF1 v10",until:"PF1 v11"}),this.getCurrency(e,t);e??={},e.inLowestDenomination??=!0;const s=this.getCurrency("currency",{inLowestDenomination:!0})+this.getCurrency("altCurrency",{inLowestDenomination:!0});return e.inLowestDenomination?s:s/100}convertCurrency(e="currency",t="pp"){const s=this.getCurrency(e,{inLowestDenomination:!0});if(!Number.isFinite(s))return void console.error(`Invalid total currency "${s}" in "${e}" category`);const a=pf1.utils.currency.convert(s,t);return this.update({system:{[e]:a}})}_prepareArmorData({id:e,type:t}={},s){s.type=t??null;const a=this.items.get(e)?.system;a&&(s.ac=a.armor.value??0,s.enh=a.armor.enh??0,s.total=s.ac+s.enh,Number.isFinite(s.total)||(s.total=0))}getRollData(e={refresh:!1}){const t=!e.refresh&&this._rollData,s={...t?this._rollData:foundry.utils.deepClone(this.system)};if(t)for(const e of pf1.config.temporaryRollDataFields.actor)foundry.utils.setProperty(s,e,void 0);if(game.combats?.viewed&&(s.combat={round:game.combat.round||0}),s.conditions??={},s.conditions.loseDexToAC=this.changeFlags?.loseDexToAC??!1,t)return s;const a=Object.keys(pf1.config.sizeChart);s.size=a.indexOf(s.traits.size),s.armor={type:0,total:0,ac:0,enh:0},s.shield={type:0,total:0,ac:0,enh:0};const i=this.equipment;i&&(this._prepareArmorData(i.armor,s.armor),this._prepareArmorData(i.shield,s.shield)),s.spells=s.attributes.spells.spellbooks;for(const[e,t]of Object.entries(s.spells))t.abilityMod=s.abilities[t.ability]?.mod??0,t.class&&"_hd"!==t.class&&(s.spells[t.class]??=t);s.dFlags=this.itemFlags?.dictionary??{},s.bFlags=Object.fromEntries(Object.entries(this.itemFlags?.boolean??{}).map((([e,{sources:t}])=>[e,t.length>0?1:0]))),s.range=this.system.traits?.reach?.total??NaN,s.classes=this.classes;const n=s.attributes.energyDrain??0;if(n>0&&s.classes)for(const e of Object.values(s.classes))e.level=Math.max(0,e.unlevel-n);const o=s.abilities[s.attributes.hpAbility];return Object.defineProperty(s.attributes,"hpAbility",{get:()=>o}),s.alignment=pf1.utils.parseAlignment(this.system.details?.alignment||"tn"),this._rollData=s,Hooks.events.pf1GetRollData?.length>0&&Hooks.callAll("pf1GetRollData",this,s),s}static getReach(e="med",t="tall"){let s=e>=0?e:Object.keys(pf1.config.sizeChart).indexOf(e);"tall"!==t&&s>0&&(s-=1);const reachStruct=(e,t)=>({melee:e,reach:t});switch(s){case 0:case 1:return reachStruct(0,0);case 2:return reachStruct(0,5);default:case 3:case 4:return reachStruct(5,10);case 5:return reachStruct(10,20);case 6:return reachStruct(15,30);case 7:return reachStruct(20,40);case 8:return reachStruct(30,60)}}getQuickActions(){return this.items.filter((e=>e.isActive&&!0===e.system.showInQuickbar&&["weapon","equipment","consumable","attack","spell","feat"].includes(e.type)&&!e.showUnidentifiedData)).sort(((e,t)=>e.sort-t.sort)).map((e=>{const t={item:e,name:e.name,id:e.id,type:e.type,img:e.img,get isSingleUse(){return e.isSingleUse},get haveAnyCharges(){return this.item.isCharged&&Number.isFinite(this.maxCharge)},get maxCharge(){return e.maxCharges},get charges(){return this.item.charges}};if(t.isCharged=t.haveAnyCharges,t.isCharged){let s=e.defaultAction?.getChargeCost()??e.getDefaultChargeCost();0==s&&(t.isCharged=!1),t.recharging=s<0,s=Math.abs(s),0!=s&&(t.max=t.maxCharge,t.uses=t.charges,t.recharging?(t.uses=Math.ceil((t.max-t.uses)/s),t.max=Math.ceil(t.max/s)):(t.uses=Math.floor(t.uses/s),t.max=Math.floor(t.max/s)))}else{const s=e.defaultAction;if(s?.ammoType){const s=e.defaultAmmo;s&&(t.isCharged=!0,t.uses=s.system.quantity||0)}}return t}))}refreshAbilityModifiers(){for(const e of Object.keys(this.system.abilities)){const t=this.system.abilities[e].total,s=Math.abs(this.system.abilities[e].penalty||0),a=this.system.abilities[e].damage,i=pf1.utils.getAbilityModifier(t,{penalty:s,damage:a});this.system.abilities[e].mod=i}}async importFromJSON(e){const t=JSON.parse(e);return delete t._id,t.effects=[],this.update(t,{diff:!1,recursive:!1})}getFeatCount(){const e=this.itemTypes.feat.filter((e=>"feat"===e.subType)),t={max:0,active:e.filter((e=>e.isActive)).length,owned:e.length,levels:0,mythic:0,formula:0,changes:0,disabled:0,excess:0,missing:0};Object.defineProperty(t,"value",{get(){return foundry.utils.logCompatibilityWarning("getFeatCount().value is deprecated in favor of getFeatCount().active",{since:"PF1 v10",until:"PF1 v11"}),this.active}});null===this.system.abilities?.int?.value||(t.levels=Math.ceil(this.system.attributes.hd.total/2),t.max+=t.levels,t.mythic=Math.ceil(this.system.details.mythicTier/2),t.max+=t.mythic);const s=RollPF.safeRollSync(this.system.details?.bonusFeatFormula||"0",this.getRollData());t.formula=s.total,t.max+=t.formula,s.err&&console.error(`An error occurred in the Bonus Feat Formula of actor "${this.name}" [${this.id}].`,{formula:this.system.details?.bonusFeatFormula,actor:this},s.err),t.changes=getHighestChanges(this.changes.filter((e=>"bonusFeats"===e.target&&"set"!==e.operator)),{ignoreTarget:!0}).reduce(((e,t)=>e+t.value),0),t.max+=t.changes;const a=t.max-t.active;return t.missing=Math.max(0,a),t.excess=Math.max(0,-a),t.disabled=t.owned-t.active,t}hasItemBooleanFlag(e){return null!=this.itemFlags.boolean[e]}async resetSpellbookUsage({commit:e=!0,rollData:t}={}){const s=this.system,a={};t??=this.getRollData();for(const[e,i]of Object.entries(s.attributes.spells.spellbooks))if(i.inUse)if(i.spellPoints.useSystem){let s=i.spellPoints.max;if(i.spellPoints.restoreFormula){const e=await RollPF.safeRollAsync(i.spellPoints.restoreFormula,t);e.err?console.error(e.err,i.spellPoints.restoreFormula):s=Math.min(i.spellPoints.value+e.total,i.spellPoints.max)}a[`system.attributes.spells.spellbooks.${e}.spellPoints.value`]=s}else for(let t=0;t<10;t++)a[`system.attributes.spells.spellbooks.${e}.spells.spell${t}.value`]=i.spells["spell"+t]?.max??0;return e?this.update(a):a}async rechargeItems({commit:e=!0,...t}={}){this.system;const s=[];for(const e of this.items){const a=await e.recharge({...t,commit:!1})??{};if(a.system??={},e.system.actions?.length>0&&"day"===(t.period||"day")){const t=e.toObject().system.actions;let s=!1;for(const e of t)if("day"===e.uses?.self?.per){const t=e.uses.self.max||0;e.uses.self.value<t&&(e.uses.self.value=t,s=!0)}s&&(a.system.actions=t)}foundry.utils.isEmpty(a.system)||(a._id=e.id,s.push(a))}return e?s.length?this.updateEmbeddedDocuments("Item",s):[]:s}_restingHeal(e={}){const t=this.system,s=t.attributes.hp,a=t.attributes?.wounds,i=t.attributes?.vigor,{hours:n,longTermCare:o}=e,r={},l=t.attributes.hd.total,c={hp:l,abl:1,nonlethal:n*l,vigor:i?.max??0,wounds:a?.max>0?1:0};n>=24&&(c.hp+=1,c.wounds+=Math.floor(l/2),c.abl+=1),!0===o&&(c.hp*=2,c.abl*=2,c.wounds*=2),r["system.attributes.hp.value"]=Math.min(s.value+c.hp,s.max),r["system.attributes.hp.nonlethal"]=Math.max(0,(s.nonlethal||0)-c.nonlethal);for(const[e,s]of Object.entries(t.abilities)){const t=Math.abs(s.damage);r[`system.abilities.${e}.damage`]=Math.max(0,t-c.abl)}return a?.max&&i?.max&&(r["system.attributes.wounds.value"]=Math.min(a.value+c.wounds,a.max),r["system.attributes.vigor.value"]=Math.min(i.value+c.vigor,i.max)),r}async performRest(e={}){const{restoreHealth:t=!0,longTermCare:s=!1,restoreDailyUses:a=!0,hours:i=8,verbose:n=!1}=e;this.system;const o={};if(!0===t){const t=this._restingHeal(e);foundry.utils.mergeObject(o,t)}let r=[];if(!0===a){const e=await this.resetSpellbookUsage({commit:!1});foundry.utils.mergeObject(o,e),r=await this.rechargeItems({commit:!1,updateData:o,period:"day"})}e={restoreHealth:t,restoreDailyUses:a,longTermCare:s,hours:i};if(!1===Hooks.call("pf1PreActorRest",this,e,o,r))return;const l={pf1:{action:"rest",restOptions:e}};if(r.length&&await this.updateEmbeddedDocuments("Item",r,foundry.utils.deepClone(l)),foundry.utils.isEmpty(o.system)||await this.update(o,foundry.utils.deepClone(l)),Hooks.callAll("pf1ActorRest",this,e,o,r),n){const e=a?"PF1.FullRestMessage":"PF1.RestMessage";ui.notifications.info(game.i18n.format(e,{name:this.token?.name??this.name,hours:i}))}return{options:e,updateData:o,itemUpdates:r}}async modifyTokenAttribute(e,t,s=!1,a=!0){let i=this;const n=foundry.utils.getProperty(this.system,e),o={},r=n instanceof Resource;if(r&&(i=n.item),!i)return;if("attributes.hp"===e){s||(t=-1*(n.temp+n.value-t));let e=t;n.temp>0&&t<0&&(e=Math.min(0,n.temp+t),o["system.attributes.hp.temp"]=Math.max(0,n.temp+t)),o["system.attributes.hp.value"]=Math.min(n.value+e,n.max)}else if("attributes.vigor"===e){s||(t=-1*(n.temp+n.value-t));let e=t;n.temp>0&&t<0&&(e=Math.min(0,n.temp+t),o["system.attributes.vigor.temp"]=Math.max(0,n.temp+t)),o["system.attributes.vigor.value"]=Math.min(n.value+e,n.max)}else s?r?o["system.uses.value"]=Math.min(n.value+t,n.max):a?o[`system.${e}.value`]=Math.clamped(n.value+t,n.min||0,n.max):o["system."+e]=n+t:r?o["system.uses.value"]=Math.clamped(t,0,n.max):a?o[`system.${e}.value`]=Math.min(t,n.max):o["system."+e]=t;return!1!==Hooks.call("modifyTokenAttribute",{attribute:e,value:t,isDelta:s,isBar:a},o)?i.update(o):this}get visionSharingSheet(){return this._visionSharingSheet??=new VisionSharingSheet(this),this._visionSharingSheet}}const createItemMacro=async(e,t)=>{const s=fromUuidSync(e),a=`fromUuidSync("${e}").use();`;let i=game.macros.contents.find((e=>e.name===s.name&&e.data.command===a));return i||(i=await Macro.create({name:s.name,type:"script",img:s.img,command:a,flags:{"pf1.itemMacro":!0}},{displaySheet:!1})),game.user.assignHotbarMacro(i,t)},createActionMacro=async(e,t,s)=>{const a=fromUuidSync(t),i=a?.actions.get(e);if(!i)return void ui.notifications.error(game.i18n.format("PF1.Error.ActionNotFound",{id:e,item:a?.name,actor:a?.actor?.name}));const n=`fromUuidSync("${t}")\n\t.actions.get("${e}")\n\t.use();`;let o=game.macros.contents.find((e=>e.name===a.name&&e.data.command===n));return o||(o=await Macro.create({name:`${i.name} (${a.name})`,type:"script",img:i.img||a.img,command:n,flags:{pf1:{actionMacro:{item:t,action:e}}}},{displaySheet:!1})),game.user.assignHotbarMacro(o,s)},createSkillMacro=async(e,t,s)=>{const a=fromUuidSync(t);if(!a)return;const i=a.getSkillInfo(e),n=`fromUuidSync("${a.uuid}")\n\t.rollSkill("${e}");`,o=game.i18n.format("PF1.RollSkillMacroName",{actor:a.name,skill:i.fullName});let r=game.macros.contents.find((e=>e.name===o&&e.data.command===n));return r||(r=await Macro.create({name:o,type:"script",img:"systems/pf1/icons/items/inventory/dice.jpg",command:n,flags:{"pf1.skillMacro":!0}},{displaySheet:!1})),game.user.assignHotbarMacro(r,s)},createSaveMacro=async(e,t,s)=>{const a=fromUuidSync(t);if(!a)return;const i=game.i18n.localize("PF1.SavingThrow"+e.capitalize()),n=`fromUuidSync("${a.uuid}")\n\t.rollSavingThrow("${e}");`,o=game.i18n.format("PF1.RollSaveMacroName",{actor:a.name,type:i});let r=game.macros.contents.find((e=>e.name===o&&e.data.command===n));return r||(r=await Macro.create({name:o,type:"script",img:"systems/pf1/icons/items/inventory/dice.jpg",command:n,flags:{"pf1.saveMacro":!0}},{displaySheet:!1})),game.user.assignHotbarMacro(r,s)},createMiscActorMacro=async(e,t,s,a)=>{const i=fromUuidSync(t);if(!i)return;const getBookLabel=e=>i.system.attributes?.spells?.spellbooks?.[e]?.label;let n,o,r=`fromUuidSync("${i.uuid}")\n\t`;switch(e){case"defenses":r+=".displayDefenseCard();",n=game.i18n.format("PF1.DisplayDefensesMacroName",{actor:i.name}),o="systems/pf1/icons/items/armor/shield-light-metal.png";break;case"cmb":r+=".rollAttack({maneuver:true});",n=game.i18n.format("PF1.RollCMBMacroName",{actor:i.name}),o="systems/pf1/icons/feats/improved-grapple.jpg";break;case"cl":{const{bookId:e}=a;r+=`.rollCL("${e}");`,n=game.i18n.format("PF1.RollCLMacroName",{actor:i.name,book:getBookLabel(e)}),o="systems/pf1/icons/spells/wind-grasp-eerie-3.jpg";break}case"concentration":{const{bookId:e}=a;r+=`.rollConcentration("${e}");`,n=game.i18n.format("PF1.RollConcentrationMacroName",{actor:i.name,book:getBookLabel(e)}),o="systems/pf1/icons/skills/light_01.jpg";break}case"bab":r+=".rollBAB();",n=game.i18n.format("PF1.RollBABMacroName",{actor:i.name}),o="systems/pf1/icons/skills/yellow_08.jpg";break;case"initiative":r+=".rollInitiative();",n=game.i18n.format("PF1.RollInitiativeMacroName",{actor:i.name}),o="systems/pf1/icons/skills/weapon_41.jpg";break;case"attack":{const{attack:e}=a,t="melee"===e;r+=`.rollAttack({ ranged: ${t?"false":"true"}});`,n=game.i18n.format(t?"PF1.RollMeleeMacroName":"PF1.RollRangedMacroName",{actor:i.name}),o=t?"systems/pf1/icons/skills/weapon_23.jpg":"systems/pf1/icons/skills/arrow_07.jpg";break}case"abilityScore":{const{ability:e}=a;r+=`.rollAbilityTest("${e}");`,n=game.i18n.format("PF1.RollAbilityMacroName",{actor:i.name,ability:CONFIG.PF1.abilities[e]}),o="systems/pf1/icons/skills/blue_35.jpg";break}}if(!n)return;let l=game.macros.contents.find((e=>e.name===n&&e.command===r));return l??=await Macro.create({name:n,type:"script",img:o,command:r,flags:{pf1:{type:e,actor:t}}},{displaySheet:!1}),game.user.assignHotbarMacro(l,s)},p=Object.freeze(Object.defineProperty({__proto__:null,createActionMacro,createItemMacro,createMiscActorMacro,createSaveMacro,createSkillMacro},Symbol.toStringTag,{value:"Module"}));function hideRollInfo(e,t,s){const a=e.whisper||[],i=a.length&&e.blind;!a.length||(a.includes(game.user.id)||e.isAuthor&&!i)||(t.find(".dice-formula").text("???"),t.find(".dice-total").text("?"),t.find(".dice").text(""),t.find(".success").removeClass("success"),t.find(".failure").removeClass("failure"))}function hideGMSensitiveInfo(e,t,s){if(game.user.isGM){const s=e.flags.pf1?.identifiedInfo??{},{identified:a=!0}=s;if(!a&&e.hasItemSource){t.find(".card-content").append(function getIdentifiedBlock(e){const t=e.actionName&&!e.actionDescription;return _templateCache["systems/pf1/templates/chat/parts/gm-description.hbs"]?.({...e,hasCombinedName:t},{allowProtoMethodsByDefault:!0,allowProtoPropertiesByDefault:!0})??""}(s))}return}t.find(".gm-sensitive-always").remove(),t.find("[data-gm-sensitive-uuid]").each(((e,t)=>{(t=$(t)).hide();const s=t.data("gm-sensitive-uuid");if(!s)return;let a=fromUuidSync(s);(a instanceof Token||a instanceof TokenDocument)&&(a=a.actor),a?.testUserPermission&&a.testUserPermission(game.user,"OBSERVER")?t.show():t.remove()}));const a=ChatMessage.getSpeakerActor(e.speaker);a?.testUserPermission(game.user,CONST.DOCUMENT_OWNERSHIP_LEVELS.OBSERVER)||(t.find(".gm-sensitive").remove(),t.find("[data-gm-sensitive-inner]").each(((e,t)=>{(game.settings.get("pf1","obscureSaveDCs")||"save"!==t.dataset.action)&&((t=$(t)).text(t.data("gm-sensitive-inner")),t.removeData("gm-sensitive-inner"))})),game.settings.get("pf1","obscureInlineRolls")&&t.find(".inline-roll").each(((t,s)=>{if(!s.dataset.roll)return;let a;try{a=Roll.fromJSON(unescape(s.dataset.roll))}catch(t){return void console.error(`Inline roll in chat message ${e.id} had invalid data`,t)}const i=Roll.defaultImplementation.safeRollSync(""+a.total);s.dataset.roll=escape(JSON.stringify(i)),delete s.dataset.tooltip,s.classList.add("obfuscated")})))}function alterAmmoRecovery(e,t){const s=e.getFlag("pf1","ammoRecovery");s&&t.find(".chat-attack .ammo[data-ammo-id]").each(((e,t)=>{const a=t.closest(".chat-attack").dataset.index,i=t.dataset.ammoId,n=s[a]?.[i];if(!n)return;const{recovered:o}=n;$(t).find(".inline-action").each(((e,t)=>{void 0!==o&&(o>0?t.classList.add("recovered"):t.classList.add("recovery-failed"))}))}))}function alterTargetDefense(e,t){const s=e.getFlag("pf1","targetDefense");s&&t.find(".attack-targets .saving-throws div[data-saving-throw]").each(((e,t)=>{const a=t.closest(".target").dataset.uuid,i=t.dataset.savingThrow,n=foundry.utils.getProperty(s,`${a}.save.${i}`);null!=n&&$(t).find(".value").text(n.toString())}))}function applyAccessibilitySettings(e,t,s,a){}async function hideInvisibleTargets(e,t,s=!1){const a=t.querySelector(".pf1.chat-card .attack-targets");if(!a)return;if(!canvas.ready){if(s)return;return a.style.display="none",void(game.settings.get("core","noCanvas")?a.remove():Hooks.once("canvasReady",(()=>hideInvisibleTargets(e,t,!0))))}const i=a.querySelectorAll(".target"),n=Array.from(i).map((e=>({uuid:e.dataset.uuid,elem:e})));let o=!1;for(const e of n){const t=fromUuidSync(e.uuid);if(!t)continue;e.token=t.object;const s=e.token?.isVisible,a=t.actor?.testUserPermission(game.user,CONST.DOCUMENT_OWNERSHIP_LEVELS.OBSERVER)??!1;s||a?(o=!0,$(e.elem).show()):$(e.elem).hide()}o?i.style.removeProperty("display"):a.remove()}const getTokenByUuid=e=>fromUuidSync(e)?.object;function addTargetCallbacks(e,t){const s=t[0].querySelectorAll(".attack-targets .target[data-uuid]");function _mouseEnterCallback(e,t){getTokenByUuid(t)?._onHoverIn(e,{hoverOutOthers:!1})}function _mouseLeaveCallback(e,t){getTokenByUuid(t)?._onHoverOut(e)}function _imageClickCallback(e,t){e.preventDefault();const s=getTokenByUuid(t);if(!s?.actor.testUserPermission(game.user,CONST.DOCUMENT_OWNERSHIP_LEVELS.OBSERVER))return;const a=e.shiftKey;(!a||!s.controlled&&a)&&pf1.utils.chat.panToToken(s),s.actor.isOwner&&(s.controlled?a&&s.release():s.control({releaseOthers:!a}))}for(let a of s){const s=a.dataset.uuid;if(!fromUuidSync(s))continue;const i=a.querySelector(".target-image");i.addEventListener("pointerenter",(e=>_mouseEnterCallback(e,s)),{passive:!0}),i.addEventListener("pointerleave",(e=>_mouseLeaveCallback(e,s)),{passive:!0}),i.addEventListener("click",(e=>_imageClickCallback(e,s))),a=$(a),a.find(".ac").on("click",(a=>{a.preventDefault();const i=fromUuidSync(s);i?.actor&&pf1.utils.chat.targetACClick(e,t,i.actor,a)})),a.find(".saving-throws .click").on("click",(a=>{a.preventDefault();const i=fromUuidSync(s);i?.actor&&pf1.utils.chat.targetSavingThrowClick(e,t,i.actor,a)}))}}const m=Object.freeze(Object.defineProperty({__proto__:null,addTargetCallbacks,alterAmmoRecovery,alterTargetDefense,applyAccessibilitySettings,createInlineRollString:function createInlineRollString(e,{hide3d:t=!0}={}){foundry.utils.logCompatibilityWarning("pf1.utils.chat.createInlineRollString() is deprecated with no replacement",{since:"PF1 v10",until:"PF1 v11"});const s=e.toAnchor();return t&&s.classList.add("inline-dsn-hidden"),s.outerHTML},hideGMSensitiveInfo,hideInvisibleTargets,hideRollInfo,panToToken:function panToToken(e,t=250){canvas.animatePan({...e.center,duration:t})},targetACClick:async function targetACClick(e,t,s,a){s.displayDefenseCard({rollMode:"selfroll"})},targetSavingThrowClick:async function targetSavingThrowClick(e,t,s,a){const i=a.currentTarget,n=i.dataset.savingThrow,o=await s.rollSavingThrow(n,{event:a}),r=o?.rolls?.[0]?.total;if(null!=r){const t=i.closest(".target").dataset.uuid;await e.setFlag("pf1","targetDefense",{[t]:{save:{[n]:r}}})}}},Symbol.toStringTag,{value:"Module"}));const d=new Proxy(ActorBasePF,{construct(e,t){const s=t[0]?.type;return new(CONFIG.Actor.documentClasses[s]??ActorBasePF)(...t)}}),h=new Proxy(ItemBasePF,{construct(e,t){const s=t[0]?.type;return new(CONFIG.Item.documentClasses[s]??ItemBasePF)(...t)}}),g=CONFIG.MeasuredTemplate.types,f={castsPerDay:{prepared:{low:[[1/0],[1/0],[1/0],[1/0,0],[1/0,1],[1/0,1],[1/0,1,0],[1/0,1,1],[1/0,2,1],[1/0,2,1,0],[1/0,2,1,1],[1/0,2,2,1],[1/0,3,2,1,0],[1/0,3,2,1,1],[1/0,3,2,2,1],[1/0,3,3,2,1],[1/0,4,3,2,1],[1/0,4,3,2,2],[1/0,4,3,3,2],[1/0,4,4,3,3]],med:[[1/0,1],[1/0,2],[1/0,3],[1/0,3,1],[1/0,4,2],[1/0,4,3],[1/0,4,3,1],[1/0,4,4,2],[1/0,5,4,3],[1/0,5,4,3,1],[1/0,5,4,4,2],[1/0,5,5,4,3],[1/0,5,5,4,3,1],[1/0,5,5,4,4,2],[1/0,5,5,5,4,3],[1/0,5,5,5,4,3,1],[1/0,5,5,5,4,4,2],[1/0,5,5,5,5,4,3],[1/0,5,5,5,5,5,4],[1/0,5,5,5,5,5,5]],high:[[1/0,1],[1/0,2],[1/0,2,1],[1/0,3,2],[1/0,3,2,1],[1/0,3,3,2],[1/0,4,3,2,1],[1/0,4,3,3,2],[1/0,4,4,3,2,1],[1/0,4,4,3,3,2],[1/0,4,4,4,3,2,1],[1/0,4,4,4,3,3,2],[1/0,4,4,4,4,3,2,1],[1/0,4,4,4,4,3,3,2],[1/0,4,4,4,4,4,3,2,1],[1/0,4,4,4,4,4,3,3,2],[1/0,4,4,4,4,4,4,3,2,1],[1/0,4,4,4,4,4,4,3,3,2],[1/0,4,4,4,4,4,4,4,3,3],[1/0,4,4,4,4,4,4,4,4,4]]},spontaneous:{low:[[1/0],[1/0],[1/0],[1/0,1],[1/0,1],[1/0,1],[1/0,1,1],[1/0,1,1],[1/0,2,1],[1/0,2,1,1],[1/0,2,1,1],[1/0,2,2,1],[1/0,3,2,1,1],[1/0,3,2,1,1],[1/0,3,2,2,1],[1/0,3,3,2,1],[1/0,4,3,2,1],[1/0,4,3,2,2],[1/0,4,3,3,2],[1/0,4,4,3,2]],med:[[1/0,1],[1/0,2],[1/0,3],[1/0,3,1],[1/0,4,2],[1/0,4,3],[1/0,4,3,1],[1/0,4,4,2],[1/0,5,4,3],[1/0,5,4,3,1],[1/0,5,4,4,2],[1/0,5,5,4,3],[1/0,5,5,4,3,1],[1/0,5,5,4,4,2],[1/0,5,5,5,4,3],[1/0,5,5,5,4,3,1],[1/0,5,5,5,4,4,2],[1/0,5,5,5,5,4,3],[1/0,5,5,5,5,5,4],[1/0,5,5,5,5,5,5]],high:[[1/0,3],[1/0,4],[1/0,5],[1/0,6,3],[1/0,6,4],[1/0,6,5,3],[1/0,6,6,4],[1/0,6,6,5,3],[1/0,6,6,6,4],[1/0,6,6,6,5,3],[1/0,6,6,6,6,4],[1/0,6,6,6,6,5,3],[1/0,6,6,6,6,6,4],[1/0,6,6,6,6,6,5,3],[1/0,6,6,6,6,6,6,4],[1/0,6,6,6,6,6,6,5,3],[1/0,6,6,6,6,6,6,6,4],[1/0,6,6,6,6,6,6,6,5,3],[1/0,6,6,6,6,6,6,6,6,4],[1/0,6,6,6,6,6,6,6,6,6]]},hybrid:{high:[[1/0,2],[1/0,3],[1/0,4],[1/0,4,2],[1/0,4,3],[1/0,4,4,2],[1/0,4,4,3],[1/0,4,4,4,2],[1/0,4,4,4,3],[1/0,4,4,4,4,2],[1/0,4,4,4,4,3],[1/0,4,4,4,4,4,2],[1/0,4,4,4,4,4,3],[1/0,4,4,4,4,4,4,2],[1/0,4,4,4,4,4,4,3],[1/0,4,4,4,4,4,4,4,2],[1/0,4,4,4,4,4,4,4,3],[1/0,4,4,4,4,4,4,4,4,2],[1/0,4,4,4,4,4,4,4,4,3],[1/0,4,4,4,4,4,4,4,4,4]]},prestige:{low:[[1/0,1],[1/0,2],[1/0,3],[1/0,3,1],[1/0,4,2],[1/0,4,3],[1/0,4,3,1],[1/0,4,4,2],[1/0,5,4,3],[1/0,5,4,3,1],[1/0,5,4,3,1],[1/0,5,4,3,1],[1/0,5,4,3,1],[1/0,5,4,3,1],[1/0,5,4,3,1],[1/0,5,4,3,1],[1/0,5,4,3,1],[1/0,5,4,3,1],[1/0,5,4,3,1],[1/0,5,4,3,1]]}},spellsPreparedPerDay:{prepared:{low:[[null],[null],[null],[null,0],[null,1],[null,1],[null,1,0],[null,1,1],[null,2,1],[null,2,1,0],[null,2,1,1],[null,2,2,1],[null,3,2,1,0],[null,3,2,1,1],[null,3,2,2,1],[null,3,3,2,1],[null,4,3,2,1],[null,4,3,2,2],[null,4,3,3,2],[null,4,4,3,3]],med:[[3,1],[4,2],[4,3],[4,3,1],[4,4,2],[5,4,3],[5,4,3,1],[5,4,4,2],[5,5,4,3],[5,5,4,3,1],[5,5,4,4,2],[5,5,5,4,3],[5,5,5,4,3,1],[5,5,5,4,4,2],[5,5,5,5,4,3],[5,5,5,5,4,3,1],[5,5,5,5,4,4,2],[5,5,5,5,5,4,3],[5,5,5,5,5,5,4],[5,5,5,5,5,5,5]],high:[[3,1],[4,2],[4,2,1],[4,3,2],[4,3,2,1],[4,3,3,2],[4,4,3,2,1],[4,4,3,3,2],[4,4,4,3,2,1],[4,4,4,3,3,2],[4,4,4,4,3,2,1],[4,4,4,4,3,3,2],[4,4,4,4,4,3,2,1],[4,4,4,4,4,3,3,2],[4,4,4,4,4,4,3,2,1],[4,4,4,4,4,4,3,3,2],[4,4,4,4,4,4,4,3,2,1],[4,4,4,4,4,4,4,3,3,2],[4,4,4,4,4,4,4,4,3,3],[4,4,4,4,4,4,4,4,4,4]]},spontaneous:{low:[[2],[3],[4],[4,2],[5,3],[5,4],[6,4,2],[6,4,3],[6,5,4],[6,5,4,2],[6,5,4,3],[6,6,5,4],[6,6,5,4,2],[6,6,5,4,3],[6,6,6,5,4],[6,6,6,5,4],[6,6,6,5,4],[6,6,6,6,5],[6,6,6,6,5],[6,6,6,6,5]],med:[[4,2],[5,3],[6,4],[6,4,2],[6,4,3],[6,4,4],[6,5,4,2],[6,5,4,3],[6,5,4,4],[6,5,5,4,2],[6,6,5,4,3],[6,6,5,4,4],[6,6,5,5,4,2],[6,6,6,5,4,3],[6,6,6,5,4,4],[6,6,6,5,5,4,2],[6,6,6,6,5,4,3],[6,6,6,6,5,4,4],[6,6,6,6,5,5,4],[6,6,6,6,6,5,5]],high:[[4,2],[5,2],[5,3],[6,3,1],[6,4,2],[7,4,2,1],[7,5,3,2],[8,5,3,2,1],[8,5,4,3,2],[9,5,4,3,2,1],[9,5,5,4,3,2],[9,5,5,4,3,2,1],[9,5,5,4,4,3,2],[9,5,5,4,4,3,2,1],[9,5,5,4,4,4,3,2],[9,5,5,4,4,4,3,2,1],[9,5,5,4,4,4,3,3,2],[9,5,5,4,4,4,3,3,2,1],[9,5,5,4,4,4,3,3,3,2],[9,5,5,4,4,4,3,3,3,3]]},hybrid:{high:[[4,2],[5,2],[5,3],[6,3,1],[6,4,2],[7,4,2,1],[7,5,3,2],[8,5,3,2,1],[8,5,4,3,2],[9,5,4,3,2,1],[9,5,5,4,3,2],[9,5,5,4,3,2,1],[9,5,5,4,4,3,2],[9,5,5,4,4,3,2,1],[9,5,5,4,4,4,3,2],[9,5,5,4,4,4,3,2,1],[9,5,5,4,4,4,3,3,2],[9,5,5,4,4,4,3,3,2,1],[9,5,5,4,4,4,3,3,3,2],[9,5,5,4,4,4,3,3,3,3]]},prestige:{low:[[null,2],[null,3],[null,4],[null,4,2],[null,4,3],[null,4,4],[null,5,4,2],[null,5,4,3],[null,5,4,4],[null,5,5,4,2],[null,5,5,4,2],[null,5,5,4,2],[null,5,5,4,2],[null,5,5,4,2],[null,5,5,4,2],[null,5,5,4,2],[null,5,5,4,2],[null,5,5,4,2],[null,5,5,4,2],[null,5,5,4,2]]}}},y={classes:{class:{label:"PF1.ClassPlural",filters:[{type:"class"}],interface:{types:!0,level:!0,create:!0},create:{type:"class",system:{subType:"base"}},sort:1e3}},combat:{weapon:{label:"PF1.Subtypes.Item.attack.weapon.Plural",filters:[{type:"attack",subTypes:["weapon"]}],interface:{create:!0},create:{type:"attack",system:{subType:"weapon"}},sort:1e3},natural:{label:"PF1.Subtypes.Item.attack.natural.Plural",filters:[{type:"attack",subTypes:["natural"]}],interface:{create:!0},create:{type:"attack",system:{subType:"natural"}},sort:2e3},ability:{label:"PF1.Subtypes.Item.attack.ability.Plural",filters:[{type:"attack",subTypes:["ability"]}],interface:{create:!0},create:{type:"attack",system:{subType:"ability"}},sort:3e3},racialAbility:{label:"PF1.Subtypes.Item.attack.racialAbility.Plural",filters:[{type:"attack",subTypes:["racialAbility"]}],interface:{create:!0},create:{type:"attack",system:{subType:"racialAbility"}},sort:4e3},item:{label:"PF1.Subtypes.Item.attack.item.Plural",filters:[{type:"attack",subTypes:["item"]}],interface:{create:!0},create:{type:"attack",system:{subType:"item"}},sort:5e3},misc:{label:"PF1.Subtypes.Item.attack.misc.Plural",filters:[{type:"attack",subTypes:["misc"]}],interface:{create:!0},create:{type:"attack",system:{subType:"misc"}},sort:6e3}},inventory:{weapon:{label:"PF1.InventoryWeapons",filters:[{type:"weapon"}],interface:{create:!0,actions:!0,equip:!0},create:{type:"weapon"},sort:1e3},armor:{label:"PF1.ArmorOrShield",filters:[{type:"equipment",subTypes:["armor","shield"]}],interface:{create:!0,actions:!0,equip:!0,slots:!0},create:{type:"equipment",system:{subType:"armor",equipmentSubtype:"lightArmor",slot:""}},sort:2e3},equipment:{label:"PF1.InventoryEquipment",filters:[{type:"equipment",subTypes:["wondrous","other","clothing"]}],interface:{create:!0,actions:!0,equip:!0,slots:!0},create:{type:"equipment",system:{subType:"wondrous",slot:"slotless"}},sort:3e3},implants:{label:"PF1.InventoryImplants",filters:[{type:"implant"}],interface:{create:!0,actions:!0,equip:!0,slots:!0},labels:{equip:"PF1.Implanted"},create:{type:"implant",system:{subType:"cybertech"}},sort:4e3},consumable:{label:"PF1.InventoryConsumables",filters:[{type:"consumable"}],interface:{create:!0,actions:!0,equip:!1},create:{type:"consumable"},sort:5e3},gear:{label:"PF1.Subtypes.Item.loot.gear.Plural",filters:[{type:"loot",subTypes:["gear","adventuring","tool","reagent","remedy","herb","animal","animalGear"]}],interface:{create:!0,actions:!0,equip:()=>!pf1.config.unequippableLoot.includes("gear")},create:{type:"loot",system:{subType:"gear"}},sort:6e3},ammo:{label:"PF1.Subtypes.Item.loot.ammo.Plural",filters:[{type:"loot",subTypes:["ammo"]}],interface:{create:!0,actions:!1,equip:()=>!pf1.config.unequippableLoot.includes("ammo")},create:{type:"loot",system:{subType:"ammo"}},sort:8e3},misc:{label:"PF1.Subtypes.Item.loot.misc.Plural",filters:[{type:"loot",subTypes:["misc","food","entertainment","vehicle"]}],interface:{create:!0,actions:!1,equip:!0},create:{type:"loot",system:{subType:"misc"}},sort:9e3},tradeGoods:{label:"PF1.Subtypes.Item.loot.tradeGoods.Plural",filters:[{type:"loot",subTypes:["tradeGoods","treasure"]}],interface:{create:!0,actions:!1,equip:()=>!pf1.config.unequippableLoot.includes("tradeGoods")},create:{type:"loot",system:{subType:"tradeGoods"}},sort:15e3},container:{label:"PF1.InventoryContainers",filters:[{type:"container"}],interface:{create:!0,actions:!1,equip:!0},create:{type:"container"},sort:2e4}},features:{feat:{label:"PF1.Subtypes.Item.feat.feat.Plural",filters:[{type:"feat",subTypes:["feat"]}],interface:{create:!0,actions:!0,types:!0},create:{type:"feat",system:{subType:"feat"}},sort:2e3},classFeat:{label:"PF1.Subtypes.Item.feat.classFeat.Plural",filters:[{type:"feat",subTypes:["classFeat"]}],interface:{create:!0,actions:!0,types:!0},create:{type:"feat",system:{subType:"classFeat"}},sort:1e3},trait:{label:"PF1.Subtypes.Item.feat.trait.Plural",filters:[{type:"feat",subTypes:["trait"]}],interface:{create:!0,actions:!0,types:!0},create:{type:"feat",system:{subType:"trait"}},sort:3e3},racial:{label:"PF1.Subtypes.Item.feat.racial.Plural",filters:[{type:"feat",subTypes:["racial"]}],interface:{create:!0,actions:!0,types:!0},create:{type:"feat",system:{subType:"racial"}},sort:4e3},misc:{label:"PF1.Subtypes.Item.feat.misc.Plural",filters:[{type:"feat",subTypes:["misc"]}],interface:{create:!0,actions:!0,types:!0},create:{type:"feat",system:{subType:"misc"}},sort:15e3},template:{label:"PF1.Subtypes.Item.feat.template.Plural",filters:[{type:"feat",subTypes:["template"]}],interface:{create:!0,actions:!1},create:{type:"feat",system:{subType:"template"}},sort:6e3}},buffs:{feat:{label:"PF1.Subtypes.Item.buff.feat.Plural",filters:[{type:"buff",subTypes:["feat"]}],interface:{create:!0,actions:!0},create:{type:"buff",system:{subType:"feat"}},sort:5e3},item:{label:"PF1.Subtypes.Item.buff.item.Plural",filters:[{type:"buff",subTypes:["item"]}],interface:{create:!0,actions:!0},create:{type:"buff",system:{subType:"item"}},sort:4e3},misc:{label:"PF1.Subtypes.Item.buff.misc.Plural",filters:[{type:"buff",subTypes:["misc"]}],interface:{create:!0,actions:!0},create:{type:"buff",system:{subType:"misc"}},sort:1e4},perm:{label:"PF1.Subtypes.Item.buff.perm.Plural",filters:[{type:"buff",subTypes:["perm"]}],interface:{create:!0,actions:!0},create:{type:"buff",system:{subType:"perm"}},sort:6e3},spell:{label:"PF1.Subtypes.Item.buff.spell.Plural",filters:[{type:"buff",subTypes:["spell"]}],interface:{create:!0,actions:!0},create:{type:"buff",system:{subType:"spell"}},sort:2e3},temp:{label:"PF1.Subtypes.Item.buff.temp.Plural",filters:[{type:"buff",subTypes:["temp"]}],interface:{create:!0,actions:!0},create:{type:"buff",system:{subType:"temp"}},sort:1e3}},spells:{spell:{interface:{create:!0},create:{type:"spell",system:{school:"abj"}}}},combatlite:{attacks:{label:"PF1.AbilityPlural",filters:[{type:"attack"}],interface:{create:!0,types:!0},create:{type:"attack",system:{subType:"weapon"}}}},misc:{race:{create:{type:"race"}}}};Hooks.once("setup",(()=>{for(const[e,t]of Object.entries(y))for(const[s,a]of Object.entries(t)){a.category=e,a.id=s,a.path=`${e}.${s}`,a.label=game.i18n.localize(a.label);const t=a.interface;"function"==typeof t?.equip&&(t.equip=t.equip())}}));const b=Object.freeze(Object.defineProperty({__proto__:null,CHARACTER_EXP_LEVELS:{slow:[0,3e3,7500,14e3,23e3,35e3,53e3,77e3,115e3,16e4,235e3,33e4,475e3,665e3,955e3,135e4,19e5,27e5,385e4,535e4],medium:[0,2e3,5e3,9e3,15e3,23e3,35e3,51e3,75e3,105e3,155e3,22e4,315e3,445e3,635e3,89e4,13e5,18e5,255e4,36e5],fast:[0,1300,3300,6e3,1e4,15e3,23e3,34e3,5e4,71e3,105e3,145e3,21e4,295e3,425e3,6e5,85e4,12e5,17e5,24e5]},CR_EXP_LEVELS:[200,400,600,800,1200,1600,2400,3200,4800,6400,9600,12800,19200,25600,38400,51200,76800,102400,153600,204800,307200,409600,614400,819200,1228800,1638400,2457600,3276800,4915200,6553600,9830400],abilities:{str:"PF1.AbilityStr",dex:"PF1.AbilityDex",con:"PF1.AbilityCon",int:"PF1.AbilityInt",wis:"PF1.AbilityWis",cha:"PF1.AbilityCha"},abilitiesShort:{str:"PF1.AbilityShortStr",dex:"PF1.AbilityShortDex",con:"PF1.AbilityShortCon",int:"PF1.AbilityShortInt",wis:"PF1.AbilityShortWis",cha:"PF1.AbilityShortCha"},abilityActivationTypes:{nonaction:"PF1.Activation.nonaction.Single",passive:"PF1.Activation.passive.Single",free:"PF1.Activation.free.Single",swift:"PF1.Activation.swift.Single",immediate:"PF1.Activation.immediate.Single",move:"PF1.Activation.move.Single",standard:"PF1.Activation.standard.Single",full:"PF1.Activation.fullRound.Single",attack:"PF1.Activation.attack.Single",aoo:"PF1.Activation.aoo.Single",round:"PF1.Activation.round.Single",minute:"PF1.Activation.minute.Single",hour:"PF1.Activation.hour.Single",special:"PF1.Activation.special.Single"},abilityActivationTypesPlurals:{free:"PF1.Activation.free.Plural",swift:"PF1.Activation.swift.Plural",immediate:"PF1.Activation.immediate.Plural",move:"PF1.Activation.move.Plural",standard:"PF1.Activation.standard.Plural",full:"PF1.Activation.fullRound.Plural",attack:"PF1.Activation.attack.Plural",round:"PF1.Activation.round.Plural",minute:"PF1.Activation.minute.Plural",hour:"PF1.Activation.hour.Plural"},abilityActivationTypesPlurals_unchained:{passive:"PF1.Activation.passive.Plural",free:"PF1.Activation.free.Plural",reaction:"PF1.Activation.reaction.Plural",action:"PF1.Activation.action.Plural",minute:"PF1.Activation.minute.Plural",hour:"PF1.Activation.hour.Plural",special:"PF1.Activation.special.Plural"},abilityActivationTypes_unchained:{nonaction:"PF1.Activation.nonaction.Single",passive:"PF1.Activation.passive.Single",free:"PF1.Activation.free.Single",reaction:"PF1.Activation.reaction.Single",action:"PF1.Activation.action.Single",attack:"PF1.Activation.attack.Single",aoo:"PF1.Activation.aoo.Single",minute:"PF1.Activation.minute.Single",hour:"PF1.Activation.hour.Single",special:"PF1.Activation.special.Single"},abilityCost:{7:-4,8:-2,9:-1,10:0,11:1,12:2,13:3,14:5,15:7,16:10,17:13,18:17},abilityDamageHeldMultipliers:{oh:.5,normal:1,"2h":1.5},abilityDamageMultipliers:[{value:.5,label:"×0.5"},{value:1,label:"×1"},{value:1.5,label:"×1.5"},{value:2,label:"×2"},{value:2.5,label:"×2.5"}],abilityTypes:{na:{long:"PF1.AbilityTypes.na.Label",short:"PF1.AbilityTypes.na.Short"},ex:{long:"PF1.AbilityTypes.ex.Label",short:"PF1.AbilityTypes.ex.Short"},su:{long:"PF1.AbilityTypes.su.Label",short:"PF1.AbilityTypes.su.Short"},sp:{long:"PF1.AbilityTypes.sp.Label",short:"PF1.AbilityTypes.sp.Short"}},ac:{normal:"PF1.ACNormal",touch:"PF1.ACTouch",flatFooted:"PF1.ACFlatFooted"},actorSizes:{fine:"PF1.ActorSize.fine",dim:"PF1.ActorSize.dim",tiny:"PF1.ActorSize.tiny",sm:"PF1.ActorSize.sm",med:"PF1.ActorSize.med",lg:"PF1.ActorSize.lg",huge:"PF1.ActorSize.huge",grg:"PF1.ActorSize.grg",col:"PF1.ActorSize.col"},actorStatures:{tall:"PF1.StatureTall",long:"PF1.StatureLong"},alignments:{lg:"PF1.Alignments.lg",ng:"PF1.Alignments.ng",cg:"PF1.Alignments.cg",ln:"PF1.Alignments.ln",tn:"PF1.Alignments.tn",cn:"PF1.Alignments.cn",le:"PF1.Alignments.le",ne:"PF1.Alignments.ne",ce:"PF1.Alignments.ce"},alignmentsShort:{lg:"PF1.Alignments.Short.lg",ng:"PF1.Alignments.Short.ng",cg:"PF1.Alignments.Short.cg",ln:"PF1.Alignments.Short.ln",tn:"PF1.Alignments.Short.tn",cn:"PF1.Alignments.Short.cn",le:"PF1.Alignments.Short.le",ne:"PF1.Alignments.Short.ne",ce:"PF1.Alignments.Short.ce"},ammoTypes:{arrow:"PF1.AmmoType.arrow",bolt:"PF1.AmmoType.bolt",repeatingBolt:"PF1.AmmoType.repeatingBolt",slingBullet:"PF1.AmmoType.slingBullet",gunBullet:"PF1.AmmoType.gunBullet",dragoonBullet:"PF1.AmmoType.dragoonBullet",dart:"PF1.AmmoType.dart",siege:"PF1.AmmoType.siege"},arbitrarySkills:["art","crf","lor","prf","pro"],armorCost:{humanoid:{fine:.5,dim:.5,tiny:.5,sm:1,med:1,lg:2,huge:4,grg:8,col:16},nonhumanoid:{fine:1,dim:1,tiny:1,sm:2,med:2,lg:4,huge:8,grg:16,col:32}},armorProficiencies:{lgt:"PF1.Proficiency.Armor.light",med:"PF1.Proficiency.Armor.medium",hvy:"PF1.Proficiency.Armor.heavy",shl:"PF1.Proficiency.Armor.shield",twr:"PF1.Proficiency.Armor.tower"},armorTypes:{none:0,light:1,medium:2,heavy:3},armorWeight:{fine:.1,dim:.1,tiny:.1,sm:.5,med:1,lg:2,huge:5,grg:8,col:12},attackTypes:{weapon:"PF1.Subtypes.Item.attack.weapon.Single",natural:"PF1.Subtypes.Item.attack.natural.Single",ability:"PF1.Subtypes.Item.attack.ability.Single",racialAbility:"PF1.Subtypes.Item.attack.racialAbility.Single",item:"PF1.Item",misc:"PF1.Misc"},auraStrengths:{1:"PF1.Aura.Strength.faint",2:"PF1.Aura.Strength.moderate",3:"PF1.Aura.Strength.strong",4:"PF1.Aura.Strength.overwhelming"},backgroundOnlySkills:["lor","art"],backgroundSkillClasses:["base","prestige"],backgroundSkills:["apr","art","crf","han","ken","kge","khi","kno","lin","lor","prf","pro","slt"],backgroundSkillsPerLevel:2,bonusTypes:{untyped:"PF1.ModifierType.untyped",untypedPerm:"PF1.ModifierType.untypedPerm",base:"PF1.ModifierType.base",enh:"PF1.ModifierType.enhancement",dodge:"PF1.ModifierType.dodge",haste:"PF1.ModifierType.haste",inherent:"PF1.ModifierType.inherent",deflection:"PF1.ModifierType.deflection",morale:"PF1.ModifierType.morale",luck:"PF1.ModifierType.luck",sacred:"PF1.ModifierType.sacred",insight:"PF1.ModifierType.insight",resist:"PF1.ModifierType.resistance",profane:"PF1.ModifierType.profane",trait:"PF1.ModifierType.trait",racial:"PF1.ModifierType.racial",size:"PF1.ModifierType.size",competence:"PF1.ModifierType.competence",circumstance:"PF1.ModifierType.circumstance",alchemical:"PF1.ModifierType.alchemical"},buffTargetCategories:{defense:{label:"PF1.Defense"},savingThrows:{label:"PF1.SavingThrowPlural"},attack:{label:"PF1.Attack"},damage:{label:"PF1.Damage"},ability:{label:"PF1.AbilityScore"},abilityChecks:{label:"PF1.BuffTarAbilityChecks"},health:{label:"PF1.Health"},skills:{label:"PF1.Skills"},skill:{label:"PF1.BuffTarSpecificSkill"},speed:{label:"PF1.Movement.Speed"},spell:{label:"PF1.BuffTarSpells"},misc:{label:"PF1.Misc"}},buffTargets:{acpA:{label:"PF1.ACPArmor",category:"misc",sort:1e4},acpS:{label:"PF1.ACPShield",category:"misc",sort:11e3},mDexA:{label:"PF1.MaxDexArmor",category:"misc",sort:2e4},mDexS:{label:"PF1.MaxDexShield",category:"misc",sort:21e3},reach:{label:"PF1.BuffTarReach",category:"misc",sort:5e4},str:{label:"PF1.AbilityStr",category:"ability",sort:3e4},dex:{label:"PF1.AbilityDex",category:"ability",sort:31e3},con:{label:"PF1.AbilityCon",category:"ability",sort:32e3},int:{label:"PF1.AbilityInt",category:"ability",sort:33e3},wis:{label:"PF1.AbilityWis",category:"ability",sort:34e3},cha:{label:"PF1.AbilityCha",category:"ability",sort:35e3},strMod:{label:"PF1.AbilityStrMod",category:"ability",sort:4e4},dexMod:{label:"PF1.AbilityDexMod",category:"ability",sort:41e3},conMod:{label:"PF1.AbilityConMod",category:"ability",sort:42e3},intMod:{label:"PF1.AbilityIntMod",category:"ability",sort:43e3},wisMod:{label:"PF1.AbilityWisMod",category:"ability",sort:44e3},chaMod:{label:"PF1.AbilityChaMod",category:"ability",sort:45e3},strPen:{label:"PF1.AbilityStrPen",category:"ability",sort:5e4},dexPen:{label:"PF1.AbilityDexPen",category:"ability",sort:51e3},conPen:{label:"PF1.AbilityConPen",category:"ability",sort:52e3},intPen:{label:"PF1.AbilityIntPen",category:"ability",sort:53e3},wisPen:{label:"PF1.AbilityWisPen",category:"ability",sort:54e3},chaPen:{label:"PF1.AbilityChaPen",category:"ability",sort:55e3},skills:{label:"PF1.BuffTarAllSkills",category:"skills",sort:5e4},unskills:{label:"PF1.BuffTarUntrainedSkills",category:"skills",sort:1e5},carryStr:{label:"PF1.CarryStrength",category:"misc",sort:6e4},carryMult:{label:"PF1.CarryMultiplier",category:"misc",sort:61e3},strSkills:{label:"PF1.BuffTarStrSkills",category:"skills",sort:7e4},dexSkills:{label:"PF1.BuffTarDexSkills",category:"skills",sort:71e3},conSkills:{label:"PF1.BuffTarConSkills",category:"skills",sort:72e3},intSkills:{label:"PF1.BuffTarIntSkills",category:"skills",sort:73e3},wisSkills:{label:"PF1.BuffTarWisSkills",category:"skills",sort:74e3},chaSkills:{label:"PF1.BuffTarChaSkills",category:"skills",sort:75e3},allChecks:{label:"PF1.BuffTarAllAbilityChecks",category:"abilityChecks",sort:8e4},strChecks:{label:"PF1.BuffTarStrChecks",category:"abilityChecks",sort:81e3},dexChecks:{label:"PF1.BuffTarDexChecks",category:"abilityChecks",sort:82e3},conChecks:{label:"PF1.BuffTarConChecks",category:"abilityChecks",sort:83e3},intChecks:{label:"PF1.BuffTarIntChecks",category:"abilityChecks",sort:84e3},wisChecks:{label:"PF1.BuffTarWisChecks",category:"abilityChecks",sort:85e3},chaChecks:{label:"PF1.BuffTarChaChecks",category:"abilityChecks",sort:86e3},landSpeed:{label:"PF1.Movement.Mode.land",category:"speed",sort:9e4},climbSpeed:{label:"PF1.Movement.Mode.climb",category:"speed",sort:91e3},swimSpeed:{label:"PF1.Movement.Mode.swim",category:"speed",sort:92e3},burrowSpeed:{label:"PF1.Movement.Mode.burrow",category:"speed",sort:93e3},flySpeed:{label:"PF1.Movement.Mode.fly",category:"speed",sort:94e3},allSpeeds:{label:"PF1.BuffTarAllSpeeds",category:"speed",sort:95e3},ac:{label:"PF1.BuffTarACGeneric",category:"defense",sort:1e5},aac:{label:"PF1.BuffTarACArmor",category:"defense",sort:101e3},sac:{label:"PF1.BuffTarACShield",category:"defense",sort:102e3},nac:{label:"PF1.BuffTarACNatural",category:"defense",sort:103e3},tac:{label:"PF1.BuffTarACTouch",category:"defense",sort:104e3},ffac:{label:"PF1.BuffTarACFlatFooted",category:"defense",sort:105e3},bab:{label:"PF1.BAB",category:"attack",sort:111e3},"~attackCore":{label:"",category:"attack",sort:112e3},attack:{label:"PF1.BuffTarAllAttackRolls",category:"attack",sort:11e4},mattack:{label:"PF1.BuffTarMeleeAttack",category:"attack",sort:111e3},nattack:{label:"PF1.BuffTarNaturalAttack",category:"attack",sort:112e3},rattack:{label:"PF1.BuffTarRangedAttack",category:"attack",sort:113e3},tattack:{label:"PF1.BuffTarThrownAttack",category:"attack",sort:114e3},damage:{label:"PF1.BuffTarAllDamageRolls",category:"damage",sort:12e4},wdamage:{label:"PF1.WeaponDamage",category:"damage",sort:121e3},mwdamage:{label:"PF1.MeleeWeaponDamage",category:"damage",sort:121100},rwdamage:{label:"PF1.RangedWeaponDamage",category:"damage",sort:121200},twdamage:{label:"PF1.ThrownWeaponDamage",category:"damage",sort:121300},rdamage:{label:"PF1.AllRangedDamage",category:"damage",sort:122100},mdamage:{label:"PF1.AllMeleeDamage",category:"damage",sort:122200},ndamage:{label:"PF1.NaturalAttackDamage",category:"damage",sort:123e3},sdamage:{label:"PF1.SpellDamage",category:"damage",sort:124e3},critConfirm:{label:"PF1.CriticalConfirmation",category:"attack",sort:13e4},allSavingThrows:{label:"PF1.BuffTarAllSavingThrows",category:"savingThrows",sort:14e4},fort:{label:"PF1.SavingThrowFort",category:"savingThrows",sort:141e3},ref:{label:"PF1.SavingThrowRef",category:"savingThrows",sort:142e3},will:{label:"PF1.SavingThrowWill",category:"savingThrows",sort:143e3},cmb:{label:"PF1.CMB",category:"attack",sort:15e4},cmd:{label:"PF1.CMD",category:"defense",sort:151e3},ffcmd:{label:"PF1.CMDFlatFooted",category:"defense",sort:152e3},init:{label:"PF1.Initiative",category:"misc",sort:16e4},mhp:{label:"PF1.HitPoints",category:"health",sort:17e4},wounds:{label:"PF1.Wounds",category:"health",sort:18e4},vigor:{label:"PF1.Vigor",category:"health",sort:181e3},spellResist:{label:"PF1.SpellResistance",category:"defense",sort:19e4},bonusFeats:{label:"PF1.BuffTarBonusFeats",category:"misc",sort:2e5},bonusSkillRanks:{label:"PF1.BuffTarBonusSkillRanks",category:"skills",sort:21e4},concentration:{label:"PF1.Concentration",category:"spell",sort:22e4},cl:{label:"PF1.CasterLevel",category:"spell",sort:23e4},dc:{label:"PF1.SpellDC",category:"spell",sort:24e4}},buffTypes:{temp:"PF1.Subtypes.Item.buff.temp.Single",spell:"PF1.Subtypes.Item.buff.spell.Single",feat:"PF1.Subtypes.Item.buff.feat.Single",perm:"PF1.Subtypes.Item.buff.perm.Single",item:"PF1.Subtypes.Item.buff.item.Single",misc:"PF1.Subtypes.Item.buff.misc.Single"},casterProgression:f,classAssociations:["feat","attack"],classBAB:{low:"PF1.Low",med:"PF1.Medium",high:"PF1.High",custom:"PF1.Custom"},classBABFormulas:{low:"floor(@hitDice * 0.5)",med:"floor(@hitDice * 0.75)",high:"@hitDice",custom:"0"},classCasterType:{sorcerer:"high",wizard:"high",cleric:"high",oracle:"high",druid:"high",psychic:"high",shaman:"high",witch:"high",alchemist:"med",bard:"med",hunter:"med",inquisitor:"med",investigator:"med",magus:"med",mesmerist:"med",occultist:"med",skald:"med",spiritualist:"med",summoner:"med","unchained Summoner":"med",antipaladin:"low",bloodrager:"low",medium:"low",paladin:"low",ranger:"low"},classFractionalBABFormulas:{low:"@hitDice * 0.5",med:"@hitDice * 0.75",high:"@hitDice",custom:"0"},classFractionalSavingThrowFormulas:{goodSaveBonus:"2",base:{low:"@hitDice / 3",high:"@hitDice / 2",goodSave:!0},prestige:{low:"@hitDice / 3",high:"@hitDice / 2",goodSave:!0},npc:{low:"@hitDice / 3",high:"@hitDice / 2",goodSave:!0},racial:{low:"@hitDice / 3",high:"@hitDice / 2",goodSave:!0},mythic:{low:"0",high:"0"},custom:{low:"0",high:"0"}},classSavingThrowFormulas:{base:{low:"floor(@hitDice / 3)",high:"2 + floor(@hitDice / 2)"},prestige:{low:"floor((1 + @hitDice) / 3)",high:"floor((1 + @hitDice) / 2)"},npc:{low:"floor(@hitDice / 3)",high:"2 + floor(@hitDice / 2)"},racial:{low:"floor(@hitDice / 3)",high:"2 + floor(@hitDice / 2)"},mythic:{low:"0",high:"0"},custom:{low:"0",high:"0"}},classSavingThrows:{low:"PF1.Poor",high:"PF1.Good",custom:"PF1.Custom"},classSkillBonus:3,classTypes:{base:"PF1.Subtypes.Item.class.base.Single",prestige:"PF1.Subtypes.Item.class.prestige.Single",npc:"PF1.Subtypes.Item.class.npc.Single",racial:"PF1.Subtypes.Item.class.racial.Single",mythic:"PF1.Subtypes.Item.class.mythic.Single"},conditionTypes:{bleed:"PF1.Condition.bleed",blind:"PF1.Condition.blind",confuse:"PF1.Condition.confused",daze:"PF1.Condition.dazed",dazzle:"PF1.Condition.dazzled",deaf:"PF1.Condition.deaf",deathEffects:"PF1.Condition.deathEffects",disease:"PF1.Condition.disease",energyDrain:"PF1.Condition.energyDrain",fatigue:"PF1.Condition.fatigued",fear:"PF1.Condition.fear",mindAffecting:"PF1.Condition.mindAffecting",poison:"PF1.Condition.poison",sicken:"PF1.Condition.sickened",paralyze:"PF1.Condition.paralyzed",petrify:"PF1.Condition.petrified",polymorph:"PF1.Condition.polymorph",stun:"PF1.Condition.stunned",sleep:"PF1.Condition.sleep"},conditionalTargets:{attack:{_label:"PF1.AttackRollPlural",allAttack:"PF1.All",hasteAttack:"PF1.Haste",rapidShotAttack:"PF1.RapidShot"},damage:{_label:"PF1.Damage",allDamage:"PF1.All",hasteDamage:"PF1.Haste",rapidShotDamage:"PF1.RapidShot"},size:{_label:"PF1.Size"},critMult:{_label:"PF1.CriticalMultiplier"},effect:{_label:"PF1.Effects"},misc:{_label:"PF1.MiscShort"}},consumableTypes:{potion:"PF1.Subtypes.Item.consumable.potion.Single",poison:"PF1.Subtypes.Item.consumable.poison.Single",drug:"PF1.Subtypes.Item.consumable.drug.Single",scroll:"PF1.Subtypes.Item.consumable.scroll.Single",wand:"PF1.Subtypes.Item.consumable.wand.Single",rod:"PF1.Subtypes.Item.consumable.rod.Single",staff:"PF1.Subtypes.Item.consumable.staff.Single",misc:"PF1.Misc"},contextNoteCategories:{attacks:{label:"PF1.Attacks"},savingThrows:{label:"PF1.SavingThrowPlural"},skills:{label:"PF1.Skills"},skill:{label:"PF1.BuffTarSpecificSkill"},abilityChecks:{label:"PF1.BuffTarAbilityChecks"},spell:{label:"PF1.BuffTarSpells"},defense:{label:"PF1.Defense"},misc:{label:"PF1.Misc"}},contextNoteTargets:{attack:{label:"PF1.AttackRollPlural",category:"attacks"},critical:{label:"PF1.CriticalHitPlural",category:"attacks"},effect:{label:"PF1.Effects",category:"attacks"},melee:{label:"PF1.Melee",category:"attacks"},meleeWeapon:{label:"PF1.MeleeWeapon",category:"attacks"},meleeSpell:{label:"PF1.MeleeSpell",category:"attacks"},ranged:{label:"PF1.Ranged",category:"attacks"},rangedWeapon:{label:"PF1.RangedWeapon",category:"attacks"},rangedSpell:{label:"PF1.RangedSpell",category:"attacks"},cmb:{label:"PF1.CMB",category:"attacks"},allSavingThrows:{label:"PF1.BuffTarAllSavingThrows",category:"savingThrows"},fort:{label:"PF1.SavingThrowFort",category:"savingThrows"},ref:{label:"PF1.SavingThrowRef",category:"savingThrows"},will:{label:"PF1.SavingThrowWill",category:"savingThrows"},skills:{label:"PF1.BuffTarAllSkills",category:"skills"},strSkills:{label:"PF1.BuffTarStrSkills",category:"skills"},dexSkills:{label:"PF1.BuffTarDexSkills",category:"skills"},conSkills:{label:"PF1.BuffTarConSkills",category:"skills"},intSkills:{label:"PF1.BuffTarIntSkills",category:"skills"},wisSkills:{label:"PF1.BuffTarWisSkills",category:"skills"},chaSkills:{label:"PF1.BuffTarChaSkills",category:"skills"},allChecks:{label:"PF1.BuffTarAllAbilityChecks",category:"abilityChecks"},strChecks:{label:"PF1.BuffTarStrChecks",category:"abilityChecks"},dexChecks:{label:"PF1.BuffTarDexChecks",category:"abilityChecks"},conChecks:{label:"PF1.BuffTarConChecks",category:"abilityChecks"},intChecks:{label:"PF1.BuffTarIntChecks",category:"abilityChecks"},wisChecks:{label:"PF1.BuffTarWisChecks",category:"abilityChecks"},chaChecks:{label:"PF1.BuffTarChaChecks",category:"abilityChecks"},spellEffect:{label:"PF1.BuffTarSpellEffect",category:"spell"},concentration:{label:"PF1.Concentration",category:"spell"},cl:{label:"PF1.CasterLevel",category:"spell"},ac:{label:"PF1.ACNormal",category:"defense"},cmd:{label:"PF1.CMD",category:"defense"},sr:{label:"PF1.SpellResistance",category:"defense"},init:{label:"PF1.Initiative",category:"misc"}},creatureTypes:{aberration:"PF1.CreatureTypes.aberration",animal:"PF1.CreatureTypes.animal",construct:"PF1.CreatureTypes.construct",dragon:"PF1.CreatureTypes.dragon",fey:"PF1.CreatureTypes.fey",humanoid:"PF1.CreatureTypes.humanoid",magicalBeast:"PF1.CreatureTypes.magicalBeast",monstrousHumanoid:"PF1.CreatureTypes.monstrousHumanoid",ooze:"PF1.CreatureTypes.ooze",outsider:"PF1.CreatureTypes.outsider",plant:"PF1.CreatureTypes.plant",undead:"PF1.CreatureTypes.undead",vermin:"PF1.CreatureTypes.vermin"},currencies:{pp:"PF1.Currency.Abbr.pp",gp:"PF1.Currency.Abbr.gp",sp:"PF1.Currency.Abbr.sp",cp:"PF1.Currency.Abbr.cp"},damageResistances:{lawful:"PF1.Alignments.l",chaotic:"PF1.Alignments.c",good:"PF1.Alignments.g",evil:"PF1.Alignments.e"},defaultIcons:{items:{attack:"icons/svg/explosion.svg",buff:"icons/svg/ice-aura.svg",class:"icons/svg/paralysis.svg",consumable:"icons/svg/tankard.svg",container:"icons/svg/barrel.svg",equipment:"icons/svg/combat.svg",feat:"icons/svg/book.svg",loot:"icons/svg/item-bag.svg",race:"icons/svg/wing.svg",spell:"icons/svg/daze.svg",weapon:"icons/svg/sword.svg"},actors:{character:"icons/svg/mystery-man.svg",npc:"icons/svg/terror.svg",haunt:"icons/svg/stoned.svg",basic:"icons/svg/castle.svg",trap:"icons/svg/net.svg",vehicle:"icons/svg/stone-path.svg"}},distanceUnits:{none:"PF1.None",personal:"PF1.Distance.personal",touch:"PF1.Distance.touch",melee:"PF1.Distance.melee",reach:"PF1.Distance.reach",close:"PF1.Distance.close",medium:"PF1.Distance.medium",long:"PF1.Distance.long",ft:"PF1.Distance.ft",mi:"PF1.Distance.mi",spec:"PF1.Special",seeText:"PF1.SeeText",unlimited:"PF1.Unlimited"},divineFocus:{0:"",1:"PF1.SpellComponents.DFVariants.DF",2:"PF1.SpellComponents.DFVariants.MDF",3:"PF1.SpellComponents.DFVariants.FDF"},durationEndEvents:{turnStart:"PF1.Time.Turn.Start",initiative:"PF1.Initiative",turnEnd:"PF1.Time.Turn.End"},encumbranceLevels:{light:0,medium:1,heavy:2},encumbranceLoads:[0,10,20,30,40,50,60,70,80,90,100,115,130,150,175,200,230,260,300,350,400,460,520,600,700,800,920,1040,1200,1400,1600],encumbranceMultipliers:{normal:{fine:.125,dim:.25,tiny:.5,sm:.75,med:1,lg:2,huge:4,grg:8,col:16},quadruped:{fine:.25,dim:.5,tiny:.75,sm:1,med:1.5,lg:3,huge:6,grg:12,col:24}},equipmentSlots:{armor:{armor:"PF1.EquipSlots.armor"},shield:{shield:"PF1.EquipSlots.shield"},wondrous:{slotless:"PF1.EquipSlots.none",head:"PF1.EquipSlots.head",headband:"PF1.EquipSlots.headband",eyes:"PF1.EquipSlots.eyes",shoulders:"PF1.EquipSlots.shoulders",neck:"PF1.EquipSlots.neck",chest:"PF1.EquipSlots.chest",body:"PF1.EquipSlots.body",belt:"PF1.EquipSlots.belt",wrists:"PF1.EquipSlots.wrists",hands:"PF1.EquipSlots.hands",ring:"PF1.EquipSlots.ring",feet:"PF1.EquipSlots.feet"},clothing:{clothing:"PF1.EquipSlots.clothing"},other:{other:"PF1.Other"}},equipmentTypes:{armor:{_label:"PF1.Subtypes.Item.equipment.armor.Single",lightArmor:"PF1.Subtypes.Item.equipment.armor.Types.light",mediumArmor:"PF1.Subtypes.Item.equipment.armor.Types.medium",heavyArmor:"PF1.Subtypes.Item.equipment.armor.Types.heavy"},shield:{_label:"PF1.Subtypes.Item.equipment.shield.Single",lightShield:"PF1.Subtypes.Item.equipment.shield.Types.light",heavyShield:"PF1.Subtypes.Item.equipment.shield.Types.heavy",towerShield:"PF1.Subtypes.Item.equipment.shield.Types.tower",other:"PF1.Subtypes.Item.equipment.shield.Types.misc"},wondrous:{_label:"PF1.Subtypes.Item.equipment.wondrous.Single"},clothing:{_label:"PF1.Subtypes.Item.equipment.clothing.Single"},other:{_label:"PF1.Other"}},extraAttacks:{standard:{label:"PF1.ExtraAttacks.Standard",iteratives:!0,manual:!1,formula:!1},advanced:{label:"PF1.ExtraAttacks.Advanced",iteratives:!0,manual:!0,formula:!0},flurry:{label:"PF1.ExtraAttacks.Flurry",count:"min(4, ceil(@bab / 5)) + ceil((@class.level - 7) / 7)",bonus:"-(floor((@attackCount+1) / 2) * 5 + @fullAttack * 2)",flavor:"PF1.ExtraAttacks.FlurryFlavor",iteratives:!1,manual:!1,formula:!1},unflurry:{label:"PF1.ExtraAttacks.UnFlurry",count:"min(4, ceil(@bab / 5)) + floor((@class.level + 9) / 10)",bonus:"max(0, @attackCount - floor((@class.level + 9) / 10)) * -5",flavor:"PF1.ExtraAttacks.FlurryFlavor",iteratives:!1,manual:!1,formula:!1},custom:{label:"PF1.ExtraAttacks.Custom",iteratives:!1,manual:!0,formula:!0}},favoredClassTypes:["base","prestige","npc"],favouredClassBonusIcons:{hp:"fa-heartbeat",skill:"fa-wrench",alt:"fa-tag"},favouredClassBonuses:{hp:"PF1.FavouredClass.Bonuses.hp",skill:"PF1.FavouredClass.Bonuses.skill",alt:"PF1.FavouredClass.Bonuses.alt"},featTypes:{feat:"PF1.Subtypes.Item.feat.feat.Single",classFeat:"PF1.Subtypes.Item.feat.classFeat.Single",trait:"PF1.Subtypes.Item.feat.trait.Single",racial:"PF1.Subtypes.Item.feat.racial.Single",misc:"PF1.Misc",template:"PF1.Subtypes.Item.feat.template.Single"},featTypesPlurals:{feat:"PF1.Subtypes.Item.feat.feat.Plural",classFeat:"PF1.Subtypes.Item.feat.classFeat.Plural",trait:"PF1.Subtypes.Item.feat.trait.Plural",racial:"PF1.Subtypes.Item.feat.racial.Plural",template:"PF1.Subtypes.Item.feat.template.Plural"},flyManeuverabilities:{clumsy:"PF1.Movement.FlyManeuverability.Quality.clumsy",poor:"PF1.Movement.FlyManeuverability.Quality.poor",average:"PF1.Movement.FlyManeuverability.Quality.average",good:"PF1.Movement.FlyManeuverability.Quality.good",perfect:"PF1.Movement.FlyManeuverability.Quality.perfect"},flyManeuverabilityValues:{clumsy:-8,poor:-4,average:0,good:4,perfect:8},hitDieSizes:[6,8,10,12],implantSlots:{cybertech:{none:"PF1.Cybertech.Slots.none",arm:"PF1.Cybertech.Slots.arm",body:"PF1.Cybertech.Slots.body",brain:"PF1.Cybertech.Slots.brain",ears:"PF1.Cybertech.Slots.ears",eyes:"PF1.Cybertech.Slots.eyes",head:"PF1.Cybertech.Slots.head",legs:"PF1.Cybertech.Slots.legs"}},implantTypes:{cybertech:"PF1.Subtypes.Item.implant.cybertech.Single"},itemActionTypes:{mwak:"PF1.ActionTypes.mwak",rwak:"PF1.ActionTypes.rwak",twak:"PF1.ActionTypes.twak",msak:"PF1.ActionTypes.msak",rsak:"PF1.ActionTypes.rsak",mcman:"PF1.ActionTypes.mcman",rcman:"PF1.ActionTypes.rcman",spellsave:"PF1.ActionTypes.spellSave",save:"PF1.ActionTypes.save",heal:"PF1.ActionTypes.heal",other:"PF1.ActionTypes.other"},iterativeAttackModifier:"@attackCount * -5",iterativeExtraAttacks:"min(3, ceil(@bab / 5) - 1)",languages:{aboleth:"PF1.Language.aboleth",abyssal:"PF1.Language.abyssal",aklo:"PF1.Language.aklo",ancientosiriani:"PF1.Language.ancientosiriani",androffan:"PF1.Language.androffan",aquan:"PF1.Language.aquan",auran:"PF1.Language.auran",azlanti:"PF1.Language.azlanti",boggard:"PF1.Language.boggard",catfolk:"PF1.Language.catfolk",celestial:"PF1.Language.celestial",common:"PF1.Language.common",cyclops:"PF1.Language.cyclops",dark:"PF1.Language.dark",draconic:"PF1.Language.draconic",drowsign:"PF1.Language.drowsign",druidic:"PF1.Language.druidic",dwarven:"PF1.Language.dwarven",dziriak:"PF1.Language.dziriak",elven:"PF1.Language.elven",giant:"PF1.Language.giant",gnoll:"PF1.Language.gnoll",gnome:"PF1.Language.gnome",goblin:"PF1.Language.goblin",grippli:"PF1.Language.grippli",halfling:"PF1.Language.halfling",hallit:"PF1.Language.hallit",ignan:"PF1.Language.ignan",infernal:"PF1.Language.infernal",jistka:"PF1.Language.jistka",kasatha:"PF1.Language.kasatha",kelish:"PF1.Language.kelish",lashunta:"PF1.Language.lashunta",munavri:"PF1.Language.munavri",necril:"PF1.Language.necril",orc:"PF1.Language.orc",orvian:"PF1.Language.orvian",osiriani:"PF1.Language.osiriani",polyglot:"PF1.Language.polyglot",protean:"PF1.Language.protean",reptoid:"PF1.Language.reptoid",rougarou:"PF1.Language.rougarou",samsaran:"PF1.Language.samsaran",sasquatch:"PF1.Language.sasquatch",shadowtongue:"PF1.Language.shadowtongue",shoanti:"PF1.Language.shoanti",skald:"PF1.Language.skald",sphinx:"PF1.Language.sphinx",strix:"PF1.Language.strix",sylvan:"PF1.Language.sylvan",syrinx:"PF1.Language.syrinx",taldane:"PF1.Language.taldane",tekritanin:"PF1.Language.tekritanin",tengu:"PF1.Language.tengu",terran:"PF1.Language.terran",thassilonian:"PF1.Language.thassilonian",tien:"PF1.Language.tien",treant:"PF1.Language.treant",triaxian:"PF1.Language.triaxian",undercommon:"PF1.Language.undercommon",vanaran:"PF1.Language.vanaran",varisian:"PF1.Language.varisian",vegepygmy:"PF1.Language.vegepygmy",vishkanya:"PF1.Language.vishkanya",vudrani:"PF1.Language.vudrani",yaddithian:"PF1.Language.yaddithian"},levelAbilityScoreFeature:{img:"systems/pf1/icons/skills/affliction_10.jpg",name:"PF1.LevelUp.AbilityScore.Item.Name",system:{description:{value:"PF1.LevelUp.AbilityScore.Item.Desc"},subType:"misc"},type:"feat"},levelAbilityScores:{4:1,8:1,12:1,16:1,20:1},limitedUsePeriodOrder:["round","day","week"],limitedUsePeriods:{single:"PF1.LimitedUses.Periods.single",round:"PF1.LimitedUses.Periods.round",day:"PF1.LimitedUses.Periods.day",week:"PF1.LimitedUses.Periods.week",charges:"PF1.LimitedUses.Periods.charges"},lootTypes:{gear:"PF1.Subtypes.Item.loot.gear.Plural",tool:"PF1.Subtypes.Item.loot.tool.Plural",ammo:"PF1.Subtypes.Item.loot.ammo.Plural",food:"PF1.Subtypes.Item.loot.food.Plural",herb:"PF1.Subtypes.Item.loot.herb.Plural",adventuring:"PF1.Subtypes.Item.loot.adventuring.Plural",animal:"PF1.Subtypes.Item.loot.animal.Plural",animalGear:"PF1.Subtypes.Item.loot.animalGear.Plural",reagent:"PF1.Subtypes.Item.loot.reagent.Plural",remedy:"PF1.Subtypes.Item.loot.remedy.Plural",treasure:"PF1.Subtypes.Item.loot.treasure.Plural",tradeGoods:"PF1.Subtypes.Item.loot.tradeGoods.Plural",vehicle:"PF1.Subtypes.Item.loot.vehicle.Plural",entertainment:"PF1.Subtypes.Item.loot.entertainment.Plural",misc:"PF1.Subtypes.Item.loot.misc.Plural"},magicAuraByLevel:{spell:[{power:"faint",level:1},{power:"moderate",level:4},{power:"strong",level:7},{power:"overwhelming",level:10}],item:[{power:"faint",level:1},{power:"moderate",level:6},{power:"strong",level:12},{power:"overwhelming",level:21}]},measureTemplateTypes:g,measureUnits:{ft:"PF1.Distance.ft",mi:"PF1.Distance.mi",m:"PF1.Distance.m",km:"PF1.Distance.km"},measureUnitsShort:{ft:"PF1.Distance.ftShort",mi:"PF1.Distance.miShort",m:"PF1.Distance.mShort",km:"PF1.Distance.kmShort"},overlandSpeed:{imperial:{default:{per:10,out:1,unit:"mi"}},metric:{rounded:{per:3,out:1.5,unit:"km"},exact:{per:3,out:1.6,unit:"km"}}},pointBuy:{low:{label:"PF1.Application.PointBuy.Type.low",points:10},standard:{label:"PF1.Application.PointBuy.Type.standard",points:15},high:{label:"PF1.Application.PointBuy.Type.high",points:20},epic:{label:"PF1.Application.PointBuy.Type.epic",points:25}},re:{traitSeparator:/\s*[;]\s*/g},savingThrows:{fort:"PF1.SavingThrowFort",ref:"PF1.SavingThrowRef",will:"PF1.SavingThrowWill"},senses:{bs:"PF1.Sense.blindsight",bse:"PF1.Sense.blindsense",dv:"PF1.Sense.darkvision",ts:"PF1.Sense.tremorsense",tr:"PF1.Sense.trueseeing",ll:"PF1.Sense.lowlight",si:"PF1.Sense.seeInvis",sid:"PF1.Sense.seeInDark",sc:"PF1.Sense.scent"},sheetSections:y,shieldTypes:{none:0,other:1,light:2,heavy:3,tower:4},sizeChart:{fine:"F",dim:"D",tiny:"T",sm:"S",med:"M",lg:"L",huge:"H",grg:"G",col:"C"},sizeDie:["1","1d2","1d3","1d4","1d6","1d8","1d10","2d6","2d8","3d6","3d8","4d6","4d8","6d6","6d8","8d6","8d8","12d6","12d8","16d6","16d8"],sizeFlyMods:{fine:8,dim:6,tiny:4,sm:2,med:0,lg:-2,huge:-4,grg:-6,col:-8},sizeMods:{fine:8,dim:4,tiny:2,sm:1,med:0,lg:-1,huge:-2,grg:-4,col:-8},sizeSpecialMods:{fine:-8,dim:-4,tiny:-2,sm:-1,med:0,lg:1,huge:2,grg:4,col:8},sizeStealthMods:{fine:16,dim:12,tiny:8,sm:4,med:0,lg:-4,huge:-8,grg:-12,col:-16},skillCompendiumEntries:{acr:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.gGfJO90ZuRT4sZ9X",apr:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.QGxoGsSIAOoe5dTW",art:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.vH2PLto0QPzkG4io",blf:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.kRK5XwVBvcMi35w2",clm:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.ZAwjVOTwsBpZRgw4",crf:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.3E8pxbjI8MD3JbfQ",dip:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.uB9Fy36RUjibxqvt",dev:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.cSdUATLHBFfw3v4s",dis:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.xg25z3GIpS590NDW",esc:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.DTNlXXg77s3178WJ",fly:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.iH69GIwm8BjecrPN",han:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.IrVgSeMcAM8rAh2B",hea:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.nHbYSOoe1SzqEO9w",int:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.KNn8uxHu23phKC0y",kar:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.BWeqgXSZvUQl68vt",kdu:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.BWeqgXSZvUQl68vt",ken:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.BWeqgXSZvUQl68vt",kge:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.BWeqgXSZvUQl68vt",khi:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.BWeqgXSZvUQl68vt",klo:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.BWeqgXSZvUQl68vt",kna:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.BWeqgXSZvUQl68vt",kno:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.BWeqgXSZvUQl68vt",kpl:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.BWeqgXSZvUQl68vt",kre:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.BWeqgXSZvUQl68vt",lin:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.SqLm3Deag2FpP8ty",lor:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.rExcBHs5GTiWLlo8",per:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.2h6hz5AkTDxKPFxr",prf:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.emzBKDFNkNnC7N8u",pro:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.224EaK0K72NhCeRi",rid:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.xQbTtefpEfEaOYo7",sen:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.ka0VQGItdrWw3paO",slt:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.joza8kAIiImrPft7",spl:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.VRD7jxiIAxKPt6EF",ste:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.wRWHk7tCUHR99PzD",sur:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.pLdYavy4nssLEoGV",swm:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.xhmDhOXuBbfVcD0Q",umd:"Compendium.pf1.pf1e-rules.x175kVqUfLGPt8tC.JournalEntryPage.A8j7nF6qHwuGEC2E"},skills:{acr:"PF1.SkillAcr",apr:"PF1.SkillApr",art:"PF1.SkillArt",blf:"PF1.SkillBlf",clm:"PF1.SkillClm",crf:"PF1.SkillCrf",dip:"PF1.SkillDip",dev:"PF1.SkillDev",dis:"PF1.SkillDis",esc:"PF1.SkillEsc",fly:"PF1.SkillFly",han:"PF1.SkillHan",hea:"PF1.SkillHea",int:"PF1.SkillInt",kar:"PF1.SkillKAr",kdu:"PF1.SkillKDu",ken:"PF1.SkillKEn",kge:"PF1.SkillKGe",khi:"PF1.SkillKHi",klo:"PF1.SkillKLo",kna:"PF1.SkillKNa",kno:"PF1.SkillKNo",kpl:"PF1.SkillKPl",kre:"PF1.SkillKRe",lin:"PF1.SkillLin",lor:"PF1.SkillLor",per:"PF1.SkillPer",prf:"PF1.SkillPrf",pro:"PF1.SkillPro",rid:"PF1.SkillRid",sen:"PF1.SkillSen",slt:"PF1.SkillSlt",spl:"PF1.SkillSpl",ste:"PF1.SkillSte",sur:"PF1.SkillSur",swm:"PF1.SkillSwm",umd:"PF1.SkillUMD"},spellComponents:{verbal:"PF1.SpellComponents.Type.verbal.Abbr",somatic:"PF1.SpellComponents.Type.somatic.Abbr",thought:"PF1.SpellComponents.Type.thought.Abbr",emotion:"PF1.SpellComponents.Type.emotion.Abbr",material:"PF1.SpellComponents.Type.material.Abbr",focus:"PF1.SpellComponents.Type.focus.Abbr",divineFocus:"PF1.SpellComponents.Type.divineFocus.Abbr"},spellDescriptors:{acid:"PF1.SpellDescriptors.acid",air:"PF1.SpellDescriptors.air",chaotic:"PF1.SpellDescriptors.chaotic",cold:"PF1.SpellDescriptors.cold",curse:"PF1.SpellDescriptors.curse",darkness:"PF1.SpellDescriptors.darkness",death:"PF1.SpellDescriptors.death",disease:"PF1.SpellDescriptors.disease",draconic:"PF1.SpellDescriptors.draconic",earth:"PF1.SpellDescriptors.earth",electricity:"PF1.SpellDescriptors.electricity",emotion:"PF1.SpellDescriptors.emotion",evil:"PF1.SpellDescriptors.evil",fear:"PF1.SpellDescriptors.fear",fire:"PF1.SpellDescriptors.fire",force:"PF1.SpellDescriptors.force",good:"PF1.SpellDescriptors.good",languageDependent:"PF1.SpellDescriptors.languageDependent",lawful:"PF1.SpellDescriptors.lawful",light:"PF1.SpellDescriptors.light",meditative:"PF1.SpellDescriptors.meditative",mindAffecting:"PF1.SpellDescriptors.mindAffecting",pain:"PF1.SpellDescriptors.pain",poison:"PF1.SpellDescriptors.poison",ruse:"PF1.SpellDescriptors.ruse",shadow:"PF1.SpellDescriptors.shadow",sonic:"PF1.SpellDescriptors.sonic",water:"PF1.SpellDescriptors.water"},spellLevels:{0:"PF1.SpellLevels.0",1:"PF1.SpellLevels.1",2:"PF1.SpellLevels.2",3:"PF1.SpellLevels.3",4:"PF1.SpellLevels.4",5:"PF1.SpellLevels.5",6:"PF1.SpellLevels.6",7:"PF1.SpellLevels.7",8:"PF1.SpellLevels.8",9:"PF1.SpellLevels.9"},spellRangeFormulas:{close:"25 + floor(@cl / 2) * 5",medium:"100 + @cl * 10",long:"400 + @cl * 40"},spellSchools:{abj:"PF1.SpellSchools.abj",con:"PF1.SpellSchools.con",div:"PF1.SpellSchools.div",enc:"PF1.SpellSchools.enc",evo:"PF1.SpellSchools.evo",ill:"PF1.SpellSchools.ill",nec:"PF1.SpellSchools.nec",trs:"PF1.SpellSchools.tra",uni:"PF1.SpellSchools.uni",misc:"PF1.Misc"},spellcasting:{type:{spontaneous:"PF1.SpellPrepSpontaneous",prepared:"PF1.SpellPrepPrepared",hybrid:"PF1.Arcanist"},spells:{arcane:"PF1.Spellcasting.Type.Arcane",divine:"PF1.Spellcasting.Type.Divine",psychic:"PF1.Spellcasting.Type.Psychic",alchemy:"PF1.Spellcasting.Type.Alchemy"}},stackingBonusTypes:["untyped","untypedPerm","dodge","racial","circumstance"],temporaryRollDataFields:{actor:["d20","attackBonus","attackCount","formulaicAttack","damageBonus","pointBlankBonus","rapidShotPenalty","powerAttackBonus","powerAttackPenalty","conditionals","concentrationBonus","formulaBonus","dcBonus","chargeCostBonus","chargeCost","sizeBonus","bonus","critMult","ablMult","ablDamage","cl","sl","class","ablMod","item","action","level","mod"]},timePeriods:{inst:"PF1.Time.Period.inst.Label",turn:"PF1.Time.Period.turn.Label",round:"PF1.Time.Period.round.Label",minute:"PF1.Time.Period.minute.Label",hour:"PF1.Time.Period.hour.Label",day:"PF1.Time.Period.day.Label",month:"PF1.Time.Period.month.Label",year:"PF1.Time.Period.year.Label",perm:"PF1.Time.Period.perm.Label",seeText:"PF1.SeeText",spec:"PF1.Special"},timePeriodsShort:{turn:"PF1.Time.Period.turn.Short",round:"PF1.Time.Period.round.Short",minute:"PF1.Time.Period.minute.Short",hour:"PF1.Time.Period.hour.Short"},tokenSizes:{fine:{w:1,h:1,scale:.45},dim:{w:1,h:1,scale:.6},tiny:{w:1,h:1,scale:.75},sm:{w:1,h:1,scale:.9},med:{w:1,h:1,scale:1},lg:{w:2,h:2,scale:1},huge:{w:3,h:3,scale:1},grg:{w:4,h:4,scale:1},col:{w:6,h:6,scale:1}},traitTypes:{combat:"PF1.Trait.combat",magic:"PF1.Trait.magic",faith:"PF1.Trait.faith",social:"PF1.Trait.social",campaign:"PF1.Trait.campaign",cosmic:"PF1.Trait.cosmic",equipment:"PF1.Trait.equipment",exemplar:"PF1.Trait.exemplar",faction:"PF1.Trait.faction",family:"PF1.Trait.family",mount:"PF1.Trait.mount",race:"PF1.Trait.race",region:"PF1.Trait.region",religion:"PF1.Trait.religion",drawback:"PF1.Trait.drawback"},unequippableLoot:["food","herb","reagent","treasure","tradeGoods","vehicle","entertainment","ammo"],vehicles:{size:{lg:{label:"PF1.ActorSize.lg",space:"PF1.Vehicles.Space.Large"},huge:{label:"PF1.ActorSize.huge",space:"PF1.Vehicles.Space.Huge"},grg:{label:"PF1.ActorSize.grg",space:"PF1.Vehicles.Space.Gargantuan"},col:{label:"PF1.ActorSize.col",space:"PF1.Vehicles.Space.Colossal"}},type:{land:"PF1.Vehicles.Types.Land",sea:"PF1.Vehicles.Types.Sea",air:"PF1.Vehicles.Types.Air"}},weaponGroups:{axes:"PF1.WeaponGroup.axes",bladesHeavy:"PF1.WeaponGroup.bladesHeavy",bladesLight:"PF1.WeaponGroup.bladesLight",bows:"PF1.WeaponGroup.bows",close:"PF1.WeaponGroup.close",crossbows:"PF1.WeaponGroup.crossbows",double:"PF1.WeaponGroup.double",firearms:"PF1.WeaponGroup.firearms",flails:"PF1.WeaponGroup.flails",hammers:"PF1.WeaponGroup.hammers",monk:"PF1.WeaponGroup.monk",natural:"PF1.WeaponGroup.natural",polearms:"PF1.WeaponGroup.polearms",siegeEngines:"PF1.WeaponGroup.siegeEngines",spears:"PF1.WeaponGroup.spears",thrown:"PF1.WeaponGroup.thrown",tribal:"PF1.WeaponGroup.tribal"},weaponHoldTypes:{normal:"PF1.WeaponHoldTypeNormal","2h":"PF1.WeaponHoldTypeTwoHanded",oh:"PF1.WeaponHoldTypeOffhand"},weaponProficiencies:{simple:"PF1.Proficiency.Weapon.simple",martial:"PF1.Proficiency.Weapon.martial"},weaponProperties:{ato:"PF1.WeaponProperty.Automatic",blc:"PF1.WeaponProperty.Blocking",brc:"PF1.WeaponProperty.Brace",dea:"PF1.WeaponProperty.Deadly",dst:"PF1.WeaponProperty.Distracting",dbl:"PF1.WeaponProperty.Double",dis:"PF1.WeaponProperty.Disarm",fin:"PF1.WeaponProperty.Finesse",frg:"PF1.WeaponProperty.Fragile",grp:"PF1.WeaponProperty.Grapple",imp:"PF1.WeaponProperty.Improvised",mnk:"PF1.WeaponProperty.Monk",nnl:"PF1.WeaponProperty.NonLethal",prf:"PF1.WeaponProperty.Performance",rch:"PF1.WeaponProperty.Reach",sct:"PF1.WeaponProperty.Scatter",sma:"PF1.WeaponProperty.SemiAutomatic",slf:"PF1.WeaponProperty.SlowFiring",snd:"PF1.WeaponProperty.Sunder",spc:"PF1.WeaponProperty.Special",thr:"PF1.WeaponProperty.Thrown",trp:"PF1.WeaponProperty.Trip"},weaponTypes:{simple:{_label:"PF1.WeaponTypeSimple",light:"PF1.WeaponSubtypeLight","1h":"PF1.WeaponSubtypeOneHanded","2h":"PF1.WeaponSubtypeTwoHanded",ranged:"PF1.WeaponSubtypeRanged"},martial:{_label:"PF1.WeaponTypeMartial",light:"PF1.WeaponSubtypeLight","1h":"PF1.WeaponSubtypeOneHanded","2h":"PF1.WeaponSubtypeTwoHanded",ranged:"PF1.WeaponSubtypeRanged"},exotic:{_label:"PF1.WeaponTypeExotic",light:"PF1.WeaponSubtypeLight","1h":"PF1.WeaponSubtypeOneHanded","2h":"PF1.WeaponSubtypeTwoHanded",ranged:"PF1.WeaponSubtypeRanged"},misc:{_label:"PF1.Misc",splash:"PF1.WeaponTypeSplash",other:"PF1.Other"}},woundThresholdChangeTargets:["~attackCore","cl","allSavingThrows","ac","skills","allChecks"],woundThresholdConditions:{0:"PF1.WoundLevel.healthy",1:"PF1.WoundLevel.grazed",2:"PF1.WoundLevel.wounded",3:"PF1.WoundLevel.critical"}},Symbol.toStringTag,{value:"Module"})),v=Object.freeze(Object.defineProperty({__proto__:null,actionTypeToContext:{mwak:"mwdamage",twak:"twdamage",rwak:"rwdamage",msak:"sdamage",rsak:"sdamage",spellsave:"sdamage"},messageVisibility:{publicroll:"PF1.Chat.Visibility.Public",gmroll:"PF1.Chat.Visibility.Private",blindroll:"PF1.Chat.Visibility.Blind",selfroll:"PF1.Chat.Visibility.Self"}},Symbol.toStringTag,{value:"Module"}));class BaseFilter{static label="";static indexField="";static type="";static types=[];static TEMPLATE="";id;choices=null;compendiumBrowser=null;constructor(e){this.compendiumBrowser=e,Object.defineProperty(this,"id",{value:foundry.utils.randomID(),writable:!1,configurable:!1}),this.registerIndexFields()}static get handledTypes(){return new Set([this.type,...this.types].filter((e=>e)))}get active(){return this.choices?.some((e=>e.active))??!1}get activeChoiceCount(){return this.choices?.filter((e=>e.active)).length??0}registerIndexFields(){if(!this.compendiumBrowser)return;const e=this.compendiumBrowser.constructor.documentName;if(this.constructor.indexField.startsWith("__"))return;const t=CONFIG[e]?.compendiumIndexFields;t&&this.constructor.indexField&&!t.includes(this.constructor.indexField)&&t?.push(this.constructor.indexField)}setup(){this.prepareChoices()}prepareChoices(){this.choices=new foundry.utils.Collection}hasChoices(e=1){return this.choices?.size>e}reset(){}applyFilter(e){}getData(){return{id:this.id,template:this.constructor.TEMPLATE,label:game.i18n.localize(this.constructor.label),active:this.active,activeCount:this.activeChoiceCount,choices:this.choices?.contents??[],field:this.constructor.indexField}}activateListeners(e){}}var P="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function getDefaultExportFromCjs(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var k,S,F,C={exports:{}};S=P,F=e=>{var highlightCallback=(e,t)=>{if(e===m)return m;var s=e.target,a=s.length,i=e._indexes;i=i.slice(0,i.len).sort(((e,t)=>e-t));for(var n="",o=0,r=0,l=!1,c=(e=[],0);c<a;++c){var u=s[c];if(i[r]===c){if(++r,l||(l=!0,e.push(n),n=""),r===i.length){n+=u,e.push(t(n,o++)),n="",e.push(s.substr(c+1));break}}else l&&(l=!1,e.push(t(n,o++)),n="");n+=u}return e},prepare=e=>{"string"!=typeof e&&(e="");var t=prepareLowerInfo(e);return{target:e,_targetLower:t._lower,_targetLowerCodes:t.lowerCodes,_nextBeginningIndexes:m,_bitflags:t.bitflags,score:m,_indexes:[0],obj:m}},prepareSearch=e=>{"string"!=typeof e&&(e=""),e=e.trim();var t=prepareLowerInfo(e),s=[];if(t.containsSpace){var a=e.split(/\s+/);a=[...new Set(a)];for(var i=0;i<a.length;i++)if(""!==a[i]){var n=prepareLowerInfo(a[i]);s.push({lowerCodes:n.lowerCodes,_lower:a[i].toLowerCase(),containsSpace:!1})}}return{lowerCodes:t.lowerCodes,bitflags:t.bitflags,containsSpace:t.containsSpace,_lower:t._lower,spaceSearches:s}},getPrepared=e=>{if(e.length>999)return prepare(e);var s=t.get(e);return void 0!==s||(s=prepare(e),t.set(e,s)),s},getPreparedSearch=e=>{if(e.length>999)return prepareSearch(e);var t=s.get(e);return void 0!==t||(t=prepareSearch(e),s.set(e,t)),t},all=(e,t,s)=>{var a=[];a.total=t.length;var i=s&&s.limit||n;if(s&&s.key)for(var r=0;r<t.length;r++){var l=t[r];if(d=getValue(l,s.key)){isObj(d)||(d=getPrepared(d)),d.score=o,d._indexes.len=0;var c=d;if(c={target:c.target,_targetLower:"",_targetLowerCodes:m,_nextBeginningIndexes:m,_bitflags:0,score:d.score,_indexes:m,obj:l},a.push(c),a.length>=i)return a}}else if(s&&s.keys)for(r=0;r<t.length;r++){l=t[r];for(var u=Array(s.keys.length),p=s.keys.length-1;p>=0;--p)(d=getValue(l,s.keys[p]))?(isObj(d)||(d=getPrepared(d)),d.score=o,d._indexes.len=0,u[p]=d):u[p]=m;if(u.obj=l,u.score=o,a.push(u),a.length>=i)return a}else for(r=0;r<t.length;r++){var d;if((d=t[r])&&(isObj(d)||(d=getPrepared(d)),d.score=o,d._indexes.len=0,a.push(d),a.length>=i))return a}return a},algorithm=(e,t,s=!1)=>{if(!1===s&&e.containsSpace)return algorithmSpaces(e,t);for(var n=e._lower,o=e.lowerCodes,r=o[0],l=t._targetLowerCodes,c=o.length,u=l.length,p=0,d=0,h=0;;){if(r===l[d]){if(a[h++]=d,++p===c)break;r=o[p]}if(++d>=u)return m}p=0;var g=!1,f=0,y=t._nextBeginningIndexes;y===m&&(y=t._nextBeginningIndexes=prepareNextBeginningIndexes(t.target));var b=0;if((d=0===a[0]?0:y[a[0]-1])!==u)for(;;)if(d>=u){if(p<=0)break;if(++b>200)break;--p,d=y[i[--f]]}else if(o[p]===l[d]){if(i[f++]=d,++p===c){g=!0;break}++d}else d=y[d];var v=t._targetLower.indexOf(n,a[0]),P=~v;if(P&&!g)for(var k=0;k<h;++k)a[k]=v+k;var S=!1;if(P&&(S=t._nextBeginningIndexes[v-1]===v),g)var F=i,C=f;else F=a,C=h;var T=0,w=0;for(k=1;k<c;++k)F[k]-F[k-1]!=1&&(T-=F[k],++w);if(T-=(F[c-1]-F[0]-(c-1)+12)*w,0!==F[0]&&(T-=F[0]*F[0]*.2),g){var _=1;for(k=y[0];k<u;k=y[k])++_;_>24&&(T*=10*(_-24))}else T*=1e3;for(P&&(T/=1+c*c*1),S&&(T/=1+c*c*1),T-=u-c,t.score=T,k=0;k<C;++k)t._indexes[k]=F[k];return t._indexes.len=C,t},algorithmSpaces=(e,t)=>{for(var s=new Set,a=0,i=m,n=0,o=e.spaceSearches,r=0;r<o.length;++r){var l=o[r];if((i=algorithm(l,t))===m)return m;a+=i.score,i._indexes[0]<n&&(a-=n-i._indexes[0]),n=i._indexes[0];for(var c=0;c<i._indexes.len;++c)s.add(i._indexes[c])}var u=algorithm(e,t,!0);if(u!==m&&u.score>a)return u;i.score=a,r=0;for(let e of s)i._indexes[r++]=e;return i._indexes.len=r,i},prepareLowerInfo=e=>{for(var t=e.length,s=e.toLowerCase(),a=[],i=0,n=!1,o=0;o<t;++o){var r=a[o]=s.charCodeAt(o);32!==r?i|=1<<(r>=97&&r<=122?r-97:r>=48&&r<=57?26:r<=127?30:31):n=!0}return{lowerCodes:a,bitflags:i,containsSpace:n,_lower:s}},prepareNextBeginningIndexes=e=>{for(var t=e.length,s=(e=>{for(var t=e.length,s=[],a=0,i=!1,n=!1,o=0;o<t;++o){var r=e.charCodeAt(o),l=r>=65&&r<=90,c=l||r>=97&&r<=122||r>=48&&r<=57,u=l&&!i||!n||!c;i=l,n=c,u&&(s[a++]=o)}return s})(e),a=[],i=s[0],n=0,o=0;o<t;++o)i>o?a[o]=i:(i=s[++n],a[o]=void 0===i?t:i);return a},t=new Map,s=new Map,a=[],i=[],defaultScoreFn=e=>{for(var t=o,s=e.length,a=0;a<s;++a){var i=e[a];if(i!==m){var n=i.score;n>t&&(t=n)}}return t===o?m:t},getValue=(e,t)=>{var s=e[t];if(void 0!==s)return s;var a=t;Array.isArray(t)||(a=t.split("."));for(var i=a.length,n=-1;e&&++n<i;)e=e[a[n]];return e},isObj=e=>"object"==typeof e,n=1/0,o=-n,r=[];r.total=0;var l,c,u,p,m=null,d=(l=[],c=0,p=e=>{for(var t=0,s=l[t],a=1;a<c;){var i=a+1;t=a,i<c&&l[i].score<l[a].score&&(t=i),l[t-1>>1]=l[t],a=1+(t<<1)}for(var n=t-1>>1;t>0&&s.score<l[n].score;n=(t=n)-1>>1)l[t]=l[n];l[t]=s},(u={}).add=e=>{var t=c;l[c++]=e;for(var s=t-1>>1;t>0&&e.score<l[s].score;s=(t=s)-1>>1)l[t]=l[s];l[t]=e},u.poll=e=>{if(0!==c){var t=l[0];return l[0]=l[--c],p(),t}},u.peek=e=>{if(0!==c)return l[0]},u.replaceTop=e=>{l[0]=e,p()},u);return{single:(e,t)=>{if("farzher"==e)return{target:"farzher was here (^-^*)/",score:0,_indexes:[0]};if(!e||!t)return m;var s=getPreparedSearch(e);isObj(t)||(t=getPrepared(t));var a=s.bitflags;return(a&t._bitflags)!==a?m:algorithm(s,t)},go:(e,t,s)=>{if("farzher"==e)return[{target:"farzher was here (^-^*)/",score:0,_indexes:[0],obj:t?t[0]:m}];if(!e)return s&&s.all?all(e,t,s):r;var a=getPreparedSearch(e),i=a.bitflags;a.containsSpace;var l=s&&s.threshold||o,c=s&&s.limit||n,u=0,p=0,h=t.length;if(s&&s.key)for(var g=s.key,f=0;f<h;++f){var y=t[f];(C=getValue(y,g))&&(isObj(C)||(C=getPrepared(C)),(i&C._bitflags)===i&&(T=algorithm(a,C))!==m&&(T.score<l||(T={target:T.target,_targetLower:"",_targetLowerCodes:m,_nextBeginningIndexes:m,_bitflags:0,score:T.score,_indexes:T._indexes,obj:y},u<c?(d.add(T),++u):(++p,T.score>d.peek().score&&d.replaceTop(T)))))}else if(s&&s.keys){var b=s.scoreFn||defaultScoreFn,v=s.keys,P=v.length;for(f=0;f<h;++f){y=t[f];for(var k=Array(P),S=0;S<P;++S)g=v[S],(C=getValue(y,g))?(isObj(C)||(C=getPrepared(C)),(i&C._bitflags)!==i?k[S]=m:k[S]=algorithm(a,C)):k[S]=m;k.obj=y;var F=b(k);F!==m&&(F<l||(k.score=F,u<c?(d.add(k),++u):(++p,F>d.peek().score&&d.replaceTop(k))))}}else for(f=0;f<h;++f){var C,T;(C=t[f])&&(isObj(C)||(C=getPrepared(C)),(i&C._bitflags)===i&&(T=algorithm(a,C))!==m&&(T.score<l||(u<c?(d.add(T),++u):(++p,T.score>d.peek().score&&d.replaceTop(T)))))}if(0===u)return r;var w=Array(u);for(f=u-1;f>=0;--f)w[f]=d.poll();return w.total=u+p,w},highlight:(e,t,s)=>{if("function"==typeof t)return highlightCallback(e,t);if(e===m)return m;void 0===t&&(t="<b>"),void 0===s&&(s="</b>");var a="",i=0,n=!1,o=e.target,r=o.length,l=e._indexes;l=l.slice(0,l.len).sort(((e,t)=>e-t));for(var c=0;c<r;++c){var u=o[c];if(l[i]===c){if(n||(n=!0,a+=t),++i===l.length){a+=u+s+o.substr(c+1);break}}else n&&(n=!1,a+=s);a+=u}return a},prepare,indexes:e=>e._indexes.slice(0,e._indexes.len).sort(((e,t)=>e-t)),cleanup:()=>{t.clear(),s.clear(),a=[],i=[]}}},(k=C).exports?k.exports=F():S.fuzzysort=F();const T=getDefaultExportFromCjs(C.exports);class CompendiumBrowser extends Application{static documentName="Item";static typeName;static filterClasses=[];static ENTRY_TEMPLATE="systems/pf1/templates/apps/compendium-browser/entries.hbs";static#t=new Map;filters=new foundry.utils.Collection;handledTypes=new Set;packs=[];expandedFilters=new Set;entries;_query="";_loadingInfo=null;#s=!1;constructor(e={}){super(e),Object.defineProperty(this,"entries",{value:new Collection}),this.initialize(),this._debouncedRender=foundry.utils.debounce(this.render,300)}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{template:"systems/pf1/templates/apps/compendium-browser/compendium-browser.hbs",classes:["pf1","app","compendium-browser"],id:"pf1-compendium-browser-"+this.name,width:800,height:window.innerHeight-60,top:30,left:40,resizable:!0,scrollY:[".filter-container"],dragDrop:[{dragSelector:".directory-item",dropSelector:null}]})}static initializeBrowsers(){const e=pf1.applications.compendiums,t=pf1.applications.compendiumBrowser;e.items=new t.ItemBrowser,e.feats=new t.FeatBrowser,e.spells=new t.SpellBrowser,e.classes=new t.ClassBrowser,e.races=new t.RaceBrowser,e.bestiary=new t.CreatureBrowser,e.buffs=new t.BuffBrowser}static getIndexes(e=[]){const t=e.map((e=>game.packs.get(e))),s=[];for(const e of t)this.#t.has(e.collection)||this.#t.set(e.collection,e.getIndex()),s.push(this.#t.get(e.collection));return Promise.all(s).finally((()=>{for(const e of t)this.#t.delete(e.collection)}))}static _mapEntry(e,t){const s=foundry.utils.deepClone(e);return s.system=foundry.utils.mergeObject(game.model[this.documentName][e.type],s.system,{inplace:!1}),s.__pack=t.collection,s.__packLabel=t.metadata.label,s.__uuid=t.getUuid(e._id),s.__name=T.prepare(e.name.normalize("NFKD")),s}static async _renderEntries(e){return renderTemplate(this.ENTRY_TEMPLATE,{entries:e})}get title(){return game.i18n.format("PF1.CompendiumBrowserTitle",{type:game.i18n.localize(this.constructor.typeName)})}initialize(){this.filters?.clear();for(const e of this.constructor.filterClasses){if(!(e.prototype instanceof BaseFilter))throw Error(`Filter class ${e.name} does not extend BaseFilter`);const t=new e(this);this.filters.set(t.id,t),e.handledTypes.forEach((e=>this.handledTypes.add(e)))}this.packs=game.packs.filter((e=>this.isPackIncluded(e))),this._loadingInfo={indexCount:this.packs.length,entryCount:this.packs.reduce(((e,t)=>e+t.index.contents.filter((e=>this.handledTypes.has(e.type))).length),0)}}isPackIncluded(e){return!e.config.pf1?.disabled&&(e.documentName===this.constructor.documentName&&(e.metadata.system===game.system.id&&(!!e.visible&&0!==e.index.contents.filter((e=>this.handledTypes.has(e.type))).length)))}async setup(){this.#s=!1,this.entries?.clear(),await CompendiumBrowser.getIndexes(this.packs.map((e=>e.collection)));const e=await Promise.all(this.packs.map((e=>this.loadPackIndex(e))));naturalSort(e.flat(),"name").forEach((e=>this.entries.set(""+e.__uuid,e))),this.filters.forEach((e=>e.setup())),this.#s=!0}async loadPackIndex(e){!1===e.indexed&&await CompendiumBrowser.getIndexes(e.collection);return e.index.filter((e=>this.handledTypes.has(e.type))).map((t=>{try{return this.constructor._mapEntry(t,e)}catch(s){return Hooks.onError("CompendiumBrowser#_mapEntry",s,{msg:`${this.constructor.name} failed to map entry ${t.name} [${t._id}] from pack ${e.collection}`,log:"error",entry:t,pack:e}),null}})).filter((e=>null!==e))}getFilteredEntries(){let e=this.entries.contents;const t=this.filters.filter((e=>e.active));if(t.length&&(e=e.filter((e=>t.every((t=>t.applyFilter(e)))))),this._query){const t=new Intl.Collator(game.settings.get("core","language"),{numeric:!0,ignorePunctuation:!0});e=T.go(this._query.normalize("NFKD"),e,{key:"__name",threshold:-1e4}).sort(((e,s)=>e.score!==s.score?s.score-e.score:t.compare(e.obj.name,s.obj.name))).map((e=>e.obj))}return e}async _render(e,t){const s=this.element?.[0]?.querySelector(":focus"),a=s?.selectionStart;if(await super._render(e,t),s&&s.name){const e=this._element[0].querySelector(`[name="${s.name}"]`);e&&e.focus instanceof Function&&(e.focus(),a&&(e.selectionStart=e.selectionEnd=a))}}async getData(){const e=await super.getData();return e.id=this.options.id,e.query=this._query??"",e.filters=this.filters.filter((e=>e.hasChoices())).map((e=>({...e.getData(),collapsed:this.expandedFilters.has(e.id)?"":"collapsed"}))),this.#s?(this._entries=this.getFilteredEntries(),e.entries=this._entries.slice(0,100),e.itemCount=this.entries.size,e.filteredItemCount=this._entries.length):(e.loading=!0,e.loadingInfo=this._loadingInfo),e}activateListeners(e){super.activateListeners(e);const t=e[0];this.#s?(this._initLazyScrolling(t),t.querySelectorAll(".filter-content").forEach((e=>{this.filters.get(e.closest(".filter").dataset.filterId).activateListeners(e)})),t.querySelector(".directory-list").addEventListener("click",(e=>{this._onClickEntry(e)})),t.querySelector("button.reload").addEventListener("click",(e=>{this._onReload(e)})),t.querySelector("button.clear-filters").addEventListener("click",(e=>{this._onClearFilters(e)})),t.querySelectorAll(".filter>h3").forEach((e=>{e.addEventListener("click",(e=>{this._onFilterHeaderClick(e)}))})),t.querySelector("input[name=filter]")?.addEventListener("input",(e=>{this._onCustomSearchFilter(e)})),ContextMenu.create(this,e,".directory-item",this._getEntryContextOptions())):this.setup().then((()=>this.render()))}_onCustomSearchFilter(e){e.preventDefault(),this._query=e.target.value,this._debouncedRender()}async _onClickEntry(e){const t=e.target.closest(".directory-item");if(!t)return;const{uuid:s}=t.dataset,a=await fromUuid(s),i=game.packs.get(a.pack);return a.sheet.render(!0,{editable:game.user.isGM&&!i.locked,focus:!0})}_getEntryContextOptions(){return[{name:"COMPENDIUM.ImportEntry",icon:'<i class="fas fa-download"></i>',condition:()=>getDocumentClass(this.constructor.documentName).canUserCreate(game.user),callback:async e=>{const t=game.collections.get(this.constructor.documentName),s=e.data("uuid"),a=this.entries.get(s);return t.importFromCompendium(game.packs.get(a.__pack),a._id,{},{renderSheet:!0})}},{name:"PF1.CopyUuidToClipboard",icon:'<i class="fas fa-id-badge"></i>',callback:e=>{const t=e.data("uuid");game.clipboard.copyPlainText(t);const s=game.i18n.localize(getDocumentClass(this.constructor.documentName).metadata.label);ui.notifications.info(game.i18n.format("DOCUMENT.IdCopiedClipboard",{label:s,type:"uuid",id:t}))}}]}_canDragStart(e){return!0}_onDragStart(e){const{uuid:t}=e.currentTarget.dataset;e.dataTransfer.setData("text/plain",JSON.stringify({type:this.constructor.documentName,uuid:t}));const s=this.element[0];setTimeout((()=>s.classList.add("active-drag")),0),document.body.addEventListener("dragend",(()=>s.classList.remove("active-drag")),{once:!0,passive:!0})}_onClearFilters(e){for(const e of this.filters)e.reset();this._query="",this.expandedFilters.clear(),this.render()}async _onReload(e){this.#s=!1,this.initialize(),this.render()}_onFilterHeaderClick(e){const{filterId:t}=e.target.closest(".filter").dataset,s=e.target.closest(".filter").querySelector(".filter-content");this.expandedFilters.has(t)?(this.expandedFilters.delete(t),s.classList.add("collapsed")):(this.expandedFilters.add(t),s.classList.remove("collapsed"))}_initLazyScrolling(e){const t=e.querySelector(".directory-bottom");t&&new IntersectionObserver((async([s],a)=>{if(s.isIntersecting){const s=e.querySelectorAll(".directory-item").length,i=this._entries.slice(s,s+50);if(0===i.length)a.unobserve(t);else{const s=await this.constructor._renderEntries(i);t.insertAdjacentHTML("beforebegin",s),this._dragDrop[0].bind(e)}}}),{root:e.querySelector(".directory-list"),rootMargin:"300px"}).observe(t)}}class ActorTraitSelector extends DocumentSheet{constructor(e,t){super(e,t),this.options.classes.push(t.subject);let{value:s,custom:a}=foundry.utils.getProperty(e.toObject(),this.attribute)??{value:[],custom:[]};s||=[],a||=[],this.attributes={value:s,custom:a}}splitCustom(e){return e.split(pf1.config.re.traitSeparator).map((e=>e.trim())).filter((e=>!!e))}get title(){return`${this.options.title} – ${this.object.name}`}get id(){return`trait-selector-${this.document.uuid.replaceAll(".","-")}-${this.options.subject}`}static get defaultOptions(){const e=super.defaultOptions;return{...e,classes:[...e.classes,"pf1","trait-selector"],template:"systems/pf1/templates/apps/trait-selector.hbs",width:320,height:"auto",sheetConfig:!1,submitOnClose:!1,submitOnChange:!0,closeOnSubmit:!1}}get attribute(){return this.options.name}getData(){const{value:e,custom:t}=this.attributes,s=foundry.utils.deepClone(this.options.choices);for(const[t,a]of Object.entries(s))s[t]={label:a,chosen:e.includes(t)};const a=this.object instanceof Actor?"PF1.UpdateActor":"PF1.UpdateItem";return{choices:s,custom:Array.from(new Set(t)),updateButton:a}}async _updateDocument(e){await this._onSubmit(e,{preventRender:!0}),delete this.document.apps[this.appId];const{custom:t,value:s}=this.attributes,a={[this.attribute]:{value:s,custom:t}};this.object.update(a),this.close({force:!0})}_onCustomInput(e){/;/.test(e.target.value)&&(e.preventDefault(),this.submit())}_onActiveCustomInput(e){if(!e.isComposing)switch(e.key){case"Enter":e.preventDefault(),this.submit();break;case"Backspace":{if(""!==e.target.value)return;if(e.repeat)return;const t=this.form.querySelector(".custom-tags .custom-tag:last-of-type");if(!t)return;if(t.classList.contains("pre-delete")){const e=t.dataset.customTag;this.attributes.custom=this.attributes.custom.filter((t=>t!==e)),this.render()}else t.classList.add("pre-delete");break}default:this.form.querySelector(".custom-tags .custom-tag:last-of-type")?.classList.remove("pre-delete")}}_deleteCustomTag(e){const t=e.target.dataset.customTag;this.attributes.custom=this.attributes.custom.filter((e=>e!==t)),this.render()}activateListeners(e){super.activateListeners(e);const t=this.form.querySelector("input[name='custom']");t.addEventListener("input",this._onCustomInput.bind(this),{passive:!0}),t.addEventListener("keydown",this._onActiveCustomInput.bind(this)),this.form.querySelectorAll(".custom-tags .custom-tag > a[data-action='delete']").forEach((e=>{e.addEventListener("click",this._deleteCustomTag.bind(this),{passive:!0})})),this.form.querySelector("button[type='submit']").addEventListener("click",this._updateDocument.bind(this))}_updateObject(e,t){let{choices:s,custom:a}=foundry.utils.expandObject(t);s=Object.entries(s).filter((([e,t])=>t)).map((([e])=>e)),a?.length&&this.attributes.custom.push(...this.splitCustom(a)),this.attributes.value=s,this.render()}}const w=foundry.data.fields;class Registry extends foundry.utils.Collection{static model=null;static _defaultData=[];model=null;constructor(){super(),Object.defineProperty(this,"model",{value:this.constructor.model,writable:!1,enumerable:!1}),this._initialize()}get name(){return this.constructor.name}_initialize(){this.clear();for(const e of this.constructor._defaultData)try{const t=new this.model({...e,namespace:"pf1"});super.set(t.id,t)}catch(e){console.error(e)}Hooks.callAll("pf1Register"+this.name,this)}setup(){for(const e of this)e.prepareData()}set(e,t){const s=this.model;if(!(t instanceof s))throw Error(`Registry '${this.name}' can only register ${s.name}`);return super.set(e,t)}register(e,t,s){if(!e||!t)throw Error("Registering requires both a namespace and an ID");if(this.has(t))throw Error(`Registry '${this.name}' already has a key '${t}'`);return this.set(t,new this.model({...s,namespace:e,_id:t}))}unregister(e,t){if(!e|!t)throw Error("Unregistering requires both a namespace and an ID");if(t){const s=this.get(t);if(!s||s.namespace!==e)throw Error(`Registry '${this.name}' has no key '${t}'`);this.delete(t)}else for(const t of this)t.namespace===e&&this.delete(t.id)}toObject(e=!1){return Object.fromEntries(this.map((t=>[t.id,t.toObject(e)])))}getLabels(){return Object.fromEntries(this.map((e=>[e.id,e.name])))}}class RegistryEntry extends foundry.abstract.DataModel{static defineSchema(){return{_id:new w.StringField({required:!0,blank:!1,readonly:!0}),name:new w.StringField({required:!1,initial:"",localize:!0}),flags:new w.ObjectField({required:!1,initial:{}}),namespace:new w.StringField({required:!0,blank:!1})}}get id(){return this._id}prepareData(){this.reset();for(const[e,t]of Object.entries(this.constructor.schema.fields))t instanceof w.StringField&&!0===t.options.localize&&(this[e]=game.i18n.localize(this[e]))}}const _=foundry.data.fields;class DamageType extends RegistryEntry{static defineSchema(){return{...super.defineSchema(),abbr:new _.StringField({required:!1,blank:!1,nullable:!0,initial:null}),icon:new _.StringField({required:!1,initial:""}),img:new _.FilePathField({categories:["IMAGE"]}),category:new _.StringField({required:!0,blank:!1,initial:"misc",choices:()=>DamageTypes.CATEGORIES}),isModifier:new _.BooleanField({required:!1,initial:!1}),color:new _.StringField({required:!0,initial:"black"})}}}class DamageTypes extends Registry{static model=DamageType;static CATEGORIES=["physical","energy","misc"];static _defaultData=[{_id:"untyped",name:"PF1.DamageTypes.untyped.Label",icon:"ra ra-uncertainty",category:"misc"},{_id:"slashing",name:"PF1.DamageTypes.slashing.Label",abbr:"PF1.DamageTypes.slashing.Abbr",icon:"ra ra-sword",color:"yellow",category:"physical"},{_id:"piercing",name:"PF1.DamageTypes.piercing.Label",abbr:"PF1.DamageTypes.piercing.Abbr",icon:"ra ra-spear-head",color:"blue",category:"physical"},{_id:"bludgeoning",name:"PF1.DamageTypes.bludgeoning.Label",abbr:"PF1.DamageTypes.bludgeoning.Abbr",icon:"ra ra-large-hammer",color:"red",category:"physical"},{_id:"fire",name:"PF1.DamageTypes.fire.Label",icon:"ra ra-fire",color:"orange",category:"energy"},{_id:"cold",name:"PF1.DamageTypes.cold.Label",icon:"ra ra-frost-emblem",color:"aqua",category:"energy"},{_id:"electric",name:"PF1.DamageTypes.electricity.Label",icon:"ra ra-lightning-bolt",color:"yellow",category:"energy"},{_id:"acid",name:"PF1.DamageTypes.acid.Label",icon:"ra ra-acid",color:"lime",category:"energy"},{_id:"sonic",name:"PF1.DamageTypes.sonic.Label",icon:"ra ra-horn-call",color:"#00aedb",category:"energy"},{_id:"force",name:"PF1.DamageTypes.force.Label",icon:"ra ra-doubled",color:"#a200ff",category:"misc"},{_id:"negative",name:"PF1.DamageTypes.negative.Label",icon:"ra ra-skull",color:"#765898",category:"misc"},{_id:"positive",name:"PF1.DamageTypes.positive.Label",icon:"ra ra-sunbeams",color:"#f8ed62",category:"misc"},{_id:"precision",name:"PF1.Precision",icon:"ra ra-archery-target",isModifier:!0},{_id:"nonlethal",name:"PF1.Nonlethal",icon:"ra ra-hand",isModifier:!0}]}const D=foundry.data.fields;class MaterialType extends RegistryEntry{static defineSchema(){return{...super.defineSchema(),baseMaterial:new D.StringField({required:!1,initial:"steel"}),addon:new D.BooleanField({required:!1,initial:!1}),basic:new D.BooleanField({required:!1,initial:!1}),masterwork:new D.BooleanField({required:!1,initial:!1}),allowed:new D.SchemaField({lightBlade:new D.BooleanField({required:!1,initial:!0}),oneHandBlade:new D.BooleanField({required:!1,initial:!0}),twoHandBlade:new D.BooleanField({required:!1,initial:!0}),rangedWeapon:new D.BooleanField({required:!1,initial:!0}),buckler:new D.BooleanField({required:!1,initial:!0}),lightShield:new D.BooleanField({required:!1,initial:!0}),heavyShield:new D.BooleanField({required:!1,initial:!0}),towerShield:new D.BooleanField({required:!1,initial:!0}),lightArmor:new D.BooleanField({required:!1,initial:!0}),mediumArmor:new D.BooleanField({required:!1,initial:!0}),heavyArmor:new D.BooleanField({required:!1,initial:!0})}),armor:new D.SchemaField({acp:new D.NumberField({required:!1,initial:0,integer:!0}),maxDex:new D.NumberField({required:!1,initial:0,integer:!0}),asf:new D.NumberField({required:!1,initial:0,integer:!0})}),shield:new D.SchemaField({acp:new D.NumberField({required:!1,initial:0,integer:!0}),maxDex:new D.NumberField({required:!1,initial:0,integer:!0}),asf:new D.NumberField({required:!1,initial:0,integer:!0})}),hardness:new D.NumberField({required:!1,initial:10,integer:!0,min:0,positive:!1}),healthMultiplier:new D.NumberField({required:!1,initial:1,integer:!1,positive:!0}),price:new D.SchemaField({multiplier:new D.NumberField({required:!1,initial:1,integer:!1,positive:!0}),perPound:new D.NumberField({required:!1,initial:0,integer:!1,positive:!1}),ammunition:new D.NumberField({required:!1,initial:0,integer:!1,positive:!1}),lightWeapon:new D.NumberField({required:!1,initial:0,integer:!1,positive:!1}),oneHandWeapon:new D.NumberField({required:!1,initial:0,integer:!1,positive:!1}),twoHandWeapon:new D.NumberField({required:!1,initial:0,integer:!1,positive:!1}),rangedOneHandWeapon:new D.NumberField({required:!1,initial:0,integer:!1,positive:!1}),rangedTwoHandWeapon:new D.NumberField({required:!1,initial:0,integer:!1,positive:!1}),shield:new D.NumberField({required:!1,initial:0,integer:!1,positive:!1}),lightArmor:new D.NumberField({required:!1,initial:0,integer:!1,positive:!1}),mediumArmor:new D.NumberField({required:!1,initial:0,integer:!1,positive:!1}),heavyArmor:new D.NumberField({required:!1,initial:0,integer:!1,positive:!1})}),weight:new D.SchemaField({multiplier:new D.NumberField({required:!1,initial:1,integer:!1,positive:!0}),bonusPerPound:new D.NumberField({required:!1,initial:0,integer:!1,positive:!1})})}}}class MaterialTypes extends Registry{static model=MaterialType;static _defaultData=[{_id:"cloth",name:"PF1.Materials.Types.Cloth",basic:!0,hardness:0,healthMultiplier:.07},{_id:"leather",name:"PF1.Materials.Types.Leather",basic:!0,hardness:2,healthMultiplier:.17},{_id:"adamantine",name:"PF1.Materials.Types.Adamantine",masterwork:!0,allowed:{buckler:!1,lightShield:!1,heavyShield:!1,towerShield:!1},hardness:20,healthMultiplier:1.34,price:{ammunition:60,lightWeapon:3e3,oneHandWeapon:3e3,twoHandWeapon:3e3,rangedOneHandWeapon:3e3,rangedTwoHandWeapon:3e3,lightArmor:5e3,mediumArmor:1e4,heavyArmor:15e3}},{_id:"alchemicalsilver",name:"PF1.Materials.Types.AlchemicalSilver",addon:!0,allowed:{buckler:!1,lightShield:!1,heavyShield:!1,towerShield:!1,lightArmor:!1,mediumArmor:!1,heavyArmor:!1},hardness:8,healthMultiplier:.34,price:{ammunition:2,lightWeapon:20,oneHandWeapon:90,twoHandWeapon:180,rangedOneHandWeapon:90,rangedTwoHandWeapon:180}},{_id:"angelskin",name:"PF1.Materials.Types.AngelSkin",baseMaterial:"leather",masterwork:!0,allowed:{lightBlade:!1,oneHandBlade:!1,twoHandBlade:!1,rangedWeapon:!1,buckler:!1,lightShield:!1,heavyShield:!1,towerShield:!1,heavyArmor:!1},hardness:5,healthMultiplier:.17,price:{lightArmor:1e3,mediumArmor:2e3}},{_id:"aszite",name:"PF1.Materials.Types.Aszite",allowed:{lightBlade:!1,oneHandBlade:!1,twoHandBlade:!1,rangedWeapon:!1,buckler:!1,lightShield:!1,heavyShield:!1,towerShield:!1},price:{lightArmor:750,mediumArmor:750,heavyArmor:1e3},weight:{multiplier:1.1}},{_id:"blackwood",name:"PF1.Materials.Types.Blackwood",baseMaterial:"wood",masterwork:!0,shield:{acp:-2},hardness:7,price:{perPound:20},weight:{multiplier:.5}},{_id:"bloodcrystal",name:"PF1.Materials.Types.BloodCrystal",allowed:{buckler:!1,lightShield:!1,heavyShield:!1,towerShield:!1,lightArmor:!1,mediumArmor:!1,heavyArmor:!1},healthMultiplier:.5,price:{ammunition:30,lightWeapon:1500,oneHandWeapon:1500,twoHandWeapon:1500,rangedOneHandWeapon:1500,rangedTwoHandWeapon:1500}},{_id:"caphorite",name:"PF1.Materials.Types.Caphorite",allowed:{lightBlade:!1,oneHandBlade:!1,twoHandBlade:!1,rangedWeapon:!1,buckler:!1,lightShield:!1,heavyShield:!1,towerShield:!1,lightArmor:!1,mediumArmor:!1,heavyArmor:!1},price:{ammunition:10}},{_id:"coldiron",name:"PF1.Materials.Types.ColdIron",price:{multiplier:2}},{_id:"cryptstone",name:"PF1.Materials.Types.Cryptstone",baseMaterial:"stone",masterwork:!0,allowed:{buckler:!1,lightShield:!1,heavyShield:!1,towerShield:!1,lightArmor:!1,mediumArmor:!1,heavyArmor:!1},price:{ammunition:10,lightWeapon:500,oneHandWeapon:500,twoHandWeapon:500,rangedOneHandWeapon:500,rangedTwoHandWeapon:500}},{_id:"darkleafcloth",name:"PF1.Materials.Types.DarkleafCloth",baseMaterial:"leather",masterwork:!0,allowed:{lightBlade:!1,oneHandBlade:!1,twoHandBlade:!1,rangedWeapon:!1,buckler:!1,lightShield:!1,heavyShield:!1,towerShield:!1,heavyArmor:!1},armor:{acp:-3,maxDex:2,asf:-10},healthMultiplier:4,price:{lightArmor:750,mediumArmor:1500},weight:{multiplier:.5}},{_id:"darkwood",name:"PF1.Materials.Types.Darkwood",masterwork:!0,shield:{acp:-2},hardness:5,price:{perPound:10},weight:{multiplier:.5}},{_id:"dragonhide",name:"PF1.Materials.Types.Dragonhide",baseMaterial:"leather",masterwork:!0,allowed:{lightBlade:!1,oneHandBlade:!1,twoHandBlade:!1,buckler:!1,towerShield:!1},price:{multiplier:2}},{_id:"druchite",name:"PF1.Materials.Types.Druchite",allowed:{buckler:!1,lightShield:!1,heavyShield:!1,towerShield:!1},healthMultiplier:1.34,price:{ammunition:12,lightWeapon:1200,oneHandWeapon:1200,twoHandWeapon:1200,rangedOneHandWeapon:1200,rangedTwoHandWeapon:1200,lightArmor:1e3,mediumArmor:1500,heavyArmor:2e3}},{_id:"eelhide",name:"PF1.Materials.Types.EelHide",baseMaterial:"leather",masterwork:!0,allowed:{lightBlade:!1,oneHandBlade:!1,twoHandBlade:!1,rangedWeapon:!1,buckler:!1,lightShield:!1,heavyShield:!1,towerShield:!1,heavyArmor:!1},armor:{acp:-1,maxDex:1},price:{lightArmor:1200,mediumArmor:1800}},{_id:"elysianbronze",name:"PF1.Materials.Types.ElysianBronze",allowed:{buckler:!1,lightShield:!1,heavyShield:!1,towerShield:!1},price:{ammunition:20,lightWeapon:1e3,oneHandWeapon:1e3,twoHandWeapon:1e3,rangedOneHandWeapon:1e3,rangedTwoHandWeapon:1e3,lightArmor:1e3,mediumArmor:2e3,heavyArmor:3e3}},{_id:"fireforgedsteel",name:"PF1.Materials.Types.FireForgedSteel",masterwork:!0,allowed:{buckler:!1,lightShield:!1,heavyShield:!1,towerShield:!1},price:{ammunition:15,lightWeapon:600,oneHandWeapon:600,twoHandWeapon:600,rangedOneHandWeapon:600,rangedTwoHandWeapon:600,lightArmor:1e3,mediumArmor:2500,heavyArmor:3e3}},{_id:"frostforgedsteel",name:"PF1.Materials.Types.FrostForgedSteel",masterwork:!0,allowed:{buckler:!1,lightShield:!1,heavyShield:!1,towerShield:!1},price:{ammunition:15,lightWeapon:600,oneHandWeapon:600,twoHandWeapon:600,rangedOneHandWeapon:600,rangedTwoHandWeapon:600,lightArmor:1e3,mediumArmor:2500,heavyArmor:3e3}},{_id:"glaucite",name:"PF1.Materials.Types.Glaucite",allowed:{buckler:!1},hardness:15,price:{multiplier:3},weight:{multiplier:1.5}},{_id:"greenwood",name:"PF1.Materials.Types.Greenwood",baseMaterial:"wood",masterwork:!0,price:{perPound:50,ammunition:6,lightWeapon:300,oneHandWeapon:300,twoHandWeapon:300,rangedOneHandWeapon:300,rangedTwoHandWeapon:300,shield:150,lightArmor:150,mediumArmor:150,heavyArmor:150}},{_id:"griffonmane",name:"PF1.Materials.Types.GriffonMane",baseMaterial:"cloth",allowed:{lightBlade:!1,oneHandBlade:!1,twoHandBlade:!1,rangedWeapon:!1,buckler:!1,lightShield:!1,heavyShield:!1,towerShield:!1,mediumArmor:!1,heavyArmor:!1},hardness:1,healthMultiplier:2,price:{perPound:50,lightArmor:200}},{_id:"heatstoneplating",name:"PF1.Materials.Types.HeatstonePlating",addon:!0,allowed:{lightBlade:!1,oneHandBlade:!1,twoHandBlade:!1,rangedWeapon:!1,buckler:!1,lightShield:!1,heavyShield:!1,towerShield:!1,heavyArmor:!1},price:{lightArmor:800,mediumArmor:1e3},weight:{bonusPerPound:.2}},{_id:"horacalcum",name:"PF1.Materials.Types.Horacalcum",masterwork:!0,allowed:{buckler:!1,lightShield:!1,heavyShield:!1,towerShield:!1},hardness:15,healthMultiplier:1.25,price:{ammunition:120,lightWeapon:6e3,oneHandWeapon:6e3,twoHandWeapon:6e3,rangedOneHandWeapon:6e3,rangedTwoHandWeapon:6e3,lightArmor:1e4,mediumArmor:3e4,heavyArmor:6e4}},{_id:"inubrix",name:"PF1.Materials.Types.Inubrix",allowed:{buckler:!1,lightShield:!1,heavyShield:!1,towerShield:!1,lightArmor:!1,mediumArmor:!1,heavyArmor:!1},hardness:5,healthMultiplier:.34,price:{ammunition:100,lightWeapon:5e3,oneHandWeapon:5e3,twoHandWeapon:5e3,rangedOneHandWeapon:5e3,rangedTwoHandWeapon:5e3}},{_id:"lazurite",name:"PF1.Materials.Types.Lazurite",addon:!0,allowed:{lightBlade:!1,oneHandBlade:!1,twoHandBlade:!1,rangedWeapon:!1,buckler:!1,lightShield:!1,heavyShield:!1,towerShield:!1},price:{lightArmor:1500,mediumArmor:2500,heavyArmor:3500}},{_id:"liquidglass",name:"PF1.Materials.Types.LiquidGlass",healthMultiplier:.34,price:{perPound:250,ammunition:16,lightWeapon:800,oneHandWeapon:800,twoHandWeapon:800,rangedOneHandWeapon:800,rangedTwoHandWeapon:800}},{_id:"livingsteel",name:"PF1.Materials.Types.LivingSteel",hardness:15,healthMultiplier:1.16,price:{perPound:250,ammunition:10,lightWeapon:500,oneHandWeapon:500,twoHandWeapon:500,rangedOneHandWeapon:500,rangedTwoHandWeapon:500,shield:100,lightArmor:500,mediumArmor:1e3,heavyArmor:1500}},{_id:"mithral",name:"PF1.Materials.Types.Mithral",masterwork:!0,armor:{acp:3,maxDex:2,asf:-10},shield:{acp:3,maxDex:2,asf:-10},hardness:15,price:{shield:1e3,lightArmor:1e3,mediumArmor:4e3,heavyArmor:9e3},weight:{multiplier:.5}},{_id:"noqual",name:"PF1.Materials.Types.Noqual",armor:{acp:-3,maxDex:2,asf:20},shield:{acp:-3,maxDex:2,asf:20},price:{ammunition:10,lightWeapon:500,oneHandWeapon:500,twoHandWeapon:500,rangedOneHandWeapon:500,rangedTwoHandWeapon:500,shield:2e3,lightArmor:4e3,mediumArmor:8e3,heavyArmor:12e3},weight:{multiplier:.5}},{_id:"paueliel",name:"PF1.Materials.Types.Paueliel",masterwork:!0,shield:{acp:-2},hardness:7,price:{perPound:15},weight:{multiplier:.5}},{_id:"pyresteel",name:"PF1.Materials.Types.PyreSteel",allowed:{buckler:!1},healthMultiplier:.5,price:{multiplier:2}},{_id:"siccatite",name:"PF1.Materials.Types.Siccatite",allowed:{buckler:!1,lightShield:!1,heavyShield:!1,towerShield:!1},price:{ammunition:20,lightWeapon:1e3,oneHandWeapon:1e3,twoHandWeapon:1e3,rangedOneHandWeapon:1e3,rangedTwoHandWeapon:1e3,lightArmor:6e3,mediumArmor:6e3,heavyArmor:6e3}},{_id:"silversheen",name:"PF1.Materials.Types.Silversheen",masterwork:!0,allowed:{buckler:!1,lightShield:!1,heavyShield:!1,towerShield:!1,lightArmor:!1,mediumArmor:!1,heavyArmor:!1},price:{ammunition:15,lightWeapon:750,oneHandWeapon:750,twoHandWeapon:750,rangedOneHandWeapon:750,rangedTwoHandWeapon:750}},{_id:"singingsteel",name:"PF1.Materials.Types.SingingSteel",masterwork:!0,armor:{acp:-1,maxDex:1,asf:-5},shield:{acp:-1,maxDex:1,asf:-5},healthMultiplier:.67,price:{perPound:600,ammunition:120,lightWeapon:6e3,oneHandWeapon:6e3,twoHandWeapon:6e3,rangedOneHandWeapon:6e3,rangedTwoHandWeapon:6e3,shield:7e3,lightArmor:750,mediumArmor:9e3,heavyArmor:12e3}},{_id:"spiresteel",name:"PF1.Materials.Types.SpireSteel",masterwork:!0,allowed:{buckler:!1,lightShield:!1,heavyShield:!1,towerShield:!1},price:{ammunition:10,lightWeapon:2e3,oneHandWeapon:2e3,twoHandWeapon:2e3,rangedOneHandWeapon:2e3,rangedTwoHandWeapon:2e3,lightArmor:1e3,mediumArmor:2e3,heavyArmor:3e3}},{_id:"steel",name:"PF1.Materials.Types.Steel",basic:!0},{_id:"sunsilk",name:"PF1.Materials.Types.Sunsilk",baseMaterial:"cloth",addon:!0,allowed:{lightBlade:!1,oneHandBlade:!1,twoHandBlade:!1,rangedWeapon:!1,buckler:!1,lightShield:!1,heavyShield:!1,towerShield:!1},price:{lightArmor:6e3,mediumArmor:6e3,heavyArmor:6e3}},{_id:"sunsilver",name:"PF1.Materials.Types.Sunsilver",masterwork:!0,hardness:8,healthMultiplier:.34,price:{perPound:25}},{_id:"throneglass",name:"PF1.Materials.Types.Throneglass",allowed:{rangedWeapon:!1,buckler:!1,lightShield:!1,heavyShield:!1,towerShield:!1,lightArmor:!1,mediumArmor:!1,heavyArmor:!1},price:{lightWeapon:13e3,oneHandWeapon:13e3,twoHandWeapon:13e3}},{_id:"viridium",name:"PF1.Materials.Types.Viridium",allowed:{buckler:!1,lightShield:!1,heavyShield:!1,towerShield:!1,lightArmor:!1,mediumArmor:!1,heavyArmor:!1},hardness:5,price:{ammunition:20,lightWeapon:200,oneHandWeapon:200,twoHandWeapon:200,rangedOneHandWeapon:200,rangedTwoHandWeapon:200}},{_id:"voidglass",name:"PF1.Materials.Types.Voidglass",price:{lightWeapon:1e3,oneHandWeapon:1e3,twoHandWeapon:1e3,rangedOneHandWeapon:1e3,rangedTwoHandWeapon:1e3,shield:3e3,lightArmor:1e3,mediumArmor:2e3,heavyArmor:4500}},{_id:"whipwood",name:"PF1.Materials.Types.Whipwood",baseMaterial:"wood",allowed:{buckler:!1,lightShield:!1,heavyShield:!1,towerShield:!1,lightArmor:!1,mediumArmor:!1,heavyArmor:!1},price:{lightWeapon:500,oneHandWeapon:500,twoHandWeapon:500,rangedOneHandWeapon:500,rangedTwoHandWeapon:500}},{_id:"wyroot",name:"PF1.Materials.Types.Wyroot",baseMaterial:"wood",allowed:{rangedWeapon:!1,buckler:!1,lightShield:!1,heavyShield:!1,towerShield:!1,lightArmor:!1,mediumArmor:!1,heavyArmor:!1}},{_id:"bone",name:"PF1.Materials.Types.Bone"},{_id:"bronze",name:"PF1.Materials.Types.Bronze",allowed:{buckler:!1}},{_id:"glass",name:"PF1.Materials.Types.Glass",allowed:{buckler:!1}},{_id:"gold",name:"PF1.Materials.Types.Gold",allowed:{buckler:!1},price:{multiplier:10},weight:{multiplier:.5}},{_id:"obsidian",name:"PF1.Materials.Types.Obsidian",allowed:{rangedWeapon:!1,buckler:!1,lightShield:!1,heavyShield:!1,towerShield:!1,lightArmor:!1,mediumArmor:!1,heavyArmor:!1},price:{multiplier:.5},weight:{multiplier:.75}},{_id:"stone",name:"PF1.Materials.Types.Stone",allowed:{buckler:!1},price:{multiplier:.25},weight:{multiplier:.75}},{_id:"wood",name:"PF1.Materials.Types.Wood",baseMaterial:"wood",basic:!0,hardness:5},{_id:"magic",name:"PF1.Materials.Types.Magic",addon:!0},{_id:"epic",name:"PF1.Materials.Types.Epic",addon:!0}]}class DamageTypeSelector extends FormApplication{path;damage;constructor(e,t,s,a={}){super(e,a),this.path=t,this.damage=foundry.utils.deepClone(s)||{values:[]}}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{width:720,height:590,template:"systems/pf1/templates/apps/damage-type-selector.hbs",scrollY:[".damage-type-categories",".damage-modifiers"],closeOnSubmit:!0})}get title(){return game.i18n.localize("PF1.DamageType")}get id(){return`damage-types-${this.object.id}-${this.path.replaceAll(".","_")}`}get damageCategorySortOrder(){return["physical","energy","misc"]}async getData(){const e=pf1.registry.damageTypes.filter((e=>!e.isModifier)).map((e=>({...e,id:e.id,enabled:this.damage.values.includes(e.id)}))),t=this.damageCategorySortOrder;return{damage:this.damage,damageTypes:e,damageModifiers:pf1.registry.damageTypes.filter((e=>e.isModifier)).map((e=>({...e,id:e.id,enabled:this.damage.values.includes(e.id)}))),damageCategories:e.reduce(((e,t)=>{let s=e.find((e=>e.key===t.category));return s||(s={key:t.category,label:"PF1.DamageTypeCategory."+t.category,types:[]},e.push(s)),s.types.push(t),e}),[]).sort(((e,s)=>{const a=t.indexOf(e.key),i=t.indexOf(s.key);return-1===a&&i>=0?1:-1===i&&a>=0?-1:a>i?1:a<i?-1:0}))}}activateListeners(e){e.find(".damage-type").on("click",this._toggleDamageType.bind(this)),e.find("*[name]").on("change",this._onChangeData.bind(this))}_onChangeData(e){e.preventDefault();const t=e.currentTarget,s=t.name;let a=t.value;switch("checkbox"===t.type&&(a=t.checked),t.dataset.dtype){case"Boolean":a=!!a;break;case"Number":a=Number(a)}foundry.utils.setProperty(this.damage,s,a)}_toggleDamageType(e){e.preventDefault();const t=e.currentTarget.dataset.id;this.damage.values.includes(t)?this.damage.values.splice(this.damage.values.indexOf(t),1):this.damage.values.push(t),this.render()}async _updateObject(e,t){return this.object.update({[this.path]:this.damage})}}class ActorResistanceSelector extends FormApplication{constructor(...e){super(...e),this.isDR=!0===this.options.isDR;const t=foundry.utils.deepClone(foundry.utils.getProperty(this.object,this.attribute)??{});this.custom=t.custom,this.originalEntries=t.value,this.entries=t.value;const s=pf1.registry.damageTypes.filter((e=>!e.isModifier)),a={};Object.values(s).sort().forEach((e=>{("energy"!==e.category&&"misc"!==e.category||!this.isDR)&&("physical"!==e.category&&("misc"!==e.category||"untyped"!==e.id)||this.isDR)&&(a[e.id]=e.name)})),this.isDR&&(this.options.id="damage-resistance-selector",Object.keys(pf1.config.damageResistances).forEach((e=>{a[e]=pf1.config.damageResistances[e]})),pf1.registry.materialTypes.forEach((e=>{(e.allowed.lightBlade||e.allowed.oneHandBlade||e.allowed.twoHandBlade||e.allowed.rangedWeapon)&&(a[e.id]=e.name)}))),this.damages=a,this.operators={true:"PF1.Application.DamageResistanceSelector.CombinationOr",false:"PF1.Application.DamageResistanceSelector.CombinationAnd"}}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{id:"energy-resistance-selector",classes:["pf1","resistance"],template:"systems/pf1/templates/apps/damage-resistance-selector.hbs",height:"auto",closeOnSubmit:!0,submitOnClose:!1})}get title(){return game.i18n.localize("PF1.Application.DamageResistanceSelector."+(this.isDR?"DR":"ER")+"Title")}get attribute(){return this.options.name}get fields(){return this.options.fields.split(";")}get dtypes(){return this.options.dtypes.split(";")}get dataCount(){return this.fields.length}getData(){return{custom:this.custom,damages:this.damages,operators:this.operators,entries:this.entries,fields:this.fields,dtypes:this.dtypes,isDR:this.isDR}}activateListeners(e){e.find(".resistance-control").click(this._onResistanceControl.bind(this)),e.find("tr td input").change(this._onResistanceChange.bind(this)),e.find("tr td select").change(this._onResistanceChange.bind(this)),e.find("input[name=custom]").change(this._onResistanceCustomChange.bind(this))}async _updateObject(e,t){const s={},a=this.entries.map((e=>(e.types[0]??="",e.types[1]??="",""===e.types[0]&&""!==e.types[1]&&(e.types[0]=e.types[1],e.types[1]=""),e.types[0]===e.types[1]&&(e.types[1]=""),e.operator="true"===(e.operator+"").toLowerCase(),e)));return s[this.attribute+".value"]=a,s[this.attribute+".custom"]=this.custom,this.object.update(s)}async _onResistanceControl(e){e.preventDefault();const t=e.currentTarget;if(t.classList.contains("add-resistance")){const e={amount:0,types:[this.isDR?"":"fire",""],operator:!0};return this.entries.push(e),this.render()}if(t.classList.contains("delete-resistance")){const e=t.closest("tr"),s=parseInt(e.dataset.index);return this.entries.splice(s,1),this.render()}}async _onResistanceChange(e){const t=e.currentTarget,s=t.closest("tr.resistance"),a=parseInt(s.dataset.index),i=t.dataset.index,n=t.value;let o=null;if("Number"===t.dataset.dtype){let e=parseFloat(n);isNaN(e)&&(e=0),o=Math.floor(100*e)/100}else o="Boolean"===t.dataset.dtype?"true"===n:n;switch(i){case"types0":this.entries[a].types[0]=o;break;case"types1":this.entries[a].types[1]=o;break;default:this.entries[a][i]=o}}async _onResistanceCustomChange(e){const t=e.currentTarget;this.custom=t.value}}class ActorRestDialog extends DocumentSheet{static get defaultOptions(){const e=super.defaultOptions;return foundry.utils.mergeObject(e,{classes:["pf1","actor-rest"],template:"systems/pf1/templates/apps/actor-rest.hbs",width:500,closeOnSubmit:!0})}get actor(){return this.document}get title(){return`${game.i18n.localize("PF1.Rest")}: ${this.actor.name}`}async _updateObject(e,t){this.actor.performRest(t)}}class PointBuyCalculator extends DocumentSheet{constructor(...e){super(...e);const t=this.actor.system.abilities;this.abilities=[];for(const[e,s]of Object.entries(pf1.config.abilities))this.abilities.push({key:e,name:s,value:t[e]?.value??10});const s=Object.keys(pf1.config.abilityCost).map((e=>Number(e)));this.min=Math.min(...s),this.max=Math.max(...s)}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["pf1","pointbuy-calculator"],template:"systems/pf1/templates/apps/point-buy-calculator.hbs",width:320,height:"auto",closeOnSubmit:!1,submitOnClose:!1})}get title(){return`${game.i18n.localize("PF1.Application.PointBuy.Title")}: ${this.object.name}`}get actor(){return this.document}getData(){const e=this.getSpentPoints(),t=pf1.config.pointBuy,s=Object.entries(t).map((([e,t])=>({...t,key:e})));s.sort(((e,t)=>e.points-t.points));let a=s[0].key;for(const i of s){t[a].points<e&&(a=i.key)}return{abilities:this.abilities,points:e,limits:s,closest:a,invalidPoints:t[a].points!==e}}getSpentPoints(){let e=0;for(const t of this.abilities)e+=pf1.config.abilityCost[t.value];return e}activateListeners(e){super.activateListeners(e),e.find(".control").click(this._onAbilityControl.bind(this))}_onAbilityControl(e){e.preventDefault();const t=e.currentTarget,s=t.closest(".ability").dataset.ability,a=this.abilities.find((e=>e.key===s));t.classList.contains("add")?a.value=Math.min(this.max,a.value+1):t.classList.contains("subtract")&&(a.value=Math.max(this.min,a.value-1)),this.render()}_updateObject(){const e={};for(const t of this.abilities)e[`system.abilities.${t.key}.value`]=t.value;this.actor.update(e),this.close()}}class Widget_ItemPicker{constructor(e,{items:t,columns:s=3}={}){this.element=null,this.callback=e,this._items=t,this.columns=s}render(e){const t=$($.parseHTML('<div class="widget item-picker"></div>'));let s;for(let e=0;e<this._items.length;e++){const a=this._items[e];e%this.columns==0&&(s=$($.parseHTML('<div class="row"></div>')),t.append(s));const i=$($.parseHTML(`<div class="item" value="${a.value}">${a.label}</div>`)),n=Math.floor(1e4/this.columns)/100;i.css("flex",`0 0 calc(${n}% - 4px)`),s.append(i)}e instanceof jQuery||(e=$(e)),t.css("position","absolute"),t.css("left",e[0].offsetLeft+"px"),t.css("position",e[0].offsetBottom+"px"),e.parent().append(t),this.element=t,window.setTimeout((()=>{this.activateListeners(t)}),10)}activateListeners(e){e.find(".item").click(this._onClickItem.bind(this)),this._cancelCallback=this._onCancel.bind(this),document.addEventListener("click",this._cancelCallback)}_onCancel(e){e.preventDefault();let t=e.target;if(t!==this.element[0]){for(;t.parentNode;){if(t===this.element[0])return;t=t.parentNode}this.cancel()}}_onClickItem(e){e.preventDefault();const t=e.currentTarget;this.callback($(t).attr("value"))}cancel(){document.removeEventListener("click",this._cancelCallback),this.element.remove()}}class LevelUpForm extends FormApplication{actor;token;simulacra;mold;config={health:{manual:null,type:null,value:0},fcb:{choice:"none",unavailable:!1,available:!0},visibility:null,feats:0,abilityScore:{new:0,used:0,get available(){return this.new-this.used}}};static ICONS={fcb:{none:"",hp:"systems/pf1/icons/skills/green_19.jpg",skill:"systems/pf1/icons/items/inventory/dice.jpg",alt:"systems/pf1/icons/skills/affliction_22.jpg"},health:{auto:"",manual:"systems/pf1/icons/skills/green_19.jpg",roll:"systems/pf1/icons/items/inventory/dice.jpg"}};useBackgroundSkills=game.settings.get("pf1","allowBackgroundSkills");constructor(e,t=null,s={}){if(super(t,s),"class"!==t?.type)throw Error("Can not level-up non-class items.");if(this.actor=e??t?.actor??s.actor,!this.actor)throw Error("LevelUpForm needs an actor");this.token=this.actor?.token??s.token,delete this.options.actor,delete this.options.token,this.config.isMythic="mythic"===t.subType,this.config.level={old:t.system.level,new:t.system.level+1,levelUp:t.system.level>0,hd:{old:this.actor.system.attributes.hd.total,new:null}};const a=this.config;this.config.abilityScore.upgrades=Object.fromEntries(Object.entries(pf1.config.abilities).map((([e,t])=>[e,{...this.actor.system.abilities[e],key:e,label:t,added:0,bonus:0,get isEnhanced(){return this.total!==this.base},get isNull(){return null===this.base},get isValid(){return!this.isNull},get isAvailable(){return this.isValid&&a.abilityScore.available>0},get isModified(){return 0!=this.added}}]))),this.actor.hasPlayerOwner||(this.config.visibility=CONST.DICE_ROLL_MODES.PRIVATE),this._initData(),this._initChoices()}get item(){return this.object}set item(e){this.object=e}get id(){return`level-up-${this.actor.uuid.replaceAll(".","-")}-class-${this.item.system.tag||pf1.utils.createTag(this.item.name)}`}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["pf1","level-up"],template:"systems/pf1/templates/apps/level-up.hbs",scrollY:["section"],width:820,height:"auto",submitOnChange:!0,submitOnClose:!1,closeOnSubmit:!1,resizable:!0})}get title(){return this.isLevelUp?game.i18n.format("PF1.LevelUp.Increase",{class:this.item.name})+" – "+this.actor.name:game.i18n.format("PF1.LevelUp.Add",{class:this.item.name})+" – "+this.actor.name}get isLevelUp(){return this.item.system.level>0}get isNewClass(){return!this.isLevelUp}static async increaseLevel(e,t,{token:s}={}){const a=Object.values(e.apps).find((e=>e instanceof LevelUpForm&&e._element&&e.item===t));if(!a)return new Promise((a=>new this(e,t,{token:s,resolve:a}).render(!0,{focus:!0})));a.render(!0,{focus:!0})}static async addClassWizard(e,t,{token:s}={}){const a=new Item.implementation(t,{parent:e});return a.updateSource({system:{hp:0,level:0}}),a.reset(),new Promise((t=>new this(e,a,{token:s,resolve:t}).render(!0,{focus:!0})))}_prepareAssociations(){if(this.config.associations)return;const e=this.config.level.new,t=this.item.system.links?.classAssociations?.filter((t=>t.level===e))?.map((e=>({...fromUuidSync(e.uuid||""),uuid:e.uuid})))??[];this.config.associations=t}async getData(){const e=game.settings.get("pf1","healthConfig").getClassHD(this.item),t=this.item.toObject(),s=this.config.fcb;s.hp=t.system.fc?.hp?.value||0,s.skill=t.system.fc?.skill?.value||0,s.alt=t.system.fc?.alt?.value||0;const a={...this.config,item:t,document:this.item,actor:this.actor,config:pf1.config,labels:{fcb:{skill:"PF1.LevelUp.FC.Skill.Label",hp:"PF1.LevelUp.FC.HP.Label",none:"PF1.LevelUp.FC.None.Label",alt:"PF1.LevelUp.FC.Alt.Label"}},fcb:s,abilityScore:this.config.abilityScore,icons:this.constructor.ICONS,visibilityOptions:pf1.const.messageVisibility,useBackgroundSkills:this.useBackgroundSkills};game.user.isGM||delete a.visibilityOptions.selfroll,a.health.rate=Math.round(100*e.rate);const i=this.config.level.hd.total;switch(a.abilityScore.new=pf1.config.levelAbilityScores[i]??0,a.health.value=a.health.delta,a.health.type){case"manual":a.health.value+=a.health.raw;break;case"auto":case"roll":a.health.value=a.health.raw}switch(a.skills.delta.ranks=a.skills.delta.adv,a.health.bonus=0,a.fcb.choice){case"hp":a.health.value+=1,a.health.bonus+=1;break;case"skill":a.skills.delta.ranks+=1}return a.abilityScore.next=this._getNextAbilityScoreLandmark(),a.ready=this.isReady(),a}isReady(){return!!this.config.isMythic||!!this.config.health.type&&0==this.config.abilityScore.available}_getNextAbilityScoreLandmark(){if(this.config.isMythic)return null;const e=this.config.level.hd.total;if((pf1.config.levelAbilityScores[e]??0)>0)return null;return Object.entries(pf1.config.levelAbilityScores).map((([e,t])=>Number(e))).filter((t=>t>e))[0]??null}_getDefaultHealthOption(){return"mythic"===this.item.subType?"static":this.config.health.auto?"auto":this.config.health.maximized?"max":"roll"}_getDefaultHitPoints(){return Math.ceil(1+(this.item.system.hd-1)/2)}_prepareHealthData(){const e=game.settings.get("pf1","healthConfig"),t=e.getClassHD(this.item),{auto:s,rate:a}=t;this.config.health.auto=s,this.config.health.manual??=this._getDefaultHitPoints(),this.config.health.hitDie=this.item.system.hd||8;let i=0;if(this.config.isMythic)i=this.item.system.hd;else if(s){const t={up:Math.ceil,nearest:Math.round,down:Math.floor}[e.rounding],s=1+(this.item.system.hd-1)*a;if(e.continuous){const{new:e,old:a}=this.config.level.hd;i=e+t(e*s)-(a+t(a*s))}else i=t(s)}else i+=this.config.health.manual;this.config.health.delta=i;const n=this.simulacra.system.attributes?.hpAbility,o=this.simulacra.system.abilities[n]?.mod??0;this.config.health.ability={key:n,mod:o}}_initData(){this._prepareAssociations();const e=this.config;if(e.fcb.available=this.isFavouredClass(),e.fcb.unavailable=!e.fcb.available,!this.simulacra){const e=this.actor.toObject(),t=this.item.id??"MOLD000000000000";if(!this.item.id){const s=this.item.toObject();s._id=t,e.items.push(s)}this.simulacra=new Actor.implementation(e),this.mold=this.simulacra.items.get(t)}this.oldLevel??=this.getLevelData(e.level.old);const t=this.getLevelData(e.level.new);this.newLevel=t,e.level.hd={new:t.hd,old:this.oldLevel.hd,total:t.totalHD},e.level.feats=t.feats-this.oldLevel.feats;const s=this.actor.system.attributes?.savingThrows;if(s){const t=this.simulacra.system.attributes?.savingThrows;e.level.fort=t.fort.total-s.fort.total,e.level.ref=t.ref.total-s.ref.total,e.level.will=t.will.total-s.will.total}e.level.bab=this.simulacra.system.attributes?.bab?.total-this.actor.system.attributes?.bab?.total,e.health.raw=t.hp-this.oldLevel.hp,e.skills={new:t.skills,old:this.oldLevel.skills},e.skills.delta={adv:e.skills.new.value-e.skills.old.value,bg:e.skills.new.bg-e.skills.old.bg},e.level.skills=e.skills.delta.adv+e.skills.delta.bg,this._prepareHealthData()}getLevelData(e){const t=this.simulacra,s=this.mold;s.updateSource({"system.level":e}),t.reset();let a={};const i=null===t.system.abilities?.int?.value;let n=0,o=0;const r=i?0:t.system.abilities?.int?.mod??0;if(t.itemTypes.class.filter((e=>"mythic"!==e.subType)).forEach((e=>{const t=e.hitDice;if(0===t)return;const s=e.system.skillsPerLevel||0;if(s>0&&(n+=Math.max(1,s+r)*t),this.useBackgroundSkills&&pf1.config.backgroundSkillClasses.includes(e.subType)){const e=t*pf1.config.backgroundSkillsPerLevel;e>0&&(o+=e)}})),t.system.details?.bonusSkillRankFormula){a=t.getRollData();const e=Roll.defaultImplementation.safeRollSync(t.system.details.bonusSkillRankFormula,a);e.err&&console.error(`An error occurred in the Bonus Skill Rank formula of actor ${t.name}.`),n+=e.total||0}n+=t.system.details?.skills?.bonus||0;const l=t.getFeatCount().max;return{skills:{value:n,bg:o},feats:l,hd:s.hitDice,totalHD:t.system.attributes.hd.total,hp:t.system.attributes.hp.max,bab:s.system.babBase,fort:s.system.savingThrows?.fort?.base||0,ref:s.system.savingThrows?.ref?.base||0,will:s.system.savingThrows?.will?.base||0}}isFavouredClass(){return pf1.config.favoredClassTypes.includes(this.item.subType)}async _updateObject(e,t){const s=this.config.health.manual;return foundry.utils.mergeObject(this.config,foundry.utils.expandObject(t)),s!==this.config.health.manual&&(this._prepareHealthData(),this.config.health.type="manual"),this.render()}activateListeners(e){super.activateListeners(e),e.find(".ability-scores .ability-score .operator").on("click",this._onClickAbilityScoreOperator.bind(this)),e.find(".item-list .item").on("click",this._openItemSheet.bind(this)),e.find('button[data-action="commit"]').on("click",this._onCommit.bind(this)),e.find('button[data-action="skip"]').on("click",this._onSkip.bind(this))}async _openItemSheet(e){const t=e.currentTarget.dataset.itemUuid;(await fromUuid(t)).sheet.render(!0,{focus:!0})}_onClickAbilityScoreOperator(e){e.preventDefault();const t=e.currentTarget,s=t.dataset.operator,a=t.closest(".ability-score").dataset.key,i=this._adjustAbilityScore(a,s),n=this.config.abilityScore,o=n.upgrades[a];o.value+=i,o.added+=i,n.used+=i,this.simulacra.updateSource({system:{abilities:{[a]:{value:o.value}}}}),mergeObject(o,this.simulacra.system.abilities[a]),this._initData(),this.render()}_initChoices(){this._initFCBChoices(),this._initHPChoices()}_initFCBChoices(){if(!this.config.fcb.available)return;const{hp:e,skill:t,alt:s}=this.item.system.fc,a=[{id:"hp",value:e?.value||0},{id:"skill",value:t?.value||0},{id:"alt",value:s?.value||0}].sort(((e,t)=>t.value-e.value))[0];a.value>0&&(this.config.fcb.choice=a.id)}_initHPChoices(){this.config.health.type=this._getDefaultHealthOption();const e=game.settings.get("pf1","healthConfig");if(e.getClassHD(this.item).maximized){e.maximized;const t=this.actor.itemTypes.class.reduce(((t,s)=>e.getClassHD(this.item).maximized?t+s.hitDice:t),0),s=e.maximized-t;this.config.health.maximized=Math.max(0,s),s>0&&(this.config.health.delta=this.config.health.hitDie,this.config.health.type="max")}}_adjustAbilityScore(e,t=null){switch(t){case"add":return 1;default:return 0;case"subtract":return-1}}async close(e){return this.resolve?.(null),super.close(e)}_getHealthFormula(e){const t=this.item.system.hd;return"static"===e?""+t:"1d"+t}_spoofHealthRoll(e,t){const s=e.toJSON();return s.total=t,s.terms[0].results[0].result=t,Roll.defaultImplementation.fromData(s)}_getHealthRoll(e,t){const s=Roll.defaultImplementation.safeRollAsync(t);switch(e){case"auto":case"max":return this._spoofHealthRoll(s,this.config.health.delta);case"manual":return this._spoofHealthRoll(s,this.config.health.manual);default:return s}}async _onCommit(e){this._disableSheet();const t=this.config,s=this.item.toObject().system,a={},i=s.level+1,n={level:{previous:s.level,new:i},newFeatures:this.config.associations,hp:{}},o=this._getHealthFormula(t.health.type),r=this._getHealthRoll(t.health.type,o);n.hp={label:{manual:"PF1.LevelUp.Chat.Health.Manual",roll:"PF1.LevelUp.Chat.Health.Roll",max:"PF1.LevelUp.Chat.Health.Auto",auto:"PF1.LevelUp.Chat.Health.Auto",static:"PF1.LevelUp.Chat.Health.Static"}[t.health.type],roll:r,add:r.toAnchor().outerHTML};const l=r.total||0;if(a.hp=(s.hp||0)+l,t.fcb.choice in s.fc){const e=t.fcb.choice,i=s.fc?.[e]?.value??0;foundry.utils.setProperty(a,`fc.${e}.value`,i+1);const o={hp:"HP",skill:"Skill",alt:"Alt"}[e];n.fc={type:e,label:"PF1.FavouredClassBonus."+o}}const c=this.actor.getFeatCount(),u=[],p=[],m=this._updateAbilityScore();m&&(m.update?u.push(m.itemData):p.push(m.itemData),n.ability=Object.entries(this.config.abilityScore.upgrades).reduce(((e,[t,{added:s}])=>(0==s||(e[t]=s),e)),{})),a.level=i;let d=this.item;if(d.actor&&d.id?u.unshift({system:a,_id:d.id}):(d.updateSource({system:a}),p.unshift(d.toObject())),p.length&&await this.actor.createEmbeddedDocuments("Item",p,{render:0==u.length}),u.length){d=(await this.actor.updateEmbeddedDocuments("Item",u)).find((e=>"class"===e.type)),d&&(this.item=d)}const h={};n.extra=h;const g=this.actor.getFeatCount();g.new=Math.max(0,g.max-c.max),h.feats=g,h.enabled=g.new>0,await this.createChatMessage(n),this.resolve?.(d),this.close()}async _onSkip(e){e.preventDefault(),this._disableSheet();const t={system:{level:this.config.level.new}};let s=this.item;s.id&&s.actor===this.actor?await s.update(t):(s.updateSource(t),s=await Item.implementation.create(s.toObject(),{parent:this.actor})),s.sheet.render(!0,{focus:!0}),this.resolve?.(null),this.close()}_disableSheet(){const e=this.element[0].querySelector("form");e.style.cursor="progress",e.querySelectorAll("button,input,select").forEach((e=>{e.disabled=!0,e.style.cursor="progress"}))}_updateAbilityScore(){if(!this.config.abilityScore.upgrades)return;const e=Object.entries(this.config.abilityScore.upgrades).reduce(((e,[t,{added:s}])=>(0==s||(e[t]=s),e)),{});if(0===Object.keys(e).length)return;const t=this.actor.itemTypes.feat.find((e=>!0===e.getFlag("pf1","levelUp")));if(t){const s=foundry.utils.deepClone(t.toObject().system.changes??[]);for(const[t,a]of Object.entries(e)){const e=s.find((e=>e.target===t));if(e){const t=parseInt(e.formula);if(!Number.isNaN(t)){const s=t+a;e.formula=""+s;continue}}s.push(foundry.utils.mergeObject(pf1.components.ItemChange.defaultData,{subTarget:t,formula:""+a,modifier:"untypedPerm"}))}return{itemData:{"system.changes":s,_id:t.id},update:!0}}{let t=pf1.config.levelAbilityScoreFeature;return t=foundry.utils.mergeObject(t,{system:{changes:Object.entries(e).reduce(((e,[t,s])=>{const a=foundry.utils.mergeObject(pf1.components.ItemChange.defaultData,{subTarget:t,formula:""+s,modifier:"untypedPerm"});return e.push(a),e}),[])},flags:{pf1:{levelUp:!0}}},{inplace:!1}),{itemData:t,update:!1}}}async createChatMessage(e){const t={...e,config:pf1.config,item:this.item,actor:this.actor},s=e.hp?.roll?[e.hp.roll]:[],a={content:await renderTemplate("systems/pf1/templates/chat/level-up.hbs",t),type:CONST.CHAT_MESSAGE_TYPES.OOC,speaker:ChatMessage.getSpeaker({actor:this.actor,token:this.token}),rolls:s,flags:{pf1:{subject:{class:"levelUp"}}}};let i=this.config.visibility||game.settings.get("core","rollMode");return game.user.isGM||i!==CONST.DICE_ROLL_MODES.SELF||(i=CONST.DICE_ROLL_MODES.PRIVATE),ChatMessage.implementation.applyRollMode(a,i),ChatMessage.create(a,{rollMode:i})}}class CurrencyTransfer extends FormApplication{constructor(e={actor:null,container:null,amount:{},alt:!1},t={actor:null,container:null,amount:{},alt:!1},s={}){if(super(s),e.actor&&("string"==typeof e.actor&&(e.actor=game.actors.get(e.actor)),"npc"==e.actor.type&&(e.alt=!1)),e.container&&(e.alt=!1,"string"==typeof e.container&&(e.container=e.actor?e.actor.items.get(e.container):game.items.get(e.container))),t.actor&&("string"==typeof t.actor&&(t.actor=game.actors.get(t.actor)),"npc"==t.actor.type?t.alt=!1:t.actor!==e.actor||e.container||t.container||(t.alt=!e.alt)),t.container&&"string"==typeof t.container&&(t.container=t.actor?t.actor.items.get(t.container):game.items.get(t.container)),e.container)e.amount=foundry.utils.mergeObject(e.container.system.currency,e.amount??{});else if(e.actor)e.amount=foundry.utils.mergeObject(e.alt?e.actor.system.altCurrency:e.actor.system.currency,e.amount??{});else{if(!game.user.isGM)return void ui.notification.warning("Cannot use Infinite currency transfer as non-gm.");e.amount=foundry.utils.mergeObject({pp:"∞",gp:"∞",sp:"∞",cp:"∞"},e.amount??{})}(t.actor||t.container)&&(this.source=e,this.dest=t)}get title(){let e;return this.source.actor?(e=this.source.actor.name+" ",this.source.container&&(e+=`(${this.source.container.name}) `)):e=this.source.container?this.source.container.name+" ":"∞ ",e+="➤ ",this.source.actor==this.dest.actor&&(this.source.alt||this.dest.alt)?e+=this.dest.alt?game.i18n.localize("PF1.Currency.Weightless"):game.i18n.localize("PF1.Currency.Label"):this.dest.actor?(e+=this.dest.actor.name,this.dest.container&&(e+=` (${this.dest.container.name})`)):e+=this.dest.container.name,e}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["pf1","currency-transfer"],template:"systems/pf1/templates/apps/currency-transfer.hbs",width:380,height:235})}static get order(){return["pp","gp","sp","cp"]}activateListeners(e){e.find("button.cur-range").click(this._curRange.bind(this)),e.find("input").on("input",this._calcTotal.bind(this)),$(e.find("input")[0]).trigger("input")}_updateObject(e,t){this.dest.amount={pp:t.pp??0,gp:t.gp??0,sp:t.sp??0,cp:t.cp??0},this.constructor.transfer(this.source.container?this.source.container:this.source.actor,this.dest.container?this.dest.container:this.dest.actor,this.dest.amount,this.source.alt,this.dest.alt,2)}getData(e={}){return{source:this.source,dest:this.dest,options:this.options,title:this.title,total:"∞"===this.source.amount.gp?"∞":this.constructor.order.reduce(((e,t,s)=>e+this.source.amount[t]*10**(1-s)),0)}}_curRange(e){e.preventDefault();const t=e.target.closest("button"),s=t.closest(".form-fields"),a=t.classList.contains("down"),i=s.querySelector("input");i.value=a?"":s.querySelector("span").textContent,$(i).trigger("input")}_calcTotal(e){const t=e.target.closest(".currency-transfer"),s=Object.fromEntries([...t.querySelectorAll("input")].map((e=>[e.name,parseInt(e.value||0)]))),a=this.constructor.order.reduce(((e,t,a)=>e+s[t]*10**(1-a)),0);t.querySelector(".currency-total .form-fields label").textContent=Math.round(100*a)/100+" gp"}async close(...e){super.close(...e)}static _failed(e){ui.notifications.error(game.i18n.localize("PF1.Application.CurrencyTrancer.Failed")+game.i18n.localize(e))}static async _directoryDrop(e,t){t.preventDefault();const s=TextEditor.getDragEventData(t);if("Currency"!==s.type)return;const a=t.currentTarget.classList.contains("item")?game.items.get(e):game.actors.get(e),i=await fromUuid(s.actorUuid||"");return s.currency&&i?new CurrencyTransfer({actor:i,container:s.containerId,alt:s.alt},{actor:a?.actor??a,container:"container"===a.system.type?a.id:null,amount:Object.fromEntries([[s.currency,parseInt(s.amount)]])}).render(!0):void 0}static async transfer(e,t,s,a=!1,i=!1,n=!1){if(!e&&!game.user.isGM||!t||!s)return!1;if("object"!=typeof s&&(s={gp:parseInt(s)}),this.order.forEach((e=>s[e]=s[e]??0)),!Object.values(s).find((e=>e>0)))return this._failed("PF1.Application.CurrencyTransfer.Insufficient"),!1;let o=foundry.utils.deepClone(a?e?.system.altCurrency:e?.system.currency);const r=foundry.utils.deepClone(i?t.system.altCurrency:t.system.currency);if(!o&&!game.user.isGM||!r)return!1;const l=Object.assign(Object.fromEntries(this.order.map((e=>[e,1/0]))),o),c=this.order.reduce(((e,t,a)=>e+s[t]*10**(1-a)),0),u=this.order.reduce(((e,t,s)=>e+o[t]*10**(1-s)),0);return c>u?(this._failed("PF1.Application.CurrencyTransfer.Insufficient"),!1):(o&&this.order.some((e=>{const t=o[e]-s[e];if(t<0&&n)return s=this.convert(l,c,n),o=Object.fromEntries(this.order.map((e=>[e,l[e]-s[e]]))),!0;o[e]=t})),!(!s||Object.values(o).find((e=>e<0)))&&(e.isOwner&&t.isOwner?(this.order.forEach((e=>r[e]+=s[e])),e===t?e.update({"system.altCurrency":a?o:r,"system.currency":i?o:r}):(a?e.update({"system.altCurrency":o}):e.update({"system.currency":o}),i?t.update({"system.altCurrency":r}):t.update({"system.currency":r}),s)):game.users.find((e=>e.active&&e.isGM))?(game.socket.emit("system.pf1",{eventType:"currencyTransfer",data:{sourceActor:e.actor?.uuid??e.uuid,destActor:t.actor?.uuid??t.uuid,sourceContainer:"container"===e.type?e.id:"",destContainer:"container"===t.type?t.id:"",sourceAlt:a,destAlt:i,amount:s}}),s):(this._failed("PF1.Application.CurrencyTransfer.GMRequired"),!1)))}static convert(e,t){if(e=e?Object.assign({},e):Object.fromEntries(this.order.map((e=>[e,1/0]))),"number"!=typeof t&&(t=this.order.reduce(((e,s,a)=>e+t?.[s]*10**(1-a)))),!t)return!1;const s={};return!((t=this.order.reduce(((t,a,i)=>{const n=Math.min(e[a],Math.floor(t%1e4/10**(3-i))),o=n*10**(3-i);return s[a]=n,e[a]-=n,t-o}),100*t)/100)<0)&&s}}class ActorSheetPF extends ActorSheet{constructor(...e){super(...e),this._filters={sections:{},search:{}},this.searchCompositioning=!1,this.searchRefresh=!0,this.searchDelay=250,this.searchDelayEvent=null,this.effectiveSearch={},this._itemUpdates=[],this._hiddenElems={},this._skillsLocked=!0,this._expandedItems=[]}static get defaultOptions(){const e=super.defaultOptions;return{...e,classes:[...e.classes,"pf1","actor"],scrollY:[".combat-attacks",".item-groups-list",".skills-list",".traits",".actor-notes",".editor-content[data-edit='system.details.biography.value']"],dragDrop:[{dragSelector:"li.item[data-item-id]"},{dragSelector:".currency .denomination"},{dragSelector:".race-container.item[data-item-id]"},{dragSelector:"li.skill[data-skill]"},{dragSelector:"li.sub-skill[data-skill]"},{dragSelector:".saving-throw[data-savingthrow]"},{dragSelector:".attribute[data-attribute]"},{dragSelector:".attribute[data-attack]"},{dragSelector:"li.generic-defenses[data-drag]"},{dragSelector:".ability-scores .ability[data-ability]"},{dragSelector:".spellcasting-concentration[data-drag]"},{dragSelector:".spellcasting-cl"}],tabs:[{navSelector:"nav.tabs[data-group='primary']",contentSelector:"section.primary-body",initial:"summary",group:"primary"},{navSelector:"nav.tabs[data-group='skillset']",contentSelector:"section.skillset-body",initial:"adventure",group:"skills"},{navSelector:"nav.tabs[data-group='spellbooks']",contentSelector:"section.spellbooks-body",initial:"primary",group:"spellbooks"}]}}get currentPrimaryTab(){return this._tabs.find((e=>"primary"===e.group))?.active||null}get currentSpellbookKey(){return this._tabs.find((e=>"spellbooks"===e.group))?.active||"primary"}async getData(){const e=this.document.isOwner,t="metric"===pf1.utils.getDistanceSystem(),s={actor:this.actor,document:this.actor,effects:this.actor.effects,options:this.options,owner:e,itemTypes:this.actor.itemTypes,limited:this.document.limited,editable:this.isEditable,cssClass:e?"editable":"locked",isCharacter:"character"===this.document.type,hasHD:!0,config:pf1.config,isGM:game.user.isGM,race:null!=this.document.race?this.document.race.toObject():null,usesAnySpellbook:Object.values(this.actor.system.attributes.spells.spellbooks).some((e=>e.inUse)),sourceData:{},skillsLocked:this._skillsLocked,units:{weight:"metric"===pf1.utils.getWeightSystem()?game.i18n.localize("PF1.Kgs"):game.i18n.localize("PF1.Lbs"),distance:{tactical:t?pf1.config.measureUnitsShort.m:pf1.config.measureUnitsShort.ft,overland:t?pf1.config.measureUnitsShort.km:pf1.config.measureUnitsShort.mi}},unchainedActions:game.settings.get("pf1","unchainedActionEconomy")};Object.values(s.itemTypes).forEach((e=>e.sort(((e,t)=>(e.sort??0)-(t.sort??0)))));const a=this.document.getRollData();if(s.rollData=a,s.system=foundry.utils.deepClone(this.document.system),s.inCharacterGeneration=this.inCharacterGeneration,s.hasProficiencies=s.isCharacter||game.settings.get("pf1","npcProficiencies"),!s.unchainedActions){const e=s.rollData.attributes?.bab?.total;if(e>0){const t=1+RollPF.safeRollSync(pf1.config.iterativeExtraAttacks,{bab:e}).total||0,a=Array.fromRange(t).map((t=>e+RollPF.safeRollSync(pf1.config.iterativeAttackModifier,{attackCount:t}).total));s.iteratives="+"+a.join(" / +")}}s.hasCurrency=Object.values(this.object.system.currency).some((e=>e>0)),s.hasAltCurrency=Object.values(this.object.system.altCurrency).some((e=>e>0));const i={secrets:e,rollData:s.rollData,async:!0,relativeTo:this.actor},n=s.system.details?.biography?.value,o=n?enrichHTMLUnrolledAsync(n,i):Promise.resolve();o.then((e=>s.biographyHTML=e));const r=s.system.details?.notes?.value,l=r?enrichHTMLUnrolledAsync(r,i):Promise.resolve();l.then((e=>s.notesHTML=e)),await Promise.all([o,l]),s.token=this.token,s.items=this.document.items.map((e=>this._prepareItem(e))),s.items.sort(((e,t)=>(e.sort||0)-(t.sort||0))),s.labels=this.document.getLabels(),s.filters=this._filters;{const e=s.system.attributes,t=s.system.abilities,a=pf1.config.sizeMods[s.system.traits.size],i=e.attack.shared+e.attack.general+a,n=t[e.attack.meleeAbility]?.mod??0,o=t[e.attack.rangedAbility]?.mod??0;s.genericAttacks={melee:{ability:e.attack.meleeAbility,abilityMod:n,modifier:i+e.attack.melee+n},ranged:{ability:e.attack.rangedAbility,abilityMod:o,modifier:i+e.attack.ranged+o}}}{const e=this.calculateTotalItemValue({inLowestDenomination:!0}),t=pf1.utils.currency.split(e);s.labels.totalValue=game.i18n.format("PF1.TotalItemValue",{gp:t.gp,sp:t.sp,cp:t.cp})}for(const[e,t]of Object.entries(s.system.abilities))t.label=pf1.config.abilities[e],t.totalLabel=null==t.total?"-":t.total;for(const[e,t]of Object.entries(s.system.attributes.ac))t.label=pf1.config.ac[e];for(const[e,t]of Object.entries(s.system.attributes.savingThrows))t.label=pf1.config.savingThrows[e];for(const[e,t]of Object.entries(s.system.skills??{}))if(t.key=e,t.path=e,t.skillId=e,t.label=pf1.config.skills[e]||t.name,t.arbitrary=pf1.config.arbitrarySkills.includes(e),t.compendiumEntry=pf1.config.skillCompendiumEntries[e]||t.journal||null,t.untrained=!0===t.rt&&!(t.rank>0),null!=t.subSkills)for(const[s,a]of Object.entries(t.subSkills))a.key=`${e}.${s}`,a.path=`${e}.subSkills.${s}`,a.skillId=e,a.subSkillId=s,a.label||=a.name,a.compendiumEntry=a.journal||null,a.untrained=!0===a.rt&&!(a.rank>0),a.custom=!0;{const e=this.actor.getFeatCount();e.bonus=e.formula+e.changes,e.issues=0,(e.missing>0||e.excess)&&(e.issues+=1),e.disabled>0&&(e.issues+=1),s.featCount=e}this._prepareTraits(s.system.traits),s.labels.senses=this._prepareSenseLabels(),s.dr=this.document.parseResistances("dr"),s.eres=this.document.parseResistances("eres"),this._prepareItems(s),s.encumbrance=this._computeEncumbrance(),this._prepareSkillsets(s),this._prepareSkills(s,a);{const e={character:"pc",npc:"npc"}[this.document.type];s.healthConfig=game.settings.get("pf1","healthConfig"),s.useWoundsAndVigor=s.healthConfig.variants[e].useWoundsAndVigor}this._prepareHiddenElements(),s.hiddenElems=this._hiddenElems,game.user.isGM&&(s.magicItems={identified:[],unidentified:[]},this.document.items.filter((e=>{if(!e.isPhysical)return!1;if(!e.system.carried)return!1;if(0===e.system.quantity)return!1;const t=e.system.aura?.school,s=e.system.cl;return t?.length>0&&s>0})).forEach((e=>{const t={name:e.name,unidentifiedName:e.system.unidentified?.name,img:e.img,id:e.id,cl:e.system.cl,aura:{strength:CONFIG.PF1.auraStrengths[e.auraStrength],school:CONFIG.PF1.spellSchools[e.system.aura?.school]||e.system.aura?.school},identifyDC:15+e.system.cl,identified:!0===e.system.identified,quantity:e.system.quantity||0};t.identified?s.magicItems.identified.push(t):s.magicItems.unidentified.push(t)}))),0===this.actor.itemTypes.class.length&&(s.labels.firstClass=game.i18n.format("PF1.Info_FirstClass",{html:`<a data-action="browse" data-category="classes" data-tooltip="PF1.BrowseClasses">${game.i18n.localize("PF1.Info_FirstClass_Compendium")}</a>`}).replace(/\n+/,"<br>"));const c=this.actor.system.conditions,u=this.actor.appliedEffects.filter((e=>e.parent instanceof Item&&e.statuses.size));return s.conditions=pf1.registry.conditions.map((e=>({id:e.id,img:e.texture,active:c[e.id]??!1,items:new Set(u.filter((t=>t.statuses.has(e.id))).map((e=>e.parent))),get inherited(){return this.items.size>0},label:e.name,compendium:e.journal}))),s}_prepareItem(e){const t=e.type,s=e.subType,a=foundry.utils.deepClone(e.system);a.document=e,a.type=t,a.id=e.id,a.img=e.img,a.isActive=e.isActive,a.isPhysical=e.isPhysical??!1,a.isSingleUse=e.isSingleUse,a.isCharged=e.isCharged,a.hasResource=a.isCharged&&!a.isSingleUse,a.hasUses=a.uses?.max>0;const i=e.defaultAction,n=i?.getRollData()??e.getRollData();if(a.labels=e.getLabels({actionId:i?.id,rollData:n}),a.hasAction=e.hasAction||e.getScriptCalls("use").length>0,i&&(a.hasAttack=i.hasAttack,a.hasMultiAttack=i.hasMultiAttack,a.hasDamage=i.hasDamage,a.hasRange=i.hasRange,a.hasEffect=i.hasEffect,this._canShowRange(e)&&(a.range=foundry.utils.mergeObject(i?.data?.range??{},{min:i?.getRange({type:"min",rollData:n}),max:i?.getRange({type:"max",rollData:n})},{inplace:!1})),a.hasAttack)){const e=i.getAttacks({full:!0,resolve:!0,conditionals:!0,bonuses:!0,rollData:n}).map((e=>e.bonus));a.attackArray=e;const t=Math.max(...e);a.attackSummary=`${e.length} (${t<0?t:"+"+t}${e.length>1?"/…":""})`}return a.sort=e.sort,a.showUnidentifiedData=e.showUnidentifiedData,a.name=e.name,a.isPhysical&&(a.quantity||=0,a.isStack=a.quantity>1,a.destroyed=a.hp?.value<=0,a.isEmpty=0==a.quantity,a.isBroken=e.isBroken,a.disabled||=a.destroyed),a.empty=!1,a.isCharged&&a.isSingleUse,a.isPhysical&&a.quantity<=0&&(a.empty=!0),a.disabled=a.destroyed||!a.isActive&&!a.empty,a.isPhysical&&(!1===e.system.equipped||!1===e.system.implanted)&&(a.disabled=!1),a.typeLabel=game.i18n.localize(`PF1.Subtypes.Item.${t}.${s}.Single`),a}_canShowRange(e){return"attack"===e.type}get inCharacterGeneration(){return this.actor.system.attributes.hd.total<=1||Object.values(this.actor.system.abilities).every((e=>10===e.value))}_prepareHiddenElements(){const e=this.document.system.attributes?.spells?.spellbooks??{};for(const t of Object.keys(e)){const e="spellbook-info_"+t;null==this._hiddenElems[e]&&(this._hiddenElems[e]=!0)}}_prepareTraits(e){const t=pf1.registry.damageTypes.getLabels(),s={di:t,dv:t,ci:pf1.config.conditionTypes,languages:pf1.config.languages,armorProf:pf1.config.armorProficiencies,weaponProf:pf1.config.weaponProficiencies};for(const[t,a]of Object.entries(s)){const s=e[t];if(!s)continue;let i=[];["armorProf","weaponProf","languages"].includes(t)?i=s.total??s.value:s.value&&(i=s.value instanceof Array?s.value:[s.value]),s.selected=i.reduce(((e,t)=>(e[t]=a[t],e)),{});const n=s.customTotal?s.customTotal:s.custom;n?.length&&n.forEach(((e,t)=>s.selected["custom"+(t+1)]=e)),s.cssClass=foundry.utils.isEmpty(s.selected)?"inactive":""}}_prepareSenseLabels(){const e={},t=this.actor.system.traits.senses??{};for(const[s,a]of Object.entries(t))if(0!==a&&!1!==a)if("ll"===s&&t[s].enabled)e[s]=pf1.config.senses[s];else if("custom"===s)a.length&&a.split(pf1.config.re.traitSeparator).map((e=>e.trim())).filter((e=>e)).forEach(((t,s)=>e["custom"+(s+1)]=t));else if(!0===a)e[s]=pf1.config.senses[s];else if(a>0){const t=pf1.utils.convertDistance(a);e[s]=`${pf1.config.senses[s]} ${t[0]} ${t[1]}`}return e}_prepareSpellbook(e,t,s){this.isEditable;const a=this.document.system.attributes.spells.spellbooks[s],i=a.hasCantrips?0:1;let n=9;if(a.autoSpellLevelCalculation){const e=a.cl.autoSpellLevelTotal,t=pf1.config.casterProgression.castsPerDay[a.spellPreparationMode]?.[a.casterType]?.[e-1];n=void 0!==t?t.length-1:0}else"low"===a.casterType?n=4:"med"===a.casterType&&(n=6);const o=[];for(let t=0;t<10;t++){const i=a.spells?.["spell"+t];if(!i){console.error(`Bad data for spell level ${t} in spellbook "${s}" for actor "${this.actor.name}"`);continue}const n=!isNaN(i.max);o[t]={...pf1.config.sheetSections.spells.spell,id:"level-"+t,level:t,valid:n,usesSlots:!0,spontaneous:a.spontaneous,canPrepare:"character"===e.actor.type,label:pf1.config.spellLevels[t],items:[],uses:i.value||0,hasIssues:i.hasIssues,lowAbilityScore:i.lowAbilityScore,lowLevel:i.lowLevel,known:i.known,preparation:i.preparation,slots:i.slots,invalidSlots:i.invalidSlots,mismatchSlots:i.mismatchSlots,invalidKnown:i.invalidKnown,mismatchKnown:i.mismatchKnown,domain:i.domain,data:i,isSchool:a.isSchool}}t.forEach((e=>{const t=e.level??i;o[t]?.items.push(e)}));for(let e=0;e<10;e++)0===o[e]?.items.length&&(e>n||e<i)&&delete o[e];return o}_prepareSkillsets(e){const t=e.system.skills,s={all:{skills:{}},adventure:{skills:{}},background:{skills:{}}};Object.keys(t).sort((function(e,s){return t[e].custom&&!t[s].custom?1:!t[e].custom&&t[s].custom?-1:(""+t[e].label).localeCompare(t[s].label)})).forEach((e=>{const a=t[e];pf1.config.backgroundOnlySkills.includes(e)||(s.all.skills[e]=a),a.background?s.background.skills[e]=a:s.adventure.skills[e]=a})),e.skillsets=s}_prepareSkills(e,t){e.useBGSkills=game.settings.get("pf1","allowBackgroundSkills");const s=e.system.abilities,a=null===s?.int?.value,i=a?0:s?.int?.mod??0,n={allowed:0,used:0,bgAllowed:0,bgUsed:0,sentToBG:0};for(const t of Object.values(e.rollData.skills))if(null!=t.subSkills)for(const s of Object.values(t.subSkills))e.useBGSkills&&t.background?n.bgUsed+=s.rank:n.used+=s.rank;else e.useBGSkills&&t.background?n.bgUsed+=t.rank:n.used+=t.rank;this.document.itemTypes.class.filter((e=>"mythic"!==e.system.subType)).forEach((t=>{if(pf1.config.favoredClassTypes.includes(t.subType)&&(n.allowed+=t.system.fc?.skill?.value||0),a)return;const s=t.hitDice;if(0===s)return;const o=t.system.skillsPerLevel||0;if(n.allowed+=Math.max(1,o+i)*s,e.useBGSkills&&pf1.config.backgroundSkillClasses.includes(t.subType)){const e=s*pf1.config.backgroundSkillsPerLevel;e>0&&(n.bgAllowed+=e)}})),n.allowed+=this.actor.system.details?.skills?.bonus||0,e.useBGSkills&&n.bgUsed>n.bgAllowed&&(n.sentToBG=n.bgUsed-n.bgAllowed,n.allowed-=n.sentToBG,n.bgAllowed+=n.sentToBG),e.skillRanks=n}_computeEncumbrance(){const e=this.actor.system,t=e.attributes.encumbrance.carriedWeight,s=e.attributes.encumbrance.levels.light,a=e.attributes.encumbrance.levels.medium,i=e.attributes.encumbrance.levels.heavy,n="metric"===pf1.utils.getWeightSystem()?game.i18n.format("PF1.CarryLabelKg",{kg:t}):game.i18n.format("PF1.CarryLabel",{lbs:t});return{pct:{light:Math.clamped(100*t/s,0,99.5),medium:Math.clamped(100*(t-s)/(a-s),0,99.5),heavy:Math.clamped(100*(t-a)/(i-a),0,99.5)},encumbered:{light:e.attributes.encumbrance.level>=pf1.config.encumbranceLevels.medium,medium:e.attributes.encumbrance.level>=pf1.config.encumbranceLevels.heavy,heavy:e.attributes.encumbrance.carriedWeight>=e.attributes.encumbrance.levels.heavy},light:e.attributes.encumbrance.levels.light,medium:e.attributes.encumbrance.levels.medium,heavy:e.attributes.encumbrance.levels.heavy,aboveHead:e.attributes.encumbrance.levels.heavy,offGround:2*e.attributes.encumbrance.levels.heavy,dragPush:5*e.attributes.encumbrance.levels.heavy,value:e.attributes.encumbrance.carriedWeight,carryLabel:n}}activateListeners(e){super.activateListeners(e),e[0].addEventListener("pointermove",(e=>this._moveTooltips(e)),{passive:!0});const t=e.find(".filter-list");t.each(this._initializeFilterItemList.bind(this)),t.on("click",".filter-item",this._onToggleFilter.bind(this));{const t=e.find(".search-input");t.on("keyup change",this._searchFilterChange.bind(this)),t.on("compositionstart compositionend",this._searchFilterCompositioning.bind(this)),this.searchRefresh=!0,t.each((function(){this.value.length>0&&$(this).change()})),e.find(".clear-search").on("click",this._clearSearch.bind(this))}e.find(".item .item-name").click((e=>this._onItemSummary(e))),e.find(".item-edit").on("click",this._onItemEdit.bind(this)),e.find(".item .item-name").contextmenu(this._onItemEdit.bind(this)),e.find(".quick-actions li").contextmenu(this._onItemEdit.bind(this)),e.find(".race.item").contextmenu(this._onItemEdit.bind(this)),e.find("a.hide-show").click(this._hideShowElement.bind(this)),e.find("a.compendium-entry").click(this._onOpenCompendiumEntry.bind(this)),e.find('a[data-action="browse"]').click(this._onOpenCompendiumBrowser.bind(this)),this.isEditable?(e.find("span.text-box.direct").on("click",(e=>{this._onSpanTextInput(e,this._adjustActorPropertyBySpan.bind(this))})),e.find('*[data-action="input-text"]').click((e=>this._onInputText(e))),e.find('*[data-action="input-text"].wheel-change').on("wheel",(e=>this._onInputText(e.originalEvent))),e.find(".select-on-click").click(this._selectOnClick.bind(this)),e.find(".ability-name").click(this._onRollAbilityTest.bind(this)),e.find(".attribute.bab .rollable").click(this._onRollBAB.bind(this)),e.find(".attribute.attack .rollable").click(this._onRollAttack.bind(this)),e.find(".attribute.initiative .rollable").click(this._onRollInitiative.bind(this)),e.find(".saving-throw .rollable").click(this._onRollSavingThrow.bind(this)),e.find("span.text-box.skill-rank").on("click",(e=>{this._onSpanTextInput(e,this._adjustActorPropertyBySpan.bind(this))})),e.find(".skills .skill.arbitrary .skill-create").click((e=>this._onArbitrarySkillCreate(e))),e.find(".skills .controls > .skill-create").click((e=>this._onSkillCreate(e))),e.find(".skills .skill > .controls > .skill-edit").on("click",(e=>this._onSkillEdit(e))),e.find(".skills .skill > .controls > .skill-delete").click((e=>this._onSkillDelete(e))),e.find(".item-actions a.item-action").click(this._itemActivationControl.bind(this)),e.find(".tab.skills .skill > .action.roll").click(this._onRollSkillCheck.bind(this)),e.find(".trait-selector").click(this._onTraitSelector.bind(this)),e.find(".resistance-selector").click(this._onResistanceSelector.bind(this)),e.find(".generic-defenses .rollable").click((e=>{this.document.displayDefenseCard({token:this.token})})),e.find(".rest").click(this._onRest.bind(this)),e.find("button.pointbuy-calculator").click(this._onPointBuyCalculator.bind(this)),e.find(".control.alignment").click(this._onControlAlignment.bind(this)),e.find(".senses-selector").on("click",this._onSensesSelector.bind(this)),e.find(".item-create").on("click",(e=>this._onItemCreate(e))),e.find(".item-delete").on("click",this._onItemDelete.bind(this)),e.find(".item-give").on("click",this._onItemGive.bind(this)),e.find(".item-split:not(.disabled)").on("click",this._onItemSplit.bind(this)),e.find(".item .item-image").click((e=>this._onItemRoll(e))),e.find("a.item-control.item-quantity-add").click((e=>{this._quickChangeItemQuantity(e,1)})),e.find("a.item-control.item-quantity-subtract").click((e=>{this._quickChangeItemQuantity(e,-1)})),e.find("a.item-control.item-equip").click((e=>{this._quickEquipItem(e)})),e.find("a.item-control.item-carry").click((e=>{this._quickCarryItem(e)})),e.find("a.item-control.item-identify").click((e=>{this._quickIdentifyItem(e)})),e.find("a.item-control.item-toggle-prepared").click(this._itemPreparedToggle.bind(this)),e.find("a.item-control.item-duplicate").click(this._duplicateItem.bind(this)),e.find(".quick-actions li").click(this._quickAction.bind(this)),e.find("a.convert-currency").click(this._convertCurrency.bind(this)),e.find(".inventory-body .item-uses span.text-box.value").on("wheel",this._setFeatUses.bind(this)).on("click",(e=>{this._onSpanTextInput(e,this._setFeatUses.bind(this))})),e.find(".attacks-body .item-uses span.text-box.value").on("wheel",this._setFeatUses.bind(this)).on("click",(e=>{this._onSpanTextInput(e,this._setFeatUses.bind(this))})),e[0].querySelectorAll(".item-list .item[data-item-id] .item-detail.item-weight").forEach((e=>{e.addEventListener("pointerenter",(e=>{const t=e.currentTarget,s=this.actor.items.get(t.closest("[data-item-id]").dataset.itemId),a=s?.system.weight?.converted;if(a&&a.total>0){const e=[],i=s.system.quantity||0;e.push(game.i18n.format("PF1.StackDetails.Base",{value:a.value})),i>1&&e.push(game.i18n.format("PF1.StackDetails.Stack",{value:Math.floor(100*a.value*i)/100})),a.contents>0&&(e.push(game.i18n.format("PF1.StackDetails.Contents",{value:a.contents})),e.push(game.i18n.format("PF1.StackDetails.Total",{value:a.total}))),game.tooltip.activate(t,{text:e.join("<br>"),direction:TooltipManager.TOOLTIP_DIRECTIONS.LEFT,cssClass:"pf1"})}}),{passive:!0}),e.addEventListener("pointerleave",(()=>game.tooltip.deactivate()),{passive:!0})})),e.find(".feats-body .item-uses span.text-box.value").on("wheel",this._setFeatUses.bind(this)).on("click",(e=>{this._onSpanTextInput(e,this._setFeatUses.bind(this))})),e.find(".level-up").click(this._onLevelUp.bind(this)),e.find(".item-list .spell-uses span.text-box[data-type='amount']").on("wheel",this._setSpellUses.bind(this)).on("click",(e=>{this._onSpanTextInput(e,this._setSpellUses.bind(this))})),e.find(".item-list .spell-uses span.text-box[data-type='max']").on("wheel",this._setMaxSpellUses.bind(this)).on("click",(e=>{this._onSpanTextInput(e,this._setMaxSpellUses.bind(this))})),e.find(".spell-uses .spell-slots.spontaneous span.text-box").on("wheel",this._adjustActorPropertyBySpan.bind(this)).on("click",(e=>{this._onSpanTextInput(e,this._adjustActorPropertyBySpan.bind(this))})),e.find(".spell-uses .spell-max span.text-box").on("click",(e=>{this._onSpanTextInput(e,this._adjustActorPropertyBySpan.bind(this))})),e.find(".spell-points-current .value span.text-box").on("wheel",this._adjustActorPropertyBySpan.bind(this)).on("click",(e=>{this._onSpanTextInput(e,this._adjustActorPropertyBySpan.bind(this))})),e.find(".spellcasting-concentration.rollable").click(this._onRollConcentration.bind(this)),e.find(".spellcasting-cl.rollable").click(this._onRollCL.bind(this)),e.find(".item-detail.item-active input[type='checkbox']").off("change").on("change",this._setItemActive.bind(this)),e.find(".item-detail.item-level span.text-box").on("wheel",this._setBuffLevel.bind(this)).on("click",(e=>{this._onSpanTextInput(e,this._setBuffLevel.bind(this))})),e.find(".condition .checkbox").click(this._onToggleCondition.bind(this)),e.find(".condition .checkbox").on("contextmenu",this._onEditCondition.bind(this)),e.find(".skill-lock-button").on("click",this._onToggleSkillLock.bind(this)),e.on("pointerover","[data-tooltip-extended]",this._activateExtendedTooltip.bind(this)).on("pointerleave","[data-tooltip-extended]",(()=>game.tooltip.deactivate()))):e.find("span.text-box").addClass("readonly")}async _activateExtendedTooltip(e){const t=e.currentTarget,s=t.dataset.tooltipExtended;if(!s)return;const a={actor:this.actor,bonusTypes:pf1.config.bonusTypes,config:pf1.config};if(this._getTooltipContext(s,a),a.sources=a.sources?.filter((e=>e.sources?.length>0)),!(a.header||a?.paths?.length>0||a?.sources?.length>0||a?.details?.length>0||a?.notes?.length>0))return;for(const e of a.sources)e.sources=e.sources.map((e=>({...e,type:e.type||pf1.config.bonusTypes[e.modifier||"untyped"]||e.modifier})));const i=document.createElement("template");i.innerHTML=renderCachedTemplate("systems/pf1/templates/extended-tooltip.hbs",a),Hooks.callAll("renderPF1ExtendedTooltip",this,s,i),game.tooltip.activate(t,{content:i.content,cssClass:"pf1 extended",direction:t.dataset.tooltipDirection||void 0})}_getTooltipContext(e,t){const s=this.actor,a=s.system,i={get rollData(){return this._rollData??=s.getRollData(),this._rollData}},getSource=e=>this.actor.sourceDetails[e],getNotes=(e,t=!0)=>{const a=s.getContextNotes(e,t);return s.formatContextNotes(a,i.rollData,{roll:!1})},damageTypes2=e=>[...e.values?.map((e=>pf1.registry.damageTypes.get(e)?.name||e))??[],...e.custom?.split(";").map((e=>e?.trim())).filter((e=>!!e))??[]].flat();let n,o;const r=[],l=[],c=[];let u;const p=/^(?<id>[\w-]+)(?:\.(?<detail>.*))?$/.exec(e),{id:m,detail:d}=p?.groups??{};switch(m){case"level":l.push({path:"@attributes.hd.total",value:a.attributes?.hd?.total}),a.details?.mythicTier>0&&l.push({path:"@details.mythicTier",value:a.details.mythicTier});break;case"hit-points":l.push({path:"@attributes.hp.value",value:a.attributes.hp.value},{path:"@attributes.hp.max",value:a.attributes.hp.max},{path:"@attributes.hp.temp",value:a.attributes.hp.temp},{path:"@attributes.hp.nonlethal",value:a.attributes.hp.nonlethal}),c.push({sources:getSource("system.attributes.hp.max")});break;case"vigor":l.push({path:"@attributes.vigor.value",value:a.attributes.vigor.value},{path:"@attributes.vigor.temp",value:a.attributes.vigor.temp},{path:"@attributes.vigor.max",value:a.attributes.vigor.max}),c.push({sources:getSource("system.attributes.vigor.max")});break;case"wounds":l.push({path:"@attributes.wounds.value",value:a.attributes.wounds.value},{path:"@attributes.wounds.max",value:a.attributes.wounds.max},{path:"@attributes.wounds.threshold",value:a.attributes.wounds.threshold}),c.push({sources:getSource("system.attributes.wounds.max")});break;case"speed":{const e=d;c.push({sources:getSource(`system.attributes.speed.${e}.base`)},{sources:getSource(`system.attributes.speed.${e}.total`)});const t=a.attributes.speed[e],[s]=pf1.utils.convertDistance(t.total),[i]=pf1.utils.convertDistance(t.base),[n]=pf1.utils.convertDistance(t.unhindered),o="metric"===pf1.utils.getDistanceSystem(),r=o?pf1.config.measureUnitsShort.m:pf1.config.measureUnitsShort.ft;if(l.push({path:`@attributes.speed.${e}.total`,value:s,unit:r},{path:`@attributes.speed.${e}.base`,value:i,unit:r},{path:`@attributes.speed.${e}.unhindered`,value:n,unit:r}),s>0){const[s]=pf1.utils.convertDistance(t.overland),a=o?pf1.config.measureUnitsShort.km:pf1.config.measureUnitsShort.mi;l.push({path:`@attributes.speed.${e}.overland`,value:s,unit:a})}break}case"flyManeuverability":l.push({path:"@attributes.speed.fly.maneuverability",value:a.attributes.speed.fly.maneuverability});break;case"ac":{const e=a.attributes.ac[d];l.push({path:`@attributes.ac.${d}.total`,value:e?.total},{path:"@armor.type",value:i.rollData.armor?.type},{path:"@shield.type",value:i.rollData.shield?.type}),c.push({sources:getSource(`system.attributes.ac.${d}.total`)}),u=getNotes("misc.ac");break}case"cmd":l.push({path:"@attributes.cmd."+d,value:a.attributes.cmd[d]}),c.push({sources:getSource("system.attributes.cmd."+d)}),u=getNotes("misc.cmd");break;case"save":l.push({path:`@attributes.savingThrows.${d}.total`,value:a.attributes.savingThrows[d]?.total}),c.push({sources:getSource(`system.attributes.savingThrows.${d}.total`)}),u=getNotes("savingThrow."+d);break;case"sr":l.push({path:"@attributes.sr.total",value:a.attributes.sr.total}),c.push({sources:getSource("system.attributes.sr.total"),untyped:!0}),u=getNotes("misc.sr");break;case"bab":l.push({path:"@attributes.bab.total",value:a.attributes.bab.total}),c.push({sources:getSource("system.attributes.bab.total"),untyped:!0});break;case"cmb":l.push({path:"@attributes.cmb.total",value:a.attributes.cmb.total}),"med"!==a.traits.size&&c.push({sources:[{name:game.i18n.localize("PF1.Size"),value:pf1.config.sizeSpecialMods[a.traits.size]}]}),c.push({sources:getSource("system.attributes.attack.shared")}),a.attributes.cmbAbility&&c.push({sources:[{name:pf1.config.abilities[a.attributes.cmbAbility],value:a.abilities[a.attributes.cmbAbility]?.mod}]}),c.push({sources:getSource("system.attributes.attack.general")},{sources:getSource("system.attributes.cmb.bonus")}),u=[...getNotes("attacks.attack"),...getNotes("attacks.melee"),...getNotes("misc.cmb")];break;case"init":l.push({path:"@attributes.init.total",value:a.attributes.init.total}),c.push({sources:getSource("system.attributes.init.total")}),u=getNotes("misc.init");break;case"abilityScore":{const e=d,t=a.abilities[d]??{};l.push({path:`@abilities.${e}.total`,value:t.total,sign:!1},{path:`@abilities.${e}.value`,value:t.value,sign:!1},{path:`@abilities.${e}.mod`,value:t.mod},{path:`@abilities.${e}.damage`,value:t.damage,sign:!1},{path:`@abilities.${e}.drain`,value:t.drain,sign:!1},{path:`@abilities.${e}.undrained`,value:t.undrained,sign:!1},{path:`@abilities.${e}.penalty`,value:t.penalty,sign:!1},{path:`@abilities.${e}.base`,value:t.base,sign:!1},{path:`@abilities.${e}.baseMod`,value:t.baseMod}),c.push({sources:getSource(`system.abilities.${e}.total`)},{sources:getSource(`system.abilities.${e}.penalty`)},{label:game.i18n.localize("PF1.ModifierOnly"),sources:getSource(`system.abilities.${e}.mod`)},{label:game.i18n.localize("PF1.CheckOnly"),sources:getSource(`system.abilities.${e}.checkMod`)}),u=getNotes("abilityChecks."+e);break}case"acp":l.push({path:"@attributes.acp.total",value:a.attributes.acp.total},{path:"@attributes.acp.skill",value:a.attributes.acp.skill},{path:"@attributes.acp.encumbrance",value:a.attributes.acp.encumbrance},{path:"@attributes.acp.gear",value:a.attributes.acp.gear}),c.push({sources:getSource("system.attributes.acp.total"),untyped:!0},{label:game.i18n.localize("PF1.EquipSlots.armor"),sources:getSource("system.attributes.acp.armorBonus"),untyped:!0},{label:game.i18n.localize("PF1.EquipSlots.shield"),sources:getSource("system.attributes.acp.shieldBonus"),untyped:!0});break;case"max-dex":l.push({path:"@attributes.maxDexBonus",value:a.attributes.maxDexBonus}),c.push({sources:getSource("system.attributes.maxDexBonus"),untyped:!0},{label:game.i18n.localize("PF1.EquipSlots.armor"),sources:getSource("system.attributes.mDex.armorBonus"),untyped:!0},{label:game.i18n.localize("PF1.EquipSlots.shield"),sources:getSource("system.attributes.mDex.shieldBonus"),untyped:!0});break;case"asf":{const e=[];this.actor.itemTypes.equipment.filter((e=>e.isActive)).reduce(((t,s)=>{const a=s.system.spellFailure||0;return a>0&&e.push({name:s.name,value:a+"%"}),t+a}),0),e.length&&c.push({sources:e,untyped:!0});break}case"implants":{const e=this.actor.itemTypes.implant.filter((e=>"cybertech"===e.subType&&e.system.implanted));l.push({path:"@abilities.int.total",value:i.rollData.abilities.int.total},{path:"@abilities.con.total",value:i.rollData.abilities.con.total}),c.push({untyped:!0,sources:e.map((e=>({name:e.name,value:e.system.implant})))});break}case"size":l.push({path:"@traits.size",value:a.traits.size},{path:"@size",value:i.rollData.size});break;case"stature":l.push({path:"@traits.stature",value:a.traits.stature});break;case"aura":l.push({path:"@traits.aura.custom",empty:!0});break;case"fastHeal":l.push({path:"@traits.fastHealing",empty:!0});break;case"regen":l.push({path:"@traits.regen",empty:!0});break;case"conditionResistance":l.push({path:"@traits.cres",empty:!0});break;case"conditionImmunity":l.push({path:"@traits.ci.value",empty:!0},{path:"@traits.ci.custom",empty:!0});break;case"energyResistance":l.push({path:"@traits.eres.total",empty:!0});break;case"damageReduction":l.push({path:"@traits.dr.total",empty:!0});break;case"damageImmunity":l.push({path:"@traits.di.value",empty:!0},{path:"@traits.di.custom",empty:!0});break;case"damageVulnerability":l.push({path:"@traits.dv.value",empty:!0},{path:"@traits.dv.custom",empty:!0});break;case"proficiency":switch(d){case"language":l.push({path:"@traits.languages.total",empty:!0}),c.push({sources:getSource("system.traits.languages"),left:!0,untyped:!0});break;case"weapon":l.push({path:"@traits.weaponProf.total",empty:!0}),c.push({sources:getSource("system.traits.weaponProf"),left:!0,untyped:!0});break;case"armor":l.push({path:"@traits.armorProf.total",empty:!0}),c.push({sources:getSource("system.traits.armorProf"),left:!0,untyped:!0})}break;case"quadruped":{l.push({path:"@attributes.quadruped",value:a.attributes.quadruped+""});const e=this.actor.race;e&&c.push({untyped:!0,sources:[{name:e.name,value:e.system.quadruped??!1,isBoolean:!0}]});break}case"negativeLevels":l.push({path:"@attributes.energyDrain",value:a.attributes.energyDrain,signed:!1});break;case"item":{const[t,s]=d.split("."),a=this.actor.items.get(t);if(!a)return;switch(s){case"level":l.push({path:`@classes.${a.system.tag}.level`,value:a.system.level});break;case"resources":a.isCharged&&a.system.uses?.max>0&&l.push({path:`@resources.${a.system.tag}.value`,value:a.system.uses?.value},{path:`@resources.${a.system.tag}.max`,value:a.system.uses?.max});break;case"attacks":{const e=a.defaultAction,t=e?.getAttacks({full:!0,resolve:!0,conditionals:!0,bonuses:!0})?.map((e=>e.bonus))??[];if(0==t.length)return;const s=new Intl.NumberFormat("nu",{signDisplay:"always"});n=t.map((e=>s.format(e))).join("/"),c.push({sources:a.attackSources});break}case"damage":{const e=a.defaultAction;if(!e?.hasDamage)return;const t=e.data,s=e.getRollData();pf1.utils.formula.actionDamage(e,{strict:!1});const i=[];o=game.i18n.localize("PF1.Details");const n=e.data.damage;for(const{formula:e,type:t}of n.parts??[])i.push({name:e,value:pf1.utils.formula.simplify(e,s,{strict:!1}),type:damageTypes2(t).join(", ")});for(const{formula:e,type:t}of n.nonCritParts??[])i.push({name:e,value:pf1.utils.formula.simplify(e,s,{strict:!1}),type:damageTypes2(t).join(", ")});const r=s.action?.held||s.item?.held||"normal",l=t.ability?.damage;if(l){const e=t.ability?.max??1/0,a=Math.min(s.abilities[l]?.mod??0,e),n=t.ability?.damageMult??pf1.config.abilityDamageHeldMultipliers[r]??1;i.push({value:a>=0?Math.floor(a*n):a,type:pf1.config.abilities[l]})}c.push({sources:i}),c.push({sources:e.allDamageSources.map((e=>({name:e.flavor,...e,type:pf1.config.bonusTypes[e.type]||e.type})))}),e?.data.conditionals.find((e=>!e.default)),n.critParts;break}case"range":{const e=a.defaultAction;if(!e?.hasRange)return;if((e.data.range?.maxIncrements??1)<=1)return;r.push({key:game.i18n.localize("PF1.MaximumRangeIncrements"),value:e.data.range.maxIncrements,left:!0});const t=e.getRollData(),s={...e.data.range??{},min:e.getRange({type:"min",rollData:t}),max:e.getRange({type:"max",rollData:t})},i=pf1.utils.convertDistance(0,"ft")[1],n=pf1.utils.convertDistance(0,s.units)[1];r.push({key:game.i18n.localize("PF1.Range"),value:`${s.min} ${i} – ${s.max} ${n}`,left:!0});break}default:throw Error(`Invalid extended tooltip identifier "${e}"`)}break}case"carryCapacity":l.push({path:"@attributes.encumbrance.level",value:a.attributes.encumbrance.level},{path:"@details.carryCapacity.bonus.total",value:a.details.carryCapacity.bonus.total},{path:"@details.carryCapacity.multiplier.total",value:a.details.carryCapacity.multiplier.total}),c.push({label:game.i18n.localize("PF1.CarryStrength"),sources:getSource("system.details.carryCapacity.bonus.total")}),c.push({label:game.i18n.localize("PF1.CarryMultiplier"),sources:getSource("system.details.carryCapacity.multiplier.total")});break;case"feats":{if(!(null===this.actor.system.abilities?.int?.value)){const e=Math.ceil(this.actor.system.attributes.hd.total/2);e>0&&c.push({sources:[{name:game.i18n.localize("PF1.FromLevels"),value:e}],untyped:!0});const t=Math.ceil(this.actor.system.details.mythicTier/2);t>0&&c.push({sources:[{name:game.i18n.localize("PF1.FromMythic"),value:t}],untyped:!0})}const e=[];this.actor.changes.filter((e=>"bonusFeats"===e.target)).forEach((t=>{(t.parent||t.flavor)&&e.push({name:t.parent?.name??t.flavor,value:t.value})}));const t=this.actor.getFeatCount();0!==t.formula&&e.push({name:game.i18n.localize("PF1.BonusFeatFormula"),value:t.formula}),c.push({sources:e,untyped:!0});break}case"skills":{const e=game.settings.get("pf1","allowBackgroundSkills"),t=null===a.abilities?.int?.value,s=[],n="background"===d;let o=0;if(this.actor.itemTypes.class.filter((e=>"mythic"!==e.system.subType)).forEach((a=>{if(pf1.config.favoredClassTypes.includes(a.subType)){const e=a.system.fc?.skill?.value||0;e>0&&!n&&s.push({name:game.i18n.format("PF1.SourceInfoSkillRank_ClassFC",{className:a.name}),value:e,untyped:!0})}if(t)return;const i=a.hitDice;if(0!==i){if(e&&pf1.config.backgroundSkillClasses.includes(a.subType)){const e=i*pf1.config.backgroundSkillsPerLevel;o+=e,e>0&&n&&s.push({name:game.i18n.format("PF1.SourceInfoSkillRank_ClassBase",{className:a.name}),value:e,untyped:!0})}if(!n){const e=a.system.skillsPerLevel||0;s.push({name:game.i18n.format("PF1.SourceInfoSkillRank_ClassBase",{className:a.name}),value:e*i,untyped:!0})}}})),!n&&!t){const e=a.abilities?.int?.mod;0!==e&&s.push({name:game.i18n.localize("PF1.AbilityInt"),value:e*a.attributes?.hd?.total})}if(e){let e=0;for(const t of Object.values(i.rollData.skills))if(t.subSkills)for(const s of Object.values(t.subSkills))t.background&&(e+=s.rank);else t.background&&(e+=t.rank);const t=e-o;t>0&&s.push({name:game.i18n.localize("PF1.Transferred"),value:n?t:-t})}c.push({sources:getSource("system.details.skills.bonus"),untyped:!0},{sources:s,untyped:!0});break}case"skill":{const e=d,t=e.split("."),s=t.shift(),o=t.pop(),r=this.actor.getSkillInfo(e,{rollData:i.rollData});n=`<code>${r.id}</code>`;const p=o?`${s}.subSkills.${o}`:s;l.push({path:`@skills.${p}.mod`,value:r.mod},{path:`@skills.${p}.rank`,value:r.rank});const m=a.attributes?.acp?.skill||0,h=[];r.rank>0&&(h.push({name:game.i18n.localize("PF1.SkillRankPlural"),value:r.rank}),r.cs&&h.push({name:game.i18n.localize("PF1.CSTooltip"),value:pf1.config.classSkillBonus})),r.acp&&m>0&&h.push({name:game.i18n.localize("PF1.ACPLong"),value:-m}),r.ability&&h.push({name:pf1.config.abilities[r.ability],value:i.rollData.abilities[r.ability]?.mod??0}),c.push({sources:h},{sources:getSource(`system.skills.${p}.mod`)}),u=getNotes("skill."+e),o&&u.push(...getNotes("skill."+s,!1));break}case"spellbook":{const[e,t,s]=d.split("."),n=a.attributes?.spells?.spellbooks?.[e];switch(t){case"class":{let t;l.push({path:"@cl",value:n.cl.total},{path:`@spells.${e}.cl.total`,value:n.cl.total}),"_hd"===n.class&&(t={level:i.rollData.attributes?.hd?.total}),t=i.rollData.classes?.[n.class],t&&l.push({path:"@class.level",value:t.level}),c.push({sources:getSource(`system.attributes.spells.spellbooks.${e}.cl.total`)});break}case"ability":{const t=i.rollData.abilities[n.ability]?.mod;l.push({path:`@spells.${e}.abilityMod`,value:t},{path:"@ablMod",value:t});break}case"level":l.push({path:`@spells.${e}.cl.total`,value:n.cl?.total}),c.push({sources:getSource(`system.attributes.spells.spellbooks.${e}.cl.total`),untyped:!0});break;case"concentration":l.push({path:`@spells.${e}.concentration.total`,value:n.concentration?.total}),c.push({sources:getSource(`system.attributes.spells.spellbooks.${e}.concentration.total`),untyped:!0});break;case"range":{const t=s;l.push({path:`@spells.${e}.range.${t}`,value:n.range?.[t],unit:"metric"===pf1.utils.getDistanceSystem()?pf1.config.measureUnitsShort.m:pf1.config.measureUnitsShort.ft});break}case"spellPoints":l.push({path:`@spells.${e}.spellPoints.value`,value:n.spellPoints.value},{path:`@spells.${e}.spellPoints.max`,value:n.spellPoints.max})}break}case"spell":{const[e,t]=d.split("."),s=this.actor.items.get(e);switch(t){case"material":{const e=s.system.materials??{};e.focus&&r.push({key:game.i18n.localize("PF1.SpellComponents.Type.focus.Label"),value:e.focus}),e.value&&r.push({key:game.i18n.localize("PF1.SpellComponents.Type.material.Label"),value:e.value});break}case"school":{s.system.subschool&&r.push({key:game.i18n.localize("PF1.SubSchool"),value:s.system.subschool}),s.system.descriptors?.total?.size&&r.push({key:game.i18n.localize("PF1.DescriptorPlural"),value:Array.from(s.system.descriptors?.total).join(", ")});const e=s.defaultAction;if(e?.hasDamage){const t=e.data.damage?.parts?.map((e=>e.type)).map(damageTypes2)??[];t.length&&r.push({key:game.i18n.localize("PF1.Damage"),value:t.join(", ")})}break}}break}case"generic":{const[e,t]=d.split(".");switch(e){case"attack":{l.push({path:"@attributes.attack.shared",value:a.attributes.attack.shared},{path:"@attributes.attack.general",value:a.attributes.attack.general},{path:"@attributes.attack."+t,value:a.attributes.attack[t]});const e=a.attributes.attack[t+"Ability"];c.push({sources:getSource("system.attributes.attack.shared")},{sources:[{name:pf1.config.abilities[e]||e,value:i.rollData.abilities[e]?.mod}]}),"med"!==a.traits.size&&c.push({sources:[{name:game.i18n.localize("PF1.Size"),value:pf1.config.sizeMods[a.traits.size]}]}),c.push({sources:getSource("system.attributes.attack.general")}),c.push({sources:getSource("system.attributes.attack."+t)}),u=[...getNotes("attacks.attack"),getNotes("attacks."+t)];break}}break}default:throw Error(`Invalid extended tooltip identifier "${e}"`)}t.header=n,t.subHeader=o,t.details=r,t.paths=l,t.sources=c,t.notes=u??[]}_onSpanTextInput(e,t){const s=e.target,a=s.parentElement,i="Number"===s.dataset.dtype||"number"===s.type,n=document.createElement("INPUT");n.type="text",s.dataset?.dtype&&(n.dataset.dtype=s.dataset.dtype,i&&(n.size=12));const o=s.classList.contains("no-value-cap"),r=s.getAttribute("name");let l,c=0;if(r){if(n.setAttribute("name",r),c=foundry.utils.getProperty(this.document,r)||0,r.endsWith(".value")&&!o&&i){const e=r.replace(/\.value$/,".max");l=foundry.utils.getProperty(this.document,e)}}else s.classList.contains("placeholder")||(c=i?parseFloat(s.innerText||"0"):s.innerText||"");s.dataset.min&&(n.min=s.dataset.min),s.dataset.step&&(n.step=s.dataset.step),s.dataset.max&&(n.max=s.dataset.max),n.value=""+(c||0);const u=["placeholder","direct","allow-relative"];for(const e of s.classList)u.includes(e)||n.classList.add(e);const p=s.classList.contains("allow-relative"),m=i?parseFloat(s.dataset.clearValue||"0"):"";let d;a.replaceChild(n,s),n.addEventListener("change",(e=>{let i;e.preventDefault(),e.stopPropagation(),d=!0,p?(i=adjustNumberByStringCommand(c,n.value,l,m),n.value=i):i=parseFloat(n.value||"0"),i===c?a.replaceChild(s,n):(n.readOnly=!0,t.call(this,e,s))}),{once:!0}),n.addEventListener("focusout",(e=>{if(d)return;parseFloat(n.value||"0")===c&&a.replaceChild(s,n)}),{passive:!0,once:!0}),n.focus(),n.select()}_moveTooltips(e){let t=e.target;if(t.matches(".tooltip")||(t=t.closest(".tooltip")),t){const s=t.querySelector(".tooltipcontent");if(s){const t=e.clientX,a=e.clientY+24;s.style.cssText+=`left:${t}px;top:${a}px;`}}}_onDragSkillStart(e){const t=e.currentTarget.closest(".skill"),s=t.dataset.skill,a=t.dataset.subSkill,i={type:"skill",uuid:this.document.uuid,skill:a?`${s}.${a}`:s};e.dataTransfer.setData("text/plain",JSON.stringify(i))}_onDragMiscStart(e,t,s){const a={type:t,uuid:this.document.uuid};switch(t){case"bab":case"cmb":case"initiative":case"defenses":break;case"concentration":case"cl":{const t=e.currentTarget.closest(".tab.spellbook-group");a.bookId=t.dataset.tab;break}case"abilityScore":a.ability=s;break;case"attack":a.attack=s;break;default:throw Error("Unrecognized drag source: "+t)}e.dataTransfer.setData("text/plain",JSON.stringify(a))}_onDragSaveStart(e,t){const s={type:"save",save:t,uuid:this.document.uuid};e.dataTransfer.setData("text/plain",JSON.stringify(s))}_initializeFilterItemList(e,t){const s=t.querySelectorAll(".filter-item");for(const e of s){(this._filters.sections[e.dataset.category]??=new Set).has(e.dataset.filter)&&e.classList.add("active")}}async _onRest(e){e.preventDefault();if(pf1.documents.settings.getSkipActionPrompt()){const t=e.currentTarget;t.disabled=!0;try{await this.actor.performRest({verbose:!0})}finally{t.disabled=!1}}else{const e=Object.values(this.document.apps).find((e=>e instanceof ActorRestDialog&&e._element));e?e.render(!0,{focus:!0}):new ActorRestDialog(this.document).render(!0)}}_onItemRoll(e){e.preventDefault(),e.stopPropagation();const t=e.currentTarget.closest(".item").dataset.itemId,s=this.document.items.get(t);if(null!=s)return s.displayCard(void 0,{token:this.token})}_mouseWheelAdd(e,t){const s="INPUT"===t.tagName,{originalEvent:a}=e;if(a&&a instanceof WheelEvent&&a.ctrlKey){e.preventDefault();const i=parseFloat(s?t.value:t.innerText)||0;if(Number.isNaN(i))return;const n=-Math.sign(a.deltaY),o=parseFloat(t.dataset.wheelStep)||1;s?t.value=i+o*n:t.innerText=""+(i+o*n)}}_setFeatUses(e){e.originalEvent instanceof MouseEvent||e.preventDefault();const t=e.currentTarget,s=t.closest(".item").dataset.itemId,a=this.document.items.get(s);this._mouseWheelAdd(e,t);const i="INPUT"===t.tagName?Number(t.value):Number(t.innerText);this.setItemUpdate(a.id,"system.uses.value",i),e.originalEvent instanceof MouseEvent?t.addEventListener("pointerleave",(()=>this._updateItems()),{passive:!0,once:!0}):this._updateItems()}_setSpellUses(e){e.originalEvent instanceof MouseEvent||e.preventDefault();const t=e.currentTarget,s=e.currentTarget.closest(".item").dataset.itemId,a=this.document.items.get(s);this._mouseWheelAdd(e,t);const i=a.system.preparation?.value??0,n="INPUT"===t.tagName?Number(t.value):Number(t.innerText);if(this.setItemUpdate(a.id,"system.preparation.value",n),i<n){const e=a.system.preparation.max??0;this.setItemUpdate(a.id,"system.preparation.max",Math.max(e,n))}e.originalEvent instanceof MouseEvent?t.addEventListener("pointerleave",(()=>this._updateItems()),{passive:!0,once:!0}):this._updateItems()}_setMaxSpellUses(e){e.originalEvent instanceof MouseEvent||e.preventDefault();const t=e.currentTarget,s=t.closest(".item").dataset.itemId,a=this.document.items.get(s);this._mouseWheelAdd(e,t);const i=a.system.preparation?.max??0,n="INPUT"===t.tagName?Number(t.value):Number(t.innerText);if(this.setItemUpdate(a.id,"system.preparation.max",Math.max(0,n)),i>n){const e=a.system.preparation.value??0;this.setItemUpdate(a.id,"system.preparation.value",Math.min(e,n))}n<0&&("INPUT"===t.tagName?t.value=0:t.innerText=0),e.originalEvent instanceof MouseEvent?t.addEventListener("pointerleave",(()=>this._updateItems()),{passive:!0,once:!0}):this._updateItems()}async _adjustActorPropertyBySpan(e,t){e.originalEvent instanceof MouseEvent||e.preventDefault();const s=e.currentTarget;this._mouseWheelAdd(e,s);const a="INPUT"===s.tagName?s.value:s.innerText;let i="String"===s.dataset.dtype?a:Number(a);const n=s.getAttribute("name");let o;if(n.match(/^system\.abilities\.([a-zA-Z0-9]+)\.value$/)&&(i=Number.isNaN(parseInt(i))?null:parseInt(i)),s.min&&(i=Math.max(Number(s.min),i)),s.max&&(i=Math.min(Number(s.max),i)),s.step&&(i=i.toNearest(Number(s.step))),n){if(i===getProperty(this.actor,n))return void(t&&s.parentElement.replaceChild(t,s));o={[n]:i}}e.originalEvent instanceof MouseEvent?s.addEventListener("pointerleave",(async e=>this._updateObject(e,this._getSubmitData(o))),{once:!0}):this._updateObject(e,this._getSubmitData(o))}_setBuffLevel(e){e.originalEvent instanceof MouseEvent||e.preventDefault();const t=e.currentTarget,s=t.closest(".item").dataset.itemId,a=this.document.items.get(s);this._mouseWheelAdd(e,t);const i="INPUT"===t.tagName?Number(t.value):Number(t.innerText);this.setItemUpdate(a.id,"system.level",i),e.originalEvent instanceof MouseEvent?t.addEventListener("pointerleave",(()=>this._updateItems()),{passive:!0,once:!0}):this._updateItems()}_hideShowElement(e){e.preventDefault();const t=e.currentTarget,s=this.element.find("."+t.dataset.for);s.hasClass("hidden")?($(t).find("i").removeClass("fa-arrow-circle-down").addClass("fa-arrow-circle-up"),s.removeClass("hidden"),s.hide(),s.slideDown(200),this._hiddenElems[t.dataset.for]=!1):($(t).find("i").removeClass("fa-arrow-circle-up").addClass("fa-arrow-circle-down"),s.slideUp(200,(()=>s.addClass("hidden"))),this._hiddenElems[t.dataset.for]=!0)}_onToggleCondition(e){e.preventDefault();const t=e.currentTarget.dataset.conditionId;this.actor.toggleCondition(t)}async _onEditCondition(e){e.preventDefault();const t=e.currentTarget,s=t.dataset.conditionId,a=pf1.registry.conditions.get(s);if(!a)throw Error("Invalid condition ID: "+s);let i;if(this.actor.statuses.has(s)){const e=[];for(const t of this.actor.allApplicableEffects())t.active&&t.statuses.has(s)&&e.push(t);if(e.length>1)return void ui.notifications.warn("PF1.Error.TooManyConditionSources",{localize:!0});i=e[0]}const{bottom:n,left:o}=t.getBoundingClientRect(),r=await pf1.utils.dialog.getNumber({title:a.name+" – "+game.i18n.localize("PF1.Duration"),initial:Math.floor((i?.duration?.seconds??0)/CONFIG.time.roundTime),hint:game.i18n.localize("PF1.Time.Period.round.Label"),min:0,step:1,dialog:{top:n+20,left:o-20}});if(Number.isNaN(r))return;const l={"duration.seconds":r*CONFIG.time.roundTime};i?i.update(l):this.actor.setCondition(s,l)}_onToggleSkillLock(e){e.preventDefault(),this._skillsLocked=!this._skillsLocked;const t=e.currentTarget;t.classList.toggle("unlocked",!this._skillsLocked);const s=t.closest(".tab");s.classList.toggle("locked",this._skillsLocked),s.querySelectorAll(".lockable").forEach((e=>{["INPUT","SELECT"].includes(e.tagName)?e.disabled=this._skillsLocked:e.classList.toggle("hide-contents",this._skillsLocked)}))}_onOpenCompendiumBrowser(e){e.preventDefault();const t=e.currentTarget.dataset.category;pf1.applications.compendiums[t].render(!0,{focus:!0})}async _onOpenCompendiumEntry(e){openJournal(e.currentTarget.dataset.compendiumEntry)}_onRollConcentration(e){e.preventDefault();const t=$(e.currentTarget).closest(".spellbook-group").data("tab");this.document.rollConcentration(t,{token:this.token})}_onRollCL(e){e.preventDefault();const t=$(e.currentTarget).closest(".spellbook-group").data("tab");this.document.rollCL(t,{token:this.token})}_setItemActive(e){e.preventDefault();const t=e.currentTarget,s=t.checked,a=t.closest(".item").dataset.itemId;this.actor.items.get(a).setActive(s)}_onLevelUp(e){e.preventDefault;const t=e.currentTarget.closest(".item").dataset.itemId,s=this.actor.items.get(t);return LevelUpForm.increaseLevel(this.actor,s,{token:this.token})}_onItemSummary(e){e.preventDefault();const t=e.target.closest(".item[data-item-id]");this.openItemSummary(t)}async openItemSummary(e,{instant:t=!1,rollData:s}={}){const a=e.dataset.itemId,i=this.actor.items.get(a);s??=i.defaultAction?.getRollData()??i.getRollData();const{description:n,properties:o}=await i.getChatData({chatcard:!1,rollData:s});if(this._expandedItems=this._expandedItems.filter((e=>e!==a)),e.classList.contains("expanded")){const s=e.querySelector(".item-summary");t?s.remove():$(s).slideUp(200,(()=>s.remove()))}else{const i={description:n||game.i18n.localize("PF1.NoDescription"),properties:o};let r=await renderTemplate("systems/pf1/templates/actors/parts/actor-item-summary.hbs",i);r=await TextEditor.enrichHTML(r,{rollData:s,async:!0,secrets:this.actor.isOwner});const l=$(r);t?e.append(...l):(l.hide(),e.append(...l),l.slideDown(200)),this._expandedItems.push(a)}e.classList.toggle("expanded")}_onInputText(e){e.preventDefault();const t=e.target;if(!t||t?.disabled)return;t.readOnly=!1;const s=foundry.utils.getProperty(this.document,t.name),a=t.value;t.value=s;let i=!1;const n=e instanceof WheelEvent;n?this._mouseWheelAdd(e,t):t.select();const handler=e=>{const o=document.getSelection();o.anchorNode!==t&&o.anchorNode!==t.parentElement||o.removeAllRanges(),n?t.removeEventListener("pointerout",handler):(t.removeEventListener("focusout",handler),t.removeEventListener("keydown",keyHandler)),t.removeEventListener("click",handler),i||=""+s!==t.value,i?this._onSubmit(e):(t.readOnly=!0,t.value=a)},keyHandler=e=>{"Enter"===e.key&&(i=!0,handler.call(this,e))};n?(t.addEventListener("pointerout",handler,{passive:!0}),i=!0):(t.addEventListener("focusout",handler,{passive:!0}),t.addEventListener("keydown",keyHandler,{passive:!0})),t.addEventListener("click",handler,{passive:!0})}async _onArbitrarySkillCreate(e){e.preventDefault();const t=$(e.currentTarget).parents(".skill").attr("data-skill"),s=this.document.system.skills[t],a={name:game.i18n.format("DOCUMENT.New",{type:game.i18n.localize("PF1.Skill")}),ability:s.ability,rank:0,rt:s.rt,cs:s.cs,acp:s.acp};let i=1,n=`${t}${i}`;for(;null!=s.subSkills[n];)i++,n=`${t}${i}`;const o={};return o[`system.skills.${t}.subSkills.${n}`]=a,await this.document.update(o),this._editSkill(t,n)}async _onSkillCreate(e){e.preventDefault();const t="true"===$(e.currentTarget).parents(".skills-list").attr("data-background"),s={name:game.i18n.format("DOCUMENT.New",{type:game.i18n.localize("PF1.Skill")}),ability:"int",rank:0,mod:0,rt:!1,cs:!1,acp:!1,background:t,custom:!0},a=s.name||"skill",i=pf1.utils.createTag(a);let n=i,o=1;for(;null!=this.document.system.skills[n];)o++,n=i+o.toString();const r={};return r["system.skills."+n]=s,await this.document.update(r),this._editSkill(n)}_editSkill(e,t){return new Promise((s=>{const a=new pf1.applications.SkillEditor(this.document,e,t);a.addCallback(s),a.render(!0)}))}_onSkillEdit(e){e.preventDefault();const t=e.target.closest(".skill"),s=t.dataset.skill,a=t.dataset.subSkill;return this._editSkill(s,a)}_onSkillDelete(e){e.preventDefault();const t=e.target.closest(".skill"),s=t.dataset.skill,a=t.dataset.subSkill,i=a?`${s}.${a}`:s,n=this.actor.getSkillInfo(i),deleteSkill=()=>{const e={};a?e[`system.skills.${s}.subSkills.-=${a}`]=null:e["system.skills.-="+s]=null,this.document.update(e)};getSkipActionPrompt()?deleteSkill():Dialog.confirm({title:game.i18n.format("PF1.DeleteSkillTitle",{name:n.fullName}),content:`<p>${game.i18n.localize("PF1.DeleteSkillConfirmation")}</p>`,yes:()=>deleteSkill(),rejectClose:!0})}async _onPointBuyCalculator(e){e.preventDefault();const t=Object.values(this.document.apps).find((e=>e instanceof PointBuyCalculator&&e._element));t?t.render(!0,{focus:!0}):new PointBuyCalculator(this.document).render(!0)}async _onSensesSelector(e){e.preventDefault();const t=Object.values(this.document.apps).find((e=>e instanceof pf1.applications.SensesSelector&&e._element));t?t.render(!0,{focus:!0}):new pf1.applications.SensesSelector(this.document).render(!0)}async _onControlAlignment(e){e.preventDefault();const t=e.currentTarget,s=Object.entries(pf1.config.alignmentsShort).map((([e,t])=>({value:e,label:t})));new Widget_ItemPicker((e=>{this.document.update({"system.details.alignment":e})}),{items:s,columns:3}).render($(t))}_itemActivationControl(e){e.preventDefault();const t=e.currentTarget.closest(".item[data-item-id]").dataset.itemId;this.document.items.get(t).use({ev:e,token:this.token})}async _quickChangeItemQuantity(e,t=1){e.preventDefault(),e.shiftKey&&(t*=5),e.ctrlKey&&(t*=10);const s=e.currentTarget.closest(".item").dataset.itemId,a=this.actor.items.get(s),i=a.system.quantity||0;let n=Math.max(0,i+t);"container"===a.type&&(n=Math.min(n,1)),a.update({"system.quantity":n})}async _quickEquipItem(e){e.preventDefault();const t=e.currentTarget.closest(".item").dataset.itemId,s=this.actor.items.get(t);s.setActive(!s.activeState)}async _quickCarryItem(e){e.preventDefault();const t=e.currentTarget.closest(".item").dataset.itemId,s=this.actor.items.get(t);s.isPhysical&&s.update({"system.carried":!s.system.carried})}async _quickIdentifyItem(e){if(e.preventDefault(),!game.user.isGM)return void ui.notifications.error(game.i18n.localize("PF1.Error.CantIdentify"));const t=e.currentTarget.closest(".item").dataset.itemId,s=this.document.items.get(t);s.isPhysical&&s.update({"system.identified":!s.system.identified})}async _itemPreparedToggle(e){e.preventDefault();const t=e.currentTarget,s=t.closest(".item").dataset.itemId,a=this.actor.items.get(s),i=t.dataset.name,n={system:{}};foundry.utils.setProperty(n.system,i,foundry.utils.getProperty(a.system,i)?0:1),a.update(n)}_prepareDuplicateItem(e,{rename:t=!0}={}){if(delete e._id,delete e.system.links?.children,delete e.system.links?.charges,e.sort=e.sort+1e3,t){const searchUnusedName=e=>{let t,s=1;do{s+=1,t=`${e} (${s})`}while(this.actor.items.getName(t));return t};e.name=e.name.replace(/\s+\(\d+\)$/,""),e.name=searchUnusedName(e.name)}}async _duplicateItem(e){e.preventDefault();const t=e.currentTarget.closest(".item[data-item-id]").dataset.itemId,s=this.document.items.get(t).toObject();this._prepareDuplicateItem(s);const a=await this.document.createEmbeddedDocuments("Item",[s]);a?.forEach((e=>e.sheet.render(!0)))}_quickAction(e){e.preventDefault();const t=e.currentTarget.dataset.itemId,s=this.document.items.get(t);if(s)return s.use({token:this.token})}_convertCurrency(e){e.preventDefault();const t=e.currentTarget,s=t.dataset.type,a=t.dataset.category;this.actor.convertCurrency(a,s)}_onItemCreate(e){e.preventDefault();const t=e.currentTarget,[s,a]=t.dataset.create?.split(".")??[],i=pf1.config.sheetSections[s]?.[a]?.create;if(!i)throw Error(`No creation data found for "${s}.${a}"`);i.type||=t.dataset.type;const n=i.type,o=i.system?.subType,r=game.i18n.localize(o?`PF1.Subtypes.Item.${n}.${o}.Single`:CONFIG.Item.typeLabels[n]),l=foundry.utils.mergeObject({name:game.i18n.format("PF1.NewItem",{type:r}),system:{}},i,{inplace:!1});"spell"===n&&(l.system.level=parseInt(t.dataset.level),l.system.spellbook=t.dataset.book);const c=new Item.implementation(l);this._sortNewItem(c);const u=this.actor.itemTypes[n].filter((e=>this._isItemSameSubGroup(c,e))).sort(((e,t)=>t.sort-e.sort));if(u.length){const e=c.name;let t=e,s=2;const a=new Set(u.map((e=>e.name)));for(;a.has(t);)t=`${e} (${s++})`;t!==c.name&&c.updateSource({name:t})}return this.document.createEmbeddedDocuments("Item",[c.toObject()],{renderSheet:!0})}_onItemEdit(e){e.preventDefault();const t=e.currentTarget.closest(".item");this.document.items.get(t.dataset.itemId).sheet.render(!0,{focus:!0})}_onItemDelete(e){e.preventDefault();const t=e.currentTarget;if(t.disabled)return;const s=e.currentTarget.closest(".item"),a=this.document.items.get(s.dataset.itemId);if(getSkipActionPrompt())a.delete();else{t.disabled=!0;const e=`<p>${game.i18n.localize("PF1.DeleteItemConfirmation")}</p>`;Dialog.confirm({title:game.i18n.format("PF1.DeleteItemTitle",{name:a.name}),content:e,yes:()=>{a.delete(),t.disabled=!1},no:()=>t.disabled=!1,rejectClose:!0}).then(null,(()=>t.disabled=!1))}}async _onItemGive(e){e.preventDefault();const t=e.currentTarget.closest(".item").dataset.itemId,s=this.document.items.get(t),a=game.actors.filter((e=>e!==this.actor&&(e.isOwner||e.hasPlayerOwner)));0===a.length&&ui.notifications.warn("PF1.Error.NoGiftTargets",{localize:!0});const i=await pf1.utils.dialog.getActor({title:game.i18n.localize("PF1.GiveItemToActor"),actors:a}),n=game.actors.get(i);if(!n)throw Error(`Invalid actor ID as gift target: "${i}"`);if(n.isOwner){(await n.createEmbeddedDocuments("Item",[s.toObject()])).length>0&&await s.delete()}else game.socket.emit("system.pf1",{eventType:"giveItem",targetActor:n.uuid,item:s.uuid})}async _onItemSplit(e){e.preventDefault();const t=e.currentTarget.closest(".item").dataset.itemId,s=this.actor.items.get(t),a=s.system.quantity;if(a<2)throw Error("Can't split stack with less than 2 items");const i={total:a,title:game.i18n.format("PF1.Dialog.SplitItem.Title",{name:s.name})},n=await pf1.applications.SplitStack.wait(i);if(!n)return;const[o,r]=n,l=s.toObject();l.system.quantity=r,this._prepareDuplicateItem(l,{rename:!1}),await Item.implementation.createDocuments([l],{parent:this.actor}),await s.update({"system.quantity":o})}_onRollAbilityTest(e){e.preventDefault();const t=e.currentTarget.closest(".ability").dataset.ability;this.document.rollAbilityTest(t,{token:this.token})}_onRollBAB(e){e.preventDefault(),this.document.rollBAB({token:this.token})}_onRollAttack(e){e.preventDefault();let t=e.target;t.classList.contains("rollable")||(t=t.closest(".rollable"));const s="weapon"!==t.dataset.type,a="true"===t.dataset.ranged;this.document.rollAttack({maneuver:s,ranged:a,token:this.token})}_onRollInitiative(e){e.preventDefault(),this.document.rollInitiative({createCombatants:!0,rerollInitiative:game.user.isGM,token:this.token})}_onRollSavingThrow(e){e.preventDefault();const t=e.currentTarget.closest(".saving-throw").dataset.savingthrow;this.document.rollSavingThrow(t,{token:this.token})}_applySectionFilter(e,t){if(!t.filters)throw Error(`Section "${t.path}" lacks filters`);return t.filters.some((t=>t.type===e.type&&(t.subTypes?.includes(e.subType)??!0)))}_prepareItems(e){const t=Object.values(pf1.config.sheetSections.inventory).map((e=>({...e}))).sort(((e,t)=>e.sort-t.sort)),[s,a,i]=e.items.reduce(((e,t)=>("spell"===t.type?e[1].push(t):t.isPhysical?e[0].push(t):e[2].push(t),e)),[[],[],[]]);let n=!1,o=!1;const r={},l=e.system.attributes.spells.spellbooks;for(const[t,s]of Object.entries(l)){if(r[t]={...s},!s.inUse)continue;o=!0;const i=r[t],l=a.filter((e=>e.spellbook===t));i.sections=this._prepareSpellbook(e,l,t),i.prepared=l.filter((e=>"prepared"===e.preparation.mode&&e.preparation.prepared)).length,i.rollData=e.rollData.spells[t],i.classId=s.class,i.class=e.rollData.classes[s.class],s.arcaneSpellFailure&&(n=!0)}if(n){const t=this.actor.itemTypes.equipment.filter((e=>e.isActive)).reduce(((e,t)=>e+(t.system.spellFailure||0)),0);e.asf={total:t}}if(o){const t=game.settings.get("core","language"),s=this.actor.itemTypes.class.map((e=>[e.system.tag,e.name])).sort((([e,s],[a,i])=>s.localeCompare(i,t)));s.unshift(["_hd",game.i18n.localize("PF1.HitDie")]),e.classList=Object.fromEntries(s)}const c=game.settings.get("pf1","cybertech"),u=this.actor.itemTypes.implant.filter((e=>"cybertech"===e.subType&&e.system.implanted));if(c||u.length){const t=u.reduce(((e,t)=>e+(t.system.implant||0)),0),s=this.actor.system.abilities??{};e.implants={load:t,max:Math.min(s.int?.total,s.con?.total)}}for(const e of s){const s=t.find((t=>this._applySectionFilter(e,t)));s&&(s.items??=[],s.items.push(e))}c||0!==this.actor.itemTypes.implant.length||t.findSplice((e=>"implants"===e.id));const p=Object.values(pf1.config.sheetSections.features).map((e=>({...e}))).sort(((e,t)=>e.sort-t.sort));for(const e of i){const t=e.abilityType;e.typelabel=pf1.config.abilityTypes[t]?.short||pf1.config.abilityTypes.na.short;const s=p.find((t=>this._applySectionFilter(e,t)));s&&(s.items??=[],s.items.push(e))}if(this.actor.itemTypes.feat.length){p.find((e=>"features.feat"===e.path)).issues={found:e.featCount?.issues>0,missing:e.featCount?.missing||0,excess:e.featCount?.excess||0,get discrepancy(){return Math.abs(this.missing-this.excess)}}}const m=Object.values(pf1.config.sheetSections.buffs).map((e=>({...e}))).sort(((e,t)=>e.sort-t.sort));for(const e of i){const t=m.find((t=>this._applySectionFilter(e,t)));t&&(t.items??=[],t.items.push(e))}const d=Object.values(pf1.config.sheetSections.combat).map((e=>({...e}))).sort(((e,t)=>e.sort-t.sort));for(const e of i){const t=d.find((t=>this._applySectionFilter(e,t)));t&&(t.items??=[],t.items.push(e))}const h=Object.values(pf1.config.sheetSections.classes).map((e=>({...e}))).sort(((e,t)=>e.sort-t.sort));for(const e of i){const t=h.find((t=>this._applySectionFilter(e,t)));t&&(t.items??=[],t.items.push(e))}const g=[{key:"inventory",sections:t},{key:"features",sections:p},{key:"buffs",sections:m},{key:"attacks",sections:d}];for(const[e,t]of Object.entries(r))t.inUse&&(t.sections||console.warn(e,t),g.push({key:"spellbook-"+e,sections:t.sections}));for(const{key:e,sections:t}of g){const s=this._filters.sections[e];for(const e of t)e&&(e._hidden=s?.size>0&&!s.has(e.id))}e.inventory=t,e.spellbookData=r,e.features=p,e.buffs=m,e.attacks=d,e.classes=h,e.quickActions=this.document.getQuickActions()}_onRollSkillCheck(e){e.preventDefault();const t=e.target,s=t.dataset.skill,a=t.dataset.subSkill,i=a?`${s}.${a}`:s;this.document.rollSkill(i,{token:this.token})}_onToggleFilter(e){e.preventDefault();const t=e.currentTarget,{category:s,filter:a}=t.dataset,i=this._filters.sections[s]??=new Set;i.size;if(game.settings.get("pf1","invertSectionFilterShiftBehaviour")?!e.shiftKey:e.shiftKey)for(const e of Array.from(i))e!==a&&i.delete(e);i.has(a)?i.delete(a):i.add(a),this.render()}_searchFilterCommit(e){const t=this.actor,s=this._filters.search[e.target.dataset.category].toLowerCase(),a=e.target.dataset.category;if(this.effectiveSearch[a]===s&&!this.searchRefresh)return;this.effectiveSearch[a]=s,this.searchRefresh=!1;$(e.target).closest(".tab").find(".item-list .item").each((function(){const e=$(this);if(s?.length>0){const a=t.items.get(this.dataset.itemId);a.name.toLowerCase().includes(s)?e.show():e.hide()}else e.show()}))}_clearSearch(e){const t=$(e.target).prev(".search-input");this._filters.search[t.get(0).dataset.category]="",t.val("").change()}_searchFilterCompositioning(e){this.searchCompositioning="compositionstart"===e.type}_searchFilterChange(e){e.preventDefault(),e.stopPropagation();const t=e.target.value,s=e.target.dataset.category,a=this._filters.search[s]!==t;(this.searchCompositioning||a)&&clearTimeout(this.searchDelayEvent),this.searchCompositioning||(this._filters.search[s]=t,"keyup"===e.type?a&&(this.searchDelayEvent=setTimeout((()=>this._searchFilterCommit(e)),this.searchDelay)):this._searchFilterCommit(e))}_onTraitSelector(e){e.preventDefault();const t=e.currentTarget,s=t.parentElement.querySelector("label"),a=t.dataset.options in pf1.registry?pf1.registry[t.dataset.options].getLabels():pf1.config[t.dataset.options],i={name:t.dataset.for,title:s.innerText,subject:t.dataset.options,choices:a};let n=Object.values(this.document.apps).find((e=>e instanceof ActorTraitSelector&&e.options.name===i.name));n??=new ActorTraitSelector(this.document,i),n.render(!0,{focus:!0})}_onResistanceSelector(e){e.preventDefault();const t=e.currentTarget,s={name:t.dataset.for,title:t.innerText,fields:t.dataset.fields,dtypes:t.dataset.dtypes,width:"dr"===t.dataset.options?575:450,isDR:"dr"===t.dataset.options},a=Object.values(this.document.apps).find((e=>e instanceof ActorResistanceSelector&&e.options.name===s.name&&e._element));a?a.render(!0,{focus:!0}):new ActorResistanceSelector(this.document,s).render(!0)}setItemUpdate(e,t,s){let a=this._itemUpdates.find((t=>t._id===e));a||(a={_id:e},this._itemUpdates.push(a)),a[t]=s}async _render(...e){let t=this.element.find(":focus");t=t.length?t[0]:null,t?.name?.match(/^system\.skills\.(?:[a-zA-Z0-9]*)\.name$/)&&t.blur();const s=await super._render(...e);return this._createPlaceholders(this.element),this.element,game.settings.get("pf1","accessibilityConfig"),s}async _renderInner(...e){const t=await super._renderInner(...e);for(const e of this._expandedItems)if(this.object.items.has(e)){const s=t.find(`.item-list>.item[data-item-id="${e}"]`)[0];s&&this.openItemSummary(s,{instant:!0})}else this._expandedItems.findSplice((t=>t===e));return t}async _onSubmit(e,{updateData:t=null,preventClose:s=!1,preventRender:a=!1}={}){e.preventDefault(),this._itemUpdates?.length&&(a=!0),await super._onSubmit(e,{updateData:t,preventClose:s,preventRender:a}),await this._updateItems()}async _updateItems(){const e=this._itemUpdates;this._itemUpdates=[];for(const t of e){const e=this.document.items.get(t._id);e?(delete t._id,await e.update(t)):console.error("Item update for non-existing item:",t._id,t)}}async _onDropCurrency(e,t){const s=await fromUuid(t.actorUuid||""),{currency:a,amount:i,containerId:n,alt:o}=t;return new CurrencyTransfer({actor:s,container:n,alt:o},{actor:this.actor,amount:Object.fromEntries([[a,parseInt(i)]])}).render(!0)}async _onDropItem(e,t){if(!this.actor.isOwner)return void ui.notifications.warn("PF1.Error.NoActorPermission",{localize:!0});const s=await Item.implementation.fromDropData(t),a=await fromUuid(t.actorUuid||""),i=s.actor===this.actor&&!t.containerId,n=game.items.fromCompendium(s,{clearFolder:!0,keepId:i,clearSort:!i});if(i)return this._onSortItem(e,n);s.isPhysical&&game.user.isGM&&e.altKey&&(n.system.identified=!1),this._alterDropItemData(n,s);const o=await this._onDropItemCreate(n);if(t.containerId&&o?.length&&a===this.actor){const e=this.actor.allItems.find((e=>e.id===t.containerId));e&&e.deleteContainerContent(t.itemId)}return o}_alterDropItemData(e,t){const s=!!t.pack,a=!!t.parent,i=!s&&!a&&!!t.id;"npc"===this.actor.type&&t.isPhysical&&s&&(t.system?.cl>0||["drug","poison"].includes(t.system.subType))&&(e.system.identified=!1),"spell"===e.type&&(e.system.spellbook=this.currentSpellbookKey),t.isPhysical&&(s||i)&&(e.system.size=this.actor.system.traits?.size||"med")}_isItemSameSubGroup(e,t){return"spell"===e.type?e.system.spellbook===t.system.spellbook&&e.system.level===t.system.level:!e.subType||e.subType===t.subType}_sortNewItem(e){const t=e.type,s=this.actor.itemTypes[t].filter((t=>this._isItemSameSubGroup(e,t))).sort(((e,t)=>t.sort-e.sort));s.length&&e.updateSource({sort:s[0].sort+CONST.SORT_INTEGER_DENSITY})}async _onDropItemCreate(e){const t=e instanceof Array?e:[e],s=[];for(const e of t){if(delete e._id,"feat"===e.type&&"classFeat"===e.system?.subType){const t=[...this.actor.itemTypes.class].sort(((e,t)=>(t.system.level||0)-(e.system.level||0)));if(0===t.length);else if(1===t.length)e.system.class=t[0].system.tag;else{const s={actor:this.actor,empty:!0,items:t,selected:t[0]?._id},a={title:`${game.i18n.format("PF1.SelectSpecific",{specifier:game.i18n.localize("TYPES.Item.class")})} - ${e.name} - ${this.actor.name}`},i=await pf1.applications.ItemSelector.wait(s,a);if(i){const t=this.actor.items.get(i);e.system.class=t.system.tag}}}if("spell"===e.type&&"spellbook"!==this.currentPrimaryTab){const t=this.actor.system.attributes?.spells??{},a=t.spellbooks?.[this.currentSpellbookKey]?.kind||"arcane",i=await pf1.documents.item.ItemSpellPF.toConsumablePrompt(e,{spellType:a,actor:this.actor,allowSpell:t.usedSpellbooks?.length>0});if(i){s.push(i);continue}if(null===i)continue}const a=new Item.implementation(e);if(this._sortNewItem(a),"class"!==e.type||event&&event.shiftKey)s.push(a.toObject());else{a.updateSource({system:{level:1}});const e=await LevelUpForm.addClassWizard(this.actor,a.toObject(),{token:this.token});e&&1===t.length&&this._focusTabByItem(e)}}return 1===s.length&&this._focusTabByItem(s[0]),this.document.createEmbeddedDocuments("Item",s)}_focusTabByItem(e){let t;switch(e.type){case"race":case"class":t="summary";break;case"spell":t="spellbook";break;case"buff":t="buffs";break;case"feat":t="feats";break;case"weapon":case"equipment":case"consumable":case"loot":case"container":t="inventory";break;case"attack":t="combat"}t&&this.activateTab(t,"primary")}_canDragStart(e){return!e.includes(".denomination")||this.isEditable}_onDragStart(e){const t=e.target;if(t.classList.contains("denomination")){const s=t.classList.contains("alt-currency"),a=t.dataset.denomination,i=s?this.actor.system.altCurrency:this.actor.system.currency,n={actorUuid:this.actor.uuid,type:"Currency",alt:s,currency:a,amount:i[a]};e.dataTransfer.setData("text/plain",JSON.stringify(n))}else t.dataset?.skill?this._onDragSkillStart(e):t.dataset?.attribute?this._onDragMiscStart(e,t.dataset.attribute):t.dataset?.drag?this._onDragMiscStart(e,t.dataset.drag):t.dataset?.savingthrow?this._onDragSaveStart(e,t.dataset.savingthrow):t.dataset?.ability?this._onDragMiscStart(e,"abilityScore",t.dataset.ability):t.dataset?.attack?this._onDragMiscStart(e,"attack",t.dataset.attack):super._onDragStart(e)}_selectOnClick(e){e.preventDefault();e.currentTarget.select()}_updateObject(t,s){const a=s["system.details.cr.base"];"string"==typeof a&&(s["system.details.cr.base"]=e.fromString(a));{const e=this.element.find("*[data-name]"),t={};for(const s of e){const e=s.dataset.name;let a;"INPUT"===s.nodeName?a=s.value:"SELECT"===s.nodeName&&(a=s.options[s.selectedIndex].value),"Number"===s.dataset.dtype?a=Number(a):"Boolean"===s.dataset.dtype&&(a=!!a),foundry.utils.getProperty(this.document.system,e)!==a&&(t[e]=a)}for(const[e,a]of Object.entries(t))s[e]=a}return this.searchRefresh=!0,super._updateObject(t,s)}calculateTotalItemValue({inLowestDenomination:e=!1,recursive:t=!1}={}){const s=this.actor.items.filter((e=>e.isPhysical&&null!=e.system.price)).reduce(((e,s)=>e+s.getValue({recursive:t,sellValue:1,inLowestDenomination:!0})),0);return e?s:s/100}calculateSellItemValue({inLowestDenomination:e=!1,recursive:t=!1}={}){const s=this.document.items.filter((e=>null!=e.system.price)),a=this.document.getFlag("pf1","sellMultiplier")||.5,i=s.reduce(((e,s)=>e+s.getValue({recursive:t,sellValue:a,inLowestDenomination:!0})),0);return e?i:i/100}_createPlaceholders(e){const t=e.find("span[data-placeholder]");for(const e of t)e.innerText||(e.classList.add("placeholder"),e.innerText=e.dataset.placeholder)}}class ActorSheetPFBasic extends ActorSheet{}class ActorSheetPFCharacter extends ActorSheetPF{static get defaultOptions(){const e=super.defaultOptions;return{...e,classes:[...e.classes,"character"],width:800,height:840}}get template(){return!game.user.isGM&&this.actor.limited?"systems/pf1/templates/actors/limited-sheet.hbs":"systems/pf1/templates/actors/character-sheet.hbs"}async getData(){const e=await super.getData(),t=game.settings.get("pf1","experienceConfig");e.disableExperience=t.disable,e.showXpBar=!t.disable,t.disable||(e.minimumExperience=this.actor.getLevelExp(Math.max(0,(this.actor.system.details.level.value??0)-1),{rollData:e.rollData})),e.hasClasses=this.actor.itemTypes.class.length>0;const s=game.settings.get("pf1","healthConfig");if(e.woundThresholds=s.variants.pc,!0!==t.disable&&e.hasClasses){const s=this.actor.system.details?.xp;if(s&&s.value>=s.max){e.levelUp=!0;const s=t.track;if(["fast","medium","slow"].includes(s)){this.actor.system.details.level.value>=pf1.config.CHARACTER_EXP_LEVELS[s].length&&(e.levelUp=!1)}}}else e.levelUp=!0;return e}}class ActorSheetPFNPC extends ActorSheetPF{static get defaultOptions(){const e=super.defaultOptions;return{...e,classes:[...e.classes,"npc"],width:800,height:840}}get template(){return!game.user.isGM&&this.actor.limited?"systems/pf1/templates/actors/limited-sheet.hbs":"systems/pf1/templates/actors/npc-sheet.hbs"}async getData(){const t=await super.getData();t.labels.cr=e.fromNumber(this.actor.system.details?.cr?.total??0);const s=game.settings.get("pf1","healthConfig");return t.woundThresholds=s.variants.npc,t.levelUp=!0,t}activateListeners(e){super.activateListeners(e),e.find("span.text-box.cr-input").on("click",(e=>{this._onSpanTextInput(e,this._adjustCR.bind(this))}))}async _adjustCR(t){t.preventDefault();const s=t.currentTarget,a=e.fromString("INPUT"===s.tagName?s.value:s.innerText),i=s.getAttribute("name");let n;i&&(n={[i]:a}),t.originalEvent instanceof MouseEvent?s.addEventListener("pointerleave",(async e=>this._updateObject(t,this._getSubmitData(n))),{once:!0}):this._updateObject(t,this._getSubmitData(n))}}class ActorSheetPFNPCLite extends ActorSheetPFNPC{static get defaultOptions(){const e=super.defaultOptions;return{...e,classes:[...e.classes,"lite"],width:440,height:640,tabs:[{navSelector:"nav.tabs",contentSelector:"section.primary-body",initial:"summary",group:"primary"}]}}get template(){return!game.user.isGM&&this.actor.limited?"systems/pf1/templates/actors/limited-sheet.hbs":"systems/pf1/templates/actors/npc-sheet-lite.hbs"}async getData(){const e=await super.getData();return e.hasHD=!1,e}_prepareItems(e){const t=Object.values(pf1.config.sheetSections.combatlite).map((e=>({...e}))).sort(((e,t)=>e.sort-t.sort));for(const s of e.items){const e=t.find((e=>this._applySectionFilter(s,e)));e?(e.items??=[],e.items.push(s)):console.warn("Could not find a sheet section for",s.name)}e.attacks=t}}class ActorSheetPFNPCLoot extends ActorSheetPFNPC{static get defaultOptions(){const e=super.defaultOptions;return{...e,classes:[...e.classes,"loot"],tabs:[{navSelector:"nav.tabs",contentSelector:"section.primary-body",initial:"inventory",group:"primary"}],width:620,height:420}}get template(){return"systems/pf1/templates/actors/npc-sheet-loot.hbs"}get currentPrimaryTab(){return"inventory"}get itemValueDenomination(){return"gp"}async getData(){const e=await super.getData();e.isLootSheet=!0,e.sellMultiplier=this.actor.getFlag("pf1","sellMultiplier");const t=this.actor.getTotalCurrency({inLowestDenomination:!0}),s=this.calculateTotalItemValue({inLowestDenomination:!0,recursive:!0})+t,a=this.calculateSellItemValue({inLowestDenomination:!0,recursive:!0})+t;e.totalValue=pf1.utils.currency.split(s),e.sellValue=pf1.utils.currency.split(a),e.labels||(e.labels={}),e.labels.totalValue=game.i18n.format("PF1.Containers.TotalValue",e.totalValue),e.labels.sellValue=game.i18n.format("PF1.Containers.SellValue",e.sellValue);for(const t of e.inventory)t.interface={...t.interface,value:!0,actions:!1,noEquip:!0};return e.labels.currency="PF1.Currency.Inline."+this.itemValueDenomination,e}_prepareItem(e){const t=super._prepareItem(e);return e.isPhysical&&(t.price=e.getValue({recursive:!1,sellValue:1,inLowestDenomination:!0})/100),t}}class ActorSheetPFHaunt extends ActorSheetPFNPC{static get defaultOptions(){const e=super.defaultOptions;return{...e,classes:[...e.classes,"haunt"],width:820,height:700,tabs:[{navSelector:"nav.tabs",contentSelector:"section.primary-body",initial:"summary"}],scrollY:[".tab.summary"]}}get template(){return this.actor.limited?"systems/pf1/templates/actors/limited-sheet.hbs":"systems/pf1/templates/actors/haunt-sheet.hbs"}async getData(){const t=this.document.isOwner,s={owner:t,limited:this.document.limited,editable:this.isEditable,cssClass:t?"editable":"locked",config:pf1.config,isGM:game.user.isGM,system:this.document.system,hasHD:!1};s.labels={cr:e.fromNumber(s.system.details.cr.total)};const a=s.system.details?.notes?.value??"";return s.notesHTML=a?await TextEditor.enrichHTML(a,{secrets:t,rollData:s.rollData,async:!0,relativeTo:this.actor}):null,s.actor=this.actor,s.token=this.token,s.items=this.document.items.map((e=>this._prepareItem(e))).sort(((e,t)=>(e.sort||0)-(t.sort||0))),this._prepareItems(s),s}_prepareItems(e){const[t]=e.items.reduce(((e,t)=>(t.img=t.img||Item.implementation.getDefaultArtwork(t),t.hasUses=t.uses&&t.uses.max>0,t.isCharged=["day","week","charges"].includes(foundry.utils.getProperty(t,"uses.per")),null==foundry.utils.getProperty(t,"uses.value")||foundry.utils.getProperty(t,"uses.value"),"attack"===t.type&&e[0].push(t),e)),[[]]),s=Object.values(pf1.config.sheetSections.combatlite).map((e=>({...e}))).sort(((e,t)=>e.sort-t.sort));for(const e of t){const t=s.find((t=>this._applySectionFilter(e,t)));t?(t.items??=[],t.items.push(e)):console.warn("Could not find a sheet section for",e.name)}e.attacks=s}}class ActorSheetPFTrap extends ActorSheetPFNPC{static get defaultOptions(){const e=super.defaultOptions;return{...e,classes:[...e.classes,"trap"],width:500,height:560,tabs:[{navSelector:"nav.tabs",contentSelector:"section.primary-body",initial:"summary"}],scrollY:[".tab.summary"]}}get template(){return this.actor.limited?"systems/pf1/templates/actors/limited-sheet.hbs":"systems/pf1/templates/actors/trap-sheet.hbs"}async getData(){const t=this.document.isOwner,s={owner:t,limited:this.document.limited,editable:this.isEditable,cssClass:t?"editable":"locked",config:pf1.config,isGM:game.user.isGM,system:this.document.system,hasHD:!1};s.labels={cr:e.fromNumber(s.system.details.cr.total)};const a=s.system.details?.notes?.value??"";return s.notesHTML=a?await TextEditor.enrichHTML(a,{secrets:t,rollData:s.rollData,async:!0,relativeTo:this.actor}):null,s.actor=this.actor,s.token=this.token,s.items=this.document.items.map((e=>this._prepareItem(e))).sort(((e,t)=>(e.sort||0)-(t.sort||0))),this._prepareItems(s),s}_prepareItems(e){const[t]=e.items.reduce(((e,t)=>(t.img=t.img||Item.implementation.getDefaultArtwork(t),t.hasUses=t.uses&&t.uses.max>0,t.isCharged=["day","week","charges"].includes(foundry.utils.getProperty(t,"uses.per")),null==foundry.utils.getProperty(t,"uses.value")||foundry.utils.getProperty(t,"uses.value"),"attack"===t.type&&e[0].push(t),e)),[[]]),s=Object.values(pf1.config.sheetSections.combatlite).map((e=>({...e}))).sort(((e,t)=>e.sort-t.sort));for(const e of t){const t=s.find((t=>this._applySectionFilter(e,t)));t?(t.items??=[],t.items.push(e)):console.warn("Could not find a sheet section for",e.name)}e.attacks=s}}class ActorSheetPFVehicle extends ActorSheetPF{static get defaultOptions(){const e=super.defaultOptions;return{...e,classes:[...e.classes,"vehicle"],width:680,height:680,tabs:[{navSelector:"nav.tabs",contentSelector:"section.primary-body",initial:"summary"}],scrollY:[".tab.summary"]}}get template(){return this.actor.limited?"systems/pf1/templates/actors/limited-sheet.hbs":"systems/pf1/templates/actors/vehicle-sheet.hbs"}async getData(){const e=this.document.isOwner,t={owner:e,system:this.actor.system,limited:this.document.limited,editable:this.isEditable,cssClass:e?"editable":"locked",config:pf1.config,isGM:game.user.isGM,labels:{currency:"PF1.Currency.Inline."+this.itemValueDenomination},isLootSheet:!0};t.system=foundry.utils.deepClone(this.document.system),t.vehicleSizes=Object.fromEntries(Object.entries(pf1.config.vehicles.size).map((([e,t])=>[e,t.label])));const s=t.system.details?.notes?.value??"";t.notesHTML=s?await TextEditor.enrichHTML(s,{secrets:e,rollData:t.rollData,async:!0,relativeTo:this.actor}):null,t.actor=this.actor,t.token=this.token,t.items=this.document.items.map((e=>this._prepareItem(e))).sort(((e,t)=>(e.sort||0)-(t.sort||0))),this._prepareItems(t);const a=this.actor.getTotalCurrency({inLowestDenomination:!0});t.hasCurrency=!0;const i=this.calculateTotalItemValue({inLowestDenomination:!0,recursive:!0})+a,n=this.calculateSellItemValue({inLowestDenomination:!0,recursive:!0})+a;return t.totalValue=pf1.utils.currency.split(i),t.sellValue=pf1.utils.currency.split(n),t.labels.totalValue=game.i18n.format("PF1.Containers.TotalValue",t.totalValue),t.labels.sellValue=game.i18n.format("PF1.Containers.SellValue",t.sellValue),t.encumbrance=this._computeEncumbrance(),t}_prepareItems(e){const[t]=e.items.reduce(((e,t)=>(t.img=t.img||Item.implementation.getDefaultArtwork(t),t.hasUses=t.uses&&t.uses.max>0,t.isCharged=["day","week","charges"].includes(foundry.utils.getProperty(t,"uses.per")),null==foundry.utils.getProperty(t,"uses.value")||foundry.utils.getProperty(t,"uses.value"),"attack"===t.type&&e[0].push(t),e)),[[]]),s=Object.values(pf1.config.sheetSections.combatlite).map((e=>({...e}))).sort(((e,t)=>e.sort-t.sort));for(const e of t){const t=s.find((t=>this._applySectionFilter(e,t)));t?(t.items??=[],t.items.push(e)):console.warn("Could not find a sheet section for",e.name)}e.attacks=s;const a=Object.values(pf1.config.sheetSections.inventory).map((e=>({...e}))).sort(((e,t)=>e.sort-t.sort));for(const e of a)e.interface={...e.interface,value:!0,actions:!1,noEquip:!0};const i=e.items.filter((e=>e.isPhysical));for(const e of i){const t=a.find((t=>this._applySectionFilter(e,t)));t&&(t.items??=[],t.items.push(e))}e.inventory=a}get itemValueDenomination(){return"gp"}_updateObject(e,t){t=foundry.utils.expandObject(t);const s=["maxSpeed","acceleration"];for(const e of s){const s=t.system.details[e];Number.isFinite(s)&&(t.system.details[e]=pf1.utils.convertDistanceBack(s)[0])}return super._updateObject(e,t)}}const A=Object.freeze(Object.defineProperty({__proto__:null,ActorRestDialog,ActorSheetPF,ActorSheetPFBasic,ActorSheetPFCharacter,ActorSheetPFHaunt,ActorSheetPFNPC,ActorSheetPFNPCLite,ActorSheetPFNPCLoot,ActorSheetPFTrap,ActorSheetPFVehicle},Symbol.toStringTag,{value:"Module"}));class SpeedEditor extends DocumentSheet{static get defaultOptions(){return{...super.defaultOptions,classes:["pf1","speed-editor"],template:"systems/pf1/templates/apps/speed-editor.hbs",width:320,submitOnChange:!0,submitOnClose:!0,closeOnSubmit:!1}}get id(){return this.object.uuid+"-movement-editor"}get title(){const e=this.document.actor;let t=`${game.i18n.localize("PF1.Movement.Label")}: ${this.document.name}`;return e&&(t+=" — "+e.name),t}static get movementKeys(){return["land","swim","fly","climb","burrow"]}async getData(){const e=this.document.system,t={system:e,speeds:{},units:game.i18n.localize("imperial"===pf1.utils.getDistanceSystem()?"PF1.Distance.ftShort":"PF1.Distance.mShort"),flyManeuverability:{clumsy:"PF1.Movement.FlyManeuverability.Quality.clumsy",poor:"PF1.Movement.FlyManeuverability.Quality.poor",average:"PF1.Movement.FlyManeuverability.Quality.average",good:"PF1.Movement.FlyManeuverability.Quality.good",perfect:"PF1.Movement.FlyManeuverability.Quality.perfect"}};return this.constructor.movementKeys.forEach((s=>{let a=e.speeds?.[s];a>0&&(a=pf1.utils.convertDistance(a)[0]),t.speeds[s]=a})),t.speeds.flyManeuverability=e.speeds.flyManeuverability||"average",t}async _updateObject(e,t){for(const[e,s]of Object.entries(t))Number.isNumeric(s)&&(t[e]=pf1.utils.convertDistanceBack(s)[0]);return super._updateObject(e,t)}}class Widget_CategorizedItemPicker extends Application{constructor(e,t,s,a){super(e),this.categories=t,this.selected=a,this.callback=s,this._hiddenElems={},e.classes?.length&&this.options.classes.push(...e.classes)}get template(){return"systems/pf1/templates/widgets/categorized-item-picker.hbs"}getData(e){const t=super.getData(e);t.categories=[],t.items=[];for(const e of this.categories){t.categories.push({key:e.key,label:e.label});for(const s of e.items)t.items.push(foundry.utils.mergeObject({category:e.key},s))}return t}activateListeners(e){e.find(".item").click(this._onClickItem.bind(this)),e.find(".category a").click(this._onClickCategory.bind(this)),this.selected?.category&&(e.find(`.category a[data-category="${this.selected.category}"]`).click(),this.selected?.item&&e.find(`.item[data-category="${this.selected.category}"][data-value="${this.selected.item}"]`).first().addClass("pre-select")),window.setTimeout((()=>{this._cancelCallback&&document.removeEventListener("click",this._cancelCallback),this._cancelCallback=this._onCancel.bind(this),document.addEventListener("click",this._cancelCallback)}),10)}static get defaultOptions(){const e=super.defaultOptions;return{...e,width:480,height:480,classes:[...e.classes,"pf1","categorized-item-picker"]}}_onClickItem(e){e.preventDefault();const t=e.currentTarget.dataset.value;this.callback(t),this.close()}_onClickCategory(e){e.preventDefault();const t=e.currentTarget,s=$(this.element);s.find(".item-picker-categories").children().removeClass("active"),$(t).closest(".category").addClass("active"),s.find(".item-picker-items").children().hide(),s.find(`.item-picker-items .item[data-category="${t.dataset.category}"]`).show()}_onCancel(e){e.preventDefault();let t=e.target;if(t!==this.element[0]){for(;t.parentNode;){if(t===this.element[0])return;t=t.parentNode}this.close()}}async close(...e){return document.removeEventListener("click",this._cancelCallback),super.close(...e)}}Hooks.on("renderWidget_CategorizedItemPicker",((e,t,s)=>{t.find(".pre-select")[0]?.scrollIntoView({block:"nearest"})}));class ItemSheetPF extends ItemSheet{constructor(...e){super(...e),this.options.classes.push("type-"+this.item.type),this.items=[],this._actionUpdates=[];const t=this._tabs.find((e=>"links"===e.group));"class"===this.item.type?t.active="classAssociations":["feat","consumable","attack","equipment"].includes(this.item.type)&&(t.active="charges")}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{width:620,classes:["pf1","sheet","item"],scrollY:[".tab",".buff-flags",".editor-content"],dragDrop:[{dragSelector:"li.action-part",dropSelector:".tab.details"},{dragSelector:".tab.changes li.change",dropSelector:null},{dragSelector:".tab.links .item-name",dropSelector:".tab.links .tab[data-group='links']"}],tabs:[{navSelector:"nav.tabs[data-group='primary']",contentSelector:"section.primary-body",initial:"description",group:"primary"},{navSelector:"nav.tabs[data-group='links']",contentSelector:"section.links-body",initial:"children",group:"links"},{navSelector:"nav.tabs[data-group='description']",contentSelector:"section.description-body",initial:"identified",group:"description"}]})}get template(){return`systems/pf1/templates/items/${this.item.type}.hbs`}get title(){const e=this.actor;return e?`${super.title} – ${e.name}`:super.title}async getData(){const e=game.settings.get("core","language"),t=this.item,s=t.system,a=t.actor,i=a?.system,n=t.defaultAction,o=n?.getRollData()??t.getRollData(),r={item:t,name:t.name,system:s,itemType:game.i18n.localize(CONFIG.Item.typeLabels[t.type]),rollData:o,config:pf1.config,owned:!!a,owner:t.isOwner,editable:this.isEditable,isGM:game.user.isGM,labels:t.getLabels({rollData:o}),canClassLink:pf1.config.classAssociations.includes(t.type)&&!!o.classes,inContainer:t.inContainer??!1,tag:this.item._source.system.tag};if(r.canClassLink){r.hasClassLink=!!t.system.class,r.classes={};for(const[e,t]of Object.entries(o.classes))r.classes[e]=t.name}if(r.items=t.items?.map((e=>e.toObject()))??[],"class"===t.type&&(r.hitDieSizes=r.config.hitDieSizes.reduce(((e,t)=>(e[t]=game.i18n.format("PF1.DieSize",{size:t}),e)),{}),r.isMythic="mythic"===this.item.subType,t.system.wealth)){const e={formula:t.system.wealth,item:this.item},s=Roll.defaultImplementation.safeRollSync(t.system.wealth,void 0,e,void 0,{maximize:!0})?.total,a=Roll.defaultImplementation.safeRollSync(t.system.wealth,void 0,e,void 0,{minimize:!0})?.total;s>0&&(e.wealth??={},e.wealth.average=(s+a)/2)}t.links.charges&&(r.inheritCharges=t.links.charges),r.isCharged=!["single","",void 0].includes(s.uses?.per),r.defaultChargeFormula=t.getDefaultChargeFormula(),r.limitedUsePeriods={...pf1.config.limitedUsePeriods},t.isPhysical||delete r.limitedUsePeriods.single,r.isRechargeable=pf1.config.limitedUsePeriodOrder.includes(s.uses?.per),r.isPhysical=void 0!==s.quantity,r.isNaturalAttack="natural"===s.subType,r.isSpell="spell"===t.type,r.isImplant="implant"===t.type,r.hasAction=t.hasAction,r.hasAttack=t.hasAttack,r.hasDamage=t.hasDamage,r.showBothDescriptions=r.isGM&&r.isPhysical,r.showUnidentifiedData=t.showUnidentifiedData,r.showIdentified=!t.showUnidentifiedData,r.showIdentifiedData=r.showIdentified,r.showIdentified&&(r.showBothDescriptions=!0),r.unchainedActionEconomy=game.settings.get("pf1","unchainedActionEconomy"),r.identify??={},r.identify.dc=0;const l=o.item.auraStrength;if(l&&(r.aura={strength:l,strengthLabel:pf1.config.auraStrengths[l],school:pf1.config.spellSchools[s.aura.school]||s.aura.school||game.i18n.localize("PF1.Unknown")},r.identify.dc=15+o.item.cl,r.identify.curse=r.identify.dc+10),"class"===t.type&&(r.casting={types:pf1.config.spellcasting.type,spells:pf1.config.spellcasting.spells,progression:{high:"PF1.High",med:"PF1.Medium",low:"PF1.Low"}},t.actor?r.hasSpellbook=Object.values(o.spells??{}).find((e=>!!e.class&&e.class===s.tag&&e.inUse)):r.hasSpellbook=!0),r.descriptionAttributes=[],r.isPhysical){r.descriptionAttributes.push({isNumber:!0,name:"system.quantity",label:game.i18n.localize("PF1.Quantity"),value:s.quantity||0,decimals:0,id:"data-quantity",constraints:{min:0,step:1}}),r.descriptionAttributes.push({isNumber:!0,name:"system.weight.value",label:game.i18n.localize("PF1.Weight"),value:s.weight.converted.total,fakeValue:!0,inputValue:s.weight.converted.value,decimals:2,tooltip:"weight",id:"data-weight-value",constraints:{min:0,step:.01}}),r.isGM?r.descriptionAttributes.push({isNumber:!0,name:"system.price",label:game.i18n.localize("PF1.Price"),value:t.getValue({sellValue:1}),decimals:2,tooltip:"price",id:"data-price",constraints:{min:0,step:.01}},{isNumber:!0,name:"system.unidentified.price",label:game.i18n.localize("PF1.UnidentifiedPriceShort"),value:t.getValue({sellValue:1,forceUnidentified:!0}),decimals:2,id:"data-unidentifiedPrice",constraints:{min:0,step:.01}}):r.showUnidentifiedData?r.descriptionAttributes.push({isNumber:!0,name:"system.unidentified.price",fakeName:!0,label:game.i18n.localize("PF1.Price"),value:t.getValue({sellValue:1}),decimals:2,tooltip:"price",id:"data-price",constraints:{min:0,step:.01}}):r.descriptionAttributes.push({isNumber:!0,name:"system.price",label:game.i18n.localize("PF1.Price"),value:t.getValue({sellValue:1}),decimals:2,tooltip:"price",id:"data-price",constraints:{min:0,step:.01}}),r.isImplant||(r.descriptionAttributes.push({isNumber:!0,isRange:!0,label:game.i18n.localize("PF1.HPShort"),value:{name:"system.hp.value",value:s.hp?.value||0,constraints:{step:1,max:s.hp?.max||0}},max:{name:"system.hp.max",value:s.hp?.max||0,constraints:{min:0,step:1}}}),r.descriptionAttributes.push({isNumber:!0,label:game.i18n.localize("PF1.Hardness"),name:"system.hardness",decimals:0,value:s.hardness||0,constraints:{min:0,step:1}}));let e=!1;t.inContainer&&("weapon"===t.type?e=!0:"equipment"===t.type?(["armor","shield","clothing"].includes(t.subType)||["wondrous","other"].includes(t.subType)&&"slotless"!==s.slot)&&(e=!0):r.isImplant&&(e=!0)),r.isImplant?r.descriptionAttributes.push({isBoolean:!0,name:"system.implanted",label:game.i18n.localize("PF1.Implanted"),value:s.implanted,disabled:e}):("loot"===t.type&&pf1.config.unequippableLoot.includes(this.item.subType)&&(e=!0),r.descriptionAttributes.push({isBoolean:!0,name:"system.equipped",label:game.i18n.localize("PF1.Equipped"),value:s.equipped,disabled:e})),r.descriptionAttributes.push({isBoolean:!0,name:"system.carried",label:game.i18n.localize("PF1.Carried"),value:s.carried||t.system.implanted||!1,disabled:t.inContainer||t.system.implanted||!1})}if((r.isPhysical||t.isQuasiPhysical)&&(r.isImplant||r.descriptionAttributes.push({isBoolean:!0,name:"system.broken",label:game.i18n.localize("PF1.Broken"),value:s.broken,disabled:r.isNaturalAttack}),r.isImplant||r.descriptionAttributes.push({isBoolean:!0,name:"system.masterwork",label:game.i18n.localize("PF1.Masterwork"),value:s.masterwork,disabled:r.isNaturalAttack})),r.isPhysical&&game.user.isGM&&r.descriptionAttributes.push({isBoolean:!0,name:"system.identified",label:game.i18n.localize("PF1.Identified"),value:s.identified??!0,disabled:!game.user.isGM}),"feat"===t.type&&(r.isClassFeature="classFeat"===s.subType,r.isTemplate="template"===s.subType),["class","feat","race"].includes(t.type))if(a){const e=foundry.utils.mergeObject(foundry.utils.deepClone(pf1.config.skills),i.skills??{});r.skills=Object.entries(e).reduce(((e,[s,a])=>{const i=pf1.config.skills[s]||a.name;return e[s]={name:i,classSkill:!0===t.system.classSkills?.[s]},e}),{})}else r.skills=Object.entries(pf1.config.skills).reduce(((e,[t,a])=>(e[t]={name:a,classSkill:!0===s.classSkills?.[t]},e)),{});"attack"===t.type&&(r.materialCategories=this._prepareMaterialsAndAddons("weapon","all",s.subType,s.material?.normal.value),r.alignmentTypes=this._prepareAlignments(s.alignments));const c="equipment"===this.item.type?this.item.system.armor?.material:this.item.system.material;if(c?.addon?.length&&(r.materialAddons=c.addon.reduce(((e,t)=>(e[t]=!0,e)),{})??{}),"weapon"===t.type){r.isRanged="ranged"===s.weaponSubtype||!0===s.properties.thr,r.weaponCategories={types:{},subTypes:{}};for(const[e,t]of Object.entries(pf1.config.weaponTypes))r.weaponCategories.types[e]=t._label;const e=s.subType;if(e in pf1.config.weaponTypes)for(const[t,s]of Object.entries(pf1.config.weaponTypes[e]))t.startsWith("_")||(r.weaponCategories.subTypes[t]=s);r.materialCategories=this._prepareMaterialsAndAddons(t.type,s.weaponSubtype,null,s.material?.normal.value),r.alignmentTypes=this._prepareAlignments(s.alignments)}if("equipment"===t.type){r.equipmentCategories={types:{},subTypes:{}};for(const[e,t]of Object.entries(pf1.config.equipmentTypes))r.equipmentCategories.types[e]=t._label;const e=s.subType;if(e in pf1.config.equipmentTypes)for(const[t,s]of Object.entries(pf1.config.equipmentTypes[e]))t.startsWith("_")||(r.equipmentCategories.subTypes[t]=s);r.equipmentSlots=pf1.config.equipmentSlots.wondrous,r.hasMultipleSlots=t.hasSlots,r.hasSubCategory=["armor","shield"].includes(e),["armor","shield"].includes(t.subType)&&(r.materialCategories=this._prepareMaterialsAndAddons(t.type,s.equipmentSubtype,s.subType,s.armor.material?.normal.value??""))}let u;if("implant"===t.type&&(r.subTypes=pf1.config.implantTypes,r.isCybertech="cybertech"===t.subType,r.isCybertech&&(r.slots=pf1.config.implantSlots.cybertech)),r.isSpell){let n=null;if(a){const e=s.spellbook;n=i?.attributes.spells?.spellbooks[e]}r.isSpontaneousLike=n?.spontaneous||n?.spellPoints?.useSystem||!1,r.isPreparedSpell=!r.isSpontaneousLike,r.usesSpellpoints=null!=n&&(n.spellPoints?.useSystem??!1),r.isAtWill=s.atWill,r.spellbooks=i?.attributes.spells.spellbooks??{},r.spellbookChoices=Object.fromEntries(Object.entries(r.spellbooks).filter((([e,{inUse:t}])=>t)).map((([e,{label:t}])=>[e,t])).sort((([t,s],[a,i])=>s.localeCompare(i,e)))),u=renderCachedTemplate("systems/pf1/templates/internal/spell-description.hbs",t.getDescriptionData({rollData:o}));const l={DF:1,MDF:2,FDF:3};s.components??={};const c=s.components.divineFocus;c===l.MDF&&(s.components.material=!0),c===l.FDF&&(s.components.focus=!0);const p={...s.components};if(r.components=p,n){"divine"===n.kind?(c===l.FDF&&(p.focus=!1),c===l.MDF&&(p.material=!1)):p.divineFocus=!1}r.materialCategories=this._prepareMaterialsAndAddons("spell","all",s.subType,s.material?.normal.value),r.alignmentTypes=this._prepareAlignments(s.alignments)}if("buff"===this.item.type&&(r.noDurationTiming=!s.duration.units||"turn"===s.duration.units),"class"===t.type){r.isMythicPath="mythic"===s.subType;for(const[e,t]of Object.entries(s.savingThrows))t.label=pf1.config.savingThrows[e];for(const[e,t]of Object.entries(s.fc))t.label=pf1.config.favouredClassBonuses[e];r.isBaselikeClass=pf1.config.favoredClassTypes.includes(s.subType),r.isRacialHD="racial"===s.subType,r.isNPCClass="npc"===s.subType,r.isPCClass=!r.isNPCClass&&!r.isRacialHD;const e=game.settings.get("pf1","healthConfig");if(r.healthConfig=e.getClassHD(this.item),a){const e=foundry.utils.mergeObject(foundry.utils.deepClone(pf1.config.skills),i.skills??{});r.skills=Object.entries(e).reduce(((e,[t,a])=>{const i=null!=pf1.config.skills[t]?pf1.config.skills[t]:a.name;return e[t]={name:i,classSkill:!0===s.classSkills?.[t]},e}),{})}else r.skills=Object.entries(pf1.config.skills).reduce(((e,[t,a])=>(e[t]={name:a,classSkill:!0===s.classSkills?.[t]},e)),{})}"consumable"===t.type&&(r.hasSpellType=["potion","scroll","wand","staff"].includes(t.subType)),r.canUseAmmo=!r.isNaturalAttack&&"spell"!==t.type,r.canUseAmmo&&t.system.ammo?.type&&(r.defaultAmmo=a?.items.get(t.getFlag("pf1","defaultAmmo")),r.defaultAmmo&&(r.invalidDefaultAmmo=r.defaultAmmo.system.extraType!==t.system.ammo.type));const p={armorProf:pf1.config.armorProficiencies,descriptors:pf1.config.spellDescriptors,languages:pf1.config.languages,weaponGroups:pf1.config.weaponGroups,weaponProf:pf1.config.weaponProficiencies};for(const[e,t]of Object.entries(p)){if(!s[e])continue;const a=foundry.utils.deepClone(s[e]);r[e]=a;let i=[];a.value&&(i=a.value instanceof Array?a.value:[a.value]),a.selected=i.reduce(((e,s)=>(e[s]=t[s],e)),{}),a.custom?.length&&a.custom.forEach(((e,t)=>a.selected["custom"+(t+1)]=e)),a.active=!foundry.utils.isEmpty(a.selected)}if(t.changes?.size){const e=getBuffTargets(a);let s=!1;r.changes=t.changes?.map((t=>{const a=e[t.target],i=pf1.config.bonusTypes[t.type],n={change:t,isValid:!!a,label:a?.label??t.target,isDeferred:t.isDeferred,isAdd:"add"===t.operator,isSet:"set"===t.operator,...t,isValidType:!!i,typeLabel:i||t.type,id:t.id};return n.priority||=0,0!=n.priority&&(s=!0),n}))??[],r.changePriority=s}if(s.contextNotes){r.contextNotes=s.contextNotes.map((e=>e.toObject()));const e=getBuffTargets(a,"contextNotes");r.contextNotes.forEach((t=>{const s=e[t.target];t.isValid=!!s,t.label=s?.label??t.target}))}if(r.conditions=t.effects.filter((e=>!e.disabled&&e.statuses.size)).map((e=>Array.from(e.statuses))).flat().map((e=>pf1.registry.conditions.get(e)?.name||e)),t.system.conditions?.all?.size&&(r.system.conditions.selected=t.system.conditions?.all?.map((e=>pf1.registry.conditions.get(e)?.name||e)),r.conditions=r.conditions.concat(Array.from(r.system.conditions.selected))),r.conditions=new Set(r.conditions.sort(((e,t)=>e.localeCompare(t)))),r.distanceUnits=foundry.utils.deepClone(pf1.config.distanceUnits),"spell"!==t.type)for(const e of["close","medium","long"])delete r.distanceUnits[e];if(s.attackNotes){const e=s.attackNotes;foundry.utils.setProperty(r,"notes.attack",e)}if(this._prepareItemFlags(r),r.actions=this.item.actions,r.distanceUnit=game.i18n.localize("imperial"===pf1.utils.getDistanceSystem()?"PF1.Distance.ftShort":"PF1.Distance.mShort"),"race"===t.type){r.speeds=[];for(const e of["land","fly","swim","climb","burrow"]){const s=t.system.speeds?.[e]??0;if(0==s)continue;let a;if("fly"===e){a="PF1.Movement.FlyManeuverability.Quality."+(t.system.speeds.flyManeuverability||"average")}r.speeds.push({value:pf1.utils.convertDistance(s)[0],mode:e,label:"PF1.Movement.Mode."+e,descriptor:a})}}r.showIdentifiedData&&this._prepareContentSource(r);const m=r.showIdentified?this.item.getDescription({rollData:o,header:!1}):null;r.descriptionHTML={identified:null,unidentified:null};const d={secrets:r.owner,rollData:o,async:!0,relativeTo:this.actor},h=m?enrichHTMLUnrolledAsync(m,d):Promise.resolve();h.then((e=>r.descriptionHTML.identified=e));const g=s.description?.unidentified,f=g?enrichHTMLUnrolledAsync(g,d):Promise.resolve();f.then((e=>r.descriptionHTML.unidentified=e));const y=u?TextEditor.enrichHTML(u,{rollData:o,async:!0,relativeTo:this.actor}):Promise.resolve();y.then((e=>r.topDescription=e));const b=this._prepareScriptCalls(r),v=this._prepareLinks(r);return await Promise.all([h,f,y,b,v]),r}_prepareContentSource(e){const t=this._getContentSources();if(0==t.length)return;const s=this._selectContentSource(t);e.bookSources={all:t,main:s},t.length>1&&(e.bookSources.extras=t.filter((e=>e!==s)))}_selectContentSource(e){return 0===e?.length?null:(e.sort(((e,t)=>t.datestamp-e.datestamp)),e[0])}_getContentSources(){return(this.item.system.sources??[]).map((e=>{const t=pf1.registry.sources.get(e?.id)??{},{publisher:s,date:a,abbr:i,name:n,edition:o}=t;return{publisher:s,date:a,abbr:i,name:n,edition:o,...e,title:e.title||t.name,registry:t,datestamp:Date.parse(e.date||t.date)}}))}_prepareMaterialsAndAddons(e,t,s,a=""){const i={},n=[],o={};return pf1.registry.materialTypes.forEach((r=>{this._isMaterialAllowed(e,t,s,r)&&(i[r.id]=r.name),r.addon&&!("alchemicalsilver"===r.id&&["adamantine","coldiron","mithral"].includes(a)||["heatstoneplating","lazurite","sunsilk"].includes(r.id)&&"weapon"===e)&&n.push({key:r.id,name:r.name}),r.basic&&(o[r.id]=r.name)})),{materials:i,addons:n,basics:o}}_prepareAlignments(e){const t={};return Object.keys(pf1.config.damageResistances).forEach((e=>{["magic","epic"].includes(e)||(t[e]=pf1.config.damageResistances[e])})),{choices:t,values:foundry.utils.deepClone(e)}}_isMaterialAllowed(e,t,s,a){if(a.addon||a.basic)return!1;switch(e){case"weapon":switch(t){case"light":return a.allowed.lightBlade;case"1h":return a.allowed.oneHandBlade;case"2h":return a.allowed.twoHandBlade;case"ranged":return a.allowed.rangedWeapon;case"all":return!0;default:return!1}case"equipment":return"shield"===s?a.allowed.buckler:a.allowed[t]}return!0}_prepareLinks(e){e.links={list:[]},["feat","consumable","attack","equipment"].includes(this.item.type)&&e.links.list.push({id:"charges",label:game.i18n.localize("PF1.LinkTypeCharges"),help:game.i18n.localize("PF1.LinkHelpCharges"),items:[]}),"class"===this.item.type&&e.links.list.push({id:"classAssociations",label:game.i18n.localize("PF1.LinkTypeClassAssociations"),help:game.i18n.localize("PF1.LinkHelpClassAssociations"),fields:{level:{type:"Number",label:game.i18n.localize("PF1.Level")}},items:[]}),e.links.list.push({id:"children",label:game.i18n.localize("PF1.LinkTypeChildren"),help:game.i18n.localize("PF1.LinkHelpChildren"),items:[]}),e.links.list.push({id:"supplements",label:game.i18n.localize("PF1.LinkTypeSupplements"),help:game.i18n.localize("PF1.LinkHelpSupplements"),fields:{},items:[]});const t=this.item,s=t.actor;for(const a of e.links.list){const e=t.system.links?.[a.id]||[];for(let t=0;t<e.length;t++){const i=foundry.utils.deepClone(e[t]);i.index=t;const n=fromUuidSync(i.uuid,{relative:s});n||(i.broken=!0),i.img=n?.img||Item.implementation.getDefaultArtwork(n),i.name||=n?.name,a.items.push(i)}}}_prepareItemFlags(e){const t=e.system.flags??{};e.flags??={},e.flags.boolean=t.boolean??{},e.flags.dictionary=t.dictionary??{}}async _prepareScriptCalls(e){e.scriptCalls=null;const t=pf1.registry.scriptCalls.filter((e=>!!e.itemTypes.includes(this.item.type)&&!(!0===e.hidden&&!game.user.isGM)));if(!t.length)return;e.scriptCalls={};const s=this.item.scriptCalls??[];for(const{id:a,name:i,info:n}of t)e.scriptCalls[a]={name:i,tooltip:n,items:s.filter((e=>e.category===a&&!e.hide)),dataset:{category:a}}}async _updateObject(e,t){const s=(t=foundry.utils.expandObject(t)).system,a=s.links;if(a){const e=this.item.system?.links??{};for(const[t,s]of Object.entries(a))if(!Array.isArray(s)){a[t]=foundry.utils.deepClone(e[t]??[]);for(const[e,i]of Object.entries(s))a[t][e]=foundry.utils.mergeObject(a[t][e]??{},i)}}if(s.weight){if(void 0!==s.weight?.value){const e=this.item.getWeightMultiplier();s.weight.value=pf1.utils.convertWeightBack(s.weight.value/e)}void 0!==s.weight.reduction?.value&&(s.weight.reduction.value=pf1.utils.convertWeightBack(s.weight.reduction.value))}const i=["currency.pp","currency.gp","currency.sp","currency.cp"];for(const t of i){const a=foundry.utils.getProperty(s,t);if("string"!=typeof a)continue;let i;if(a.match(/(\+|-)(\d+)/)){const e=RegExp.$1;let s=parseInt(RegExp.$2);"-"===e&&(s=-s);i=foundry.utils.getProperty(this.item.system,t)+s}else a.match(/^[0-9]+$/)?i=parseInt(a):""===a?i=0:(i=0,e.target.name==="system."+t&&e.target.setCustomValidity(game.i18n.localize("PF1.Warning.InvalidInput")));foundry.utils.setProperty(s,t,Math.max(0,i))}const n="equipment"===this.item.type?s.armor?.material:s.material;return n?.addon&&(n.addon=Object.entries(n.addon).filter((([e,t])=>t)).map((([e])=>e))),super._updateObject(e,t)}_onHoverTooltip(e){const t=[];switch(e.target.dataset.tooltipType){case"weight":this._onHoverWeightTooltip(e,t);break;case"price":this._onHoverPriceTooltip(e,t)}return t.join("<br>")}_onHoverWeightTooltip(e,t){const s=game.i18n.localize("metric"===pf1.utils.getWeightSystem()?"PF1.Kgs":"PF1.Lbs"),a=`${this.item.system.weight.converted.value} ${s}`;t.push(game.i18n.format("PF1.StackDetails.Base",{value:a}))}_onHoverPriceTooltip(e,t){const s=this.item.getValue({sellValue:1,single:!0,inLowestDenomination:!0}),a=pf1.utils.currency.split(s),i=[];Object.entries(a).forEach((([e,t])=>{t>0&&i.push(game.i18n.format("PF1.Currency.Inline."+e,{value:t}))})),t.push(game.i18n.format("PF1.StackDetails.Base",{value:i.join(", ")}))}async _validateFormula(e){const t=e.value;if(!t)return;let s;try{s=Roll.create(t||"0"),await s.evaluate()}catch(t){return e.dataset.tooltip=t.message,e.classList.add("invalid"),void e.setCustomValidity(t.message)}e.classList.contains("roll")||s.isDeterministic||(e.dataset.tooltip="PF1.Warning.FormulaMustBeDeterministic",e.classList.add("invalid"),e.setCustomValidity(game.i18n.localize("PF1.Warning.FormulaMustBeDeterministic")))}activateListeners(e){super.activateListeners(e);const t=!!this.actor;if(this.item.isPhysical&&e.find(".details-tooptip").each(((e,t)=>{t.addEventListener("pointermove",(e=>{const s=this._onHoverTooltip(e);s&&game.tooltip.activate(t,{text:s,direction:TooltipManager.TOOLTIP_DIRECTIONS.RIGHT,cssClass:"pf1"})}),{passive:!0}),t.addEventListener("pointerleave",(e=>game.tooltip.deactivate()),{passive:!0})})),e.mousemove((e=>this._moveTooltips(e))),e.find(".actions .item-list .item .item-name").on("contextmenu",this._onActionEdit.bind(this)).on("click",this._onActionSummary.bind(this)),e.find(".actions .action-controls a").on("click",this._onActionControl.bind(this)),e.find("a.help-browser[data-url]").click(this._openHelpBrowser.bind(this)),e.find(".entry-selector").click(this._onEntrySelector.bind(this)),e.find(".trait-selector").click(this._onTraitSelector.bind(this)),e.find(".content-source .control a.edit").click((()=>pf1.applications.ContentSourceEditor.open(this.item,{editable:this.isEditable}))),t&&!0!==this.item.system.proficient&&["weapon","equipment","attack"].includes(this.item.type)&&this.item.isProficient){const t=e.find("input[name='system.proficient']")[0];t&&(t.indeterminate=!0)}if(this.item.isPhysical&&this.item.isBroken&&!0!==this.item.system.broken){const t=e.find("input[name='system.broken']")[0];t&&(t.indeterminate=!0,t.dataset.tooltip="PF1.AutoBroken")}e.find(".script-calls .item-list .item").contextmenu(this._onScriptCallEdit.bind(this)),e.find(".script-calls .item-control").click(this._onScriptCallControl.bind(this)),e.find("input.formula").each((async(e,t)=>this._validateFormula(t))),e.find(".tab[data-tab='links'] .links-item .item-name .source-item").on("click",this._openLinkedItem.bind(this)),this.isEditable?(e.find("textarea, .notes input[type='text']").on("drop",this._onTextAreaDrop.bind(this)),e.find(".tab.changes .controls a.add-change").click(this._onCreateChange.bind(this)),e[0].querySelectorAll(".tab.changes .changes .controls a.menu").forEach((e=>e.addEventListener("pointerenter",this._onOpenChangeMenu.bind(this),{passive:!0}))),e.find(".context-note-control").click(this._onNoteControl.bind(this)),e.find(".context-note .context-note-target").click(this._onNoteTargetControl.bind(this)),["weapon"].includes(this.item.type)&&e.find("button[name='create-attack']").click(this._createAttack.bind(this)),"class"===this.item.type&&e.find("button[name='create-spellbook']").click(this._createSpellbook.bind(this)),e.find(".card-notes .controls a").click(this._onCardNoteControl.bind(this)),e.find(".item-selector").click(this._onItemSelector.bind(this)),e.find(".link-control").click(this._onLinkControl.bind(this)),e.find('*[data-action="input-text"]').click((e=>this._onInputText(e))),e.find(".select-on-click").click(this._selectOnClick.bind(this)),e.find(".speed-editor").click(this._onSpeedEdit.bind(this)),e.find(".action-parts .item-uses span.text-box.value").on("wheel",this._setActionUses.bind(this)).on("click",(e=>{this._onSpanTextInput(e,this._setActionUses.bind(this))})),e.find(".item-link[data-item-id]").on("contextmenu",(e=>{e.preventDefault();const t=e.currentTarget.dataset.itemId,s=this.actor.items.get(t);s?.sheet.render(!0,{focus:!0})})),e.find('a[data-action="compendium"]').click(this._onOpenCompendium.bind(this)),e.find(".script-calls .item-list[data-category]").on("drop",this._onScriptCallDrop.bind(this))):e.find("span.text-box").addClass("readonly")}_onSpanTextInput(e,t=null){const s=e.currentTarget,a=s.parentElement,i=document.createElement("INPUT");i.type="text",s.dataset?.dtype&&(i.dataset.dtype=s.dataset.dtype);let n=s.innerText;s.classList.contains("placeholder")&&(n="");const o=s.classList.contains("no-value-cap"),r=s.getAttribute("name");let l;if(r&&(i.setAttribute("name",r),n=foundry.utils.getProperty(this.item,r)??"","string"!=typeof n&&(n=n.toString()),r.endsWith(".value")&&!o)){const e=r.replace(/\.value$/,".max");l=foundry.utils.getProperty(this.item,e)}i.value=n;const c=["placeholder","direct","allow-relative"];for(const e of s.classList)c.includes(e)||i.classList.add(e);const u=s.classList.contains("allow-relative"),p=parseFloat(s.dataset.clearValue||"0");a.replaceChild(i,s);let m=!1;i.addEventListener("keypress",(e=>{if("Enter"===e.key){if(m=!0,u){const e=adjustNumberByStringCommand(parseFloat(n),i.value,l,p);i.value=e}i.value.toString()===n.toString()?this.render():"function"==typeof t&&t.call(this,e)}})),i.addEventListener("focusout",(e=>{if(!m){if(m=!0,u&&parseFloat(n)!==parseFloat(i.value)){const e=adjustNumberByStringCommand(parseFloat(n),i.value,l,p);i.value=e}i.value.toString()===n.toString()?this.render():"function"==typeof t&&t.call(this,e)}})),i.focus(),i.select()}_mouseWheelAdd(e,t){const s="INPUT"===t.tagName,{originalEvent:a}=e;if(a&&a instanceof WheelEvent&&a.ctrlKey){e.preventDefault();const i=parseFloat(s?t.value:t.innerText)||0;if(Number.isNaN(i))return;const n=-Math.sign(a.deltaY),o=parseFloat(t.dataset.wheelStep)||1;s?t.value=i+o*n:t.innerText=""+(i+o*n)}}_setActionUses(e){e.originalEvent instanceof MouseEvent||e.preventDefault();const t=e.currentTarget,s=t.closest(".item[data-action-id]").dataset.actionId,a=this.item.actions.get(s);this._mouseWheelAdd(e,t);const i="INPUT"===t.tagName?Number(t.value):Number(t.innerText);this.setActionUpdate(a.id,"uses.self.value",i),e.originalEvent instanceof MouseEvent?t.addEventListener("pointerleave",(()=>this._updateActions()),{passive:!0,once:!0}):this._updateActions()}setActionUpdate(e,t,s){let a=this._actionUpdates.find((t=>t._id===e));a||(a={_id:e},this._actionUpdates.push(a)),a[t]=s}async _updateActions(){const e=this._actionUpdates;this._actionUpdates=[];for(const t of e){const e=this.item.actions.get(t._id);e?await e.update(t):console.error("Item update for non-existing item:",t._id,t)}}_onOpenCompendium(e){e.preventDefault();const t=e.currentTarget.dataset.actionTarget;pf1.applications.compendiums[t].render(!0,{focus:!0})}async _onScriptCallControl(e){e.preventDefault();const t=e.currentTarget,s=this.item.scriptCalls?this.item.scriptCalls.get(t.closest(".item")?.dataset.itemId):null,a=t.closest(".item-list").dataset.category;if(t.classList.contains("item-create")){await this._onSubmit(e,{preventRender:!0});const t=await pf1.components.ItemScriptCall.create([{category:a,type:"script"}],{parent:this.item});t?.forEach((e=>e.edit()))}else{if(s&&t.classList.contains("item-delete")){const t={"system.scriptCalls":(this.item.system.scriptCalls||[]).filter((e=>e._id!==s.id))};return this._updateObject(e,this._getSubmitData(t))}s&&t.classList.contains("item-edit")?s.edit():s&&t.classList.contains("item-hide")&&(await this._onSubmit(e,{preventRender:!0}),s.update({hidden:!s.hidden}))}}_onScriptCallEdit(e){e.preventDefault();const t=e.currentTarget,s=this.item.scriptCalls?.get(t.dataset.itemId);s?.edit({editable:this.isEditable})}_moveTooltips(e){let t=e.target;if(t.matches(".tooltip")||(t=t.closest(".tooltip")),t){const s=t.querySelector(".tooltipcontent");if(s){const t=e.clientX,a=e.clientY+24;s.style.cssText+=`left:${t}px;top:${a}px;`}}}async _onTextAreaDrop(e){e.preventDefault();const t=TextEditor.getDragEventData(e.originalEvent);if(!t)return;const s=e.currentTarget,a=await TextEditor.getContentLink(t,{relativeTo:this.actor});return a?(s.value=s.value?s.value+"\n"+a:a,this._onSubmit(e)):void 0}async _onScriptCallDrop(e){e.preventDefault();const t=TextEditor.getDragEventData(e.originalEvent);if(!t)return;const{uuid:s,type:a}=t;if("Macro"===a&&s){await this._onSubmit(e,{preventRender:!0});const t=e.currentTarget.dataset.category;return this.item.system.scriptCalls,pf1.components.ItemScriptCall.create([{type:"macro",value:s,category:t,name:"",img:""}],{parent:this.item})}}_openHelpBrowser(e){e.preventDefault();const t=e.currentTarget;pf1.applications.helpBrowser.openUrl(t.dataset.url)}_canDragStart(e){return!0}_onDragStart(e){const t=e.target,s=t.dataset.actionId;if(s){const t=this.item.actions.get(s),a={type:"action",uuid:this.item.uuid,actionId:t.id,data:t.data};return void e.dataTransfer.setData("text/plain",JSON.stringify(a))}const a=t.dataset.changeId;if(a){const t={type:"pf1Change",data:this.item.changes.get(a).data,changeId:a,uuid:this.item.uuid};e.dataTransfer.setData("text/plain",JSON.stringify(t))}else if(t.matches(".links-item .item-name")){const s=t.closest("[data-uuid]"),a=s.closest("[data-tab]")?.dataset.tab;let i=s.dataset.uuid;"children"===a&&(i=fromUuidSync(i,{relative:this.actor})?.uuid);const n=Number(s.dataset.index),o=this.item.system.links?.[a]?.[n],r={type:"Item",uuid:i,pf1Link:{}};return o&&(r.pf1Link.level=o.level),void e.dataTransfer.setData("text/plain",JSON.stringify(r))}}_canDragDrop(){return this.isEditable}async _onDrop(e){if(e.preventDefault(),e.stopPropagation(),!this.isEditable)return;const t=TextEditor.getDragEventData(e),{type:s,uuid:a}=t,i=this.item,n=a?fromUuidSync(a):null;switch(s){case"action":{const s=t.actionId;if(n===i){const t=e.target?.closest(".item[data-action-id]")?.dataset?.actionId,a=foundry.utils.deepClone(i.toObject().system.actions);let n;n=t?a.indexOf(a.find((e=>e._id===t))):a.length-1;const o=a.indexOf(a.find((e=>e._id===s))),[r]=a.splice(o,1);a.splice(n,0,r),await this.object.update({"system.actions":a})}else{const e=foundry.utils.deepClone(i.toObject().system.actions??[]);t.data._id=foundry.utils.randomID(16),e.splice(e.length,0,t.data),await this.object.update({"system.actions":e})}break}case"pf1Change":{const s=t.data;if(n!==i)return delete s._id,this.activateTab("changes","primary"),pf1.components.ItemChange.create([s],{parent:i});{const t=e.target.matches("li.change")?e.target:e.target.closest("li.change");if(!t)return;const a=t.dataset.changeId;if(s._id===a);else{const e=i.toObject().system.changes??[],t=e.findSplice((e=>e._id===s._id));if(!t)return;const n=e.findIndex((e=>e._id===a));if(n>=0)return e.splice(n,0,t),i.update({"system.changes":e})}}break}case"Item":e.target.closest(".tab.links .tab[data-group='links']")&&this._onLinksDrop(e,t);break}}async _onLinksDrop(e,t){let s=e.target.closest("[data-tab]").dataset.tab;if("links"===s&&(s="children"),!t.type)throw Error("Invalid drop data received");const a=await fromUuid(t.uuid);if(!(a&&a instanceof Item))throw Error("UUID did not resolve to valid item: "+t.uuid);let i,n=t.uuid;a.pack?i="compendium":a.actor===this.item.actor?(i="data",n=a.getRelativeUUID(this.actor)):i="world";const o={};switch(s){case"classAssociations":{const e=t.pf1Link?.level;Number.isNumeric(e)&&(o.level=e);break}}await this.item.createItemLink(s,i,a,n,o)}_onTraitSelector(e){e.preventDefault();const t=e.currentTarget,s={name:t.dataset.for,title:game.i18n.localize(t.dataset.title),subject:t.dataset.options,choices:pf1.config[t.dataset.options]};if("conditions"===t.dataset.options)s.choices=pf1.registry.conditions.getLabels();new ActorTraitSelector(this.item,s).render(!0)}_onSpeedEdit(e){e.preventDefault();let t=Object.values(ui.windows).find((e=>e instanceof SpeedEditor&&e.document===this.item));t??=new SpeedEditor(this.item),t.render(!0,{focus:!0})}async _onActionSummary(e){e.preventDefault();const t=e.target.closest(".item[data-action-id]"),s=this.item.actions.get(t.dataset.actionId),a=s.getRollData(),{actionDescription:i,properties:n}=await s.getChatData({chatcard:!1,rollData:a});if(t.classList.contains("expanded")){const e=t.querySelector(".item-summary");$(e).slideUp(200,(()=>e.remove()))}else{const e={description:i||game.i18n.localize("PF1.NoDescription"),properties:n};let s=await renderTemplate("systems/pf1/templates/actors/parts/actor-item-summary.hbs",e);s=await TextEditor.enrichHTML(s,{rollData:a,async:!0,secrets:this.item.isOwner});const o=$(s);o.hide(),t.append(...o),o.slideDown(200)}t.classList.toggle("expanded")}async _openLinkedItem(e){e.preventDefault();const t=e.target.closest(".links-item[data-uuid],.links-item[data-item-id]"),{uuid:s}=t.dataset;(await fromUuid(s,{relative:this.actor})).sheet.render(!0,{focus:!0})}async _onActionControl(e){e.preventDefault(),e.stopPropagation();const t=e.currentTarget,getUniqueActionName=e=>{let t=e=e.replace(/\s*\(\d+\)$/,"");const s=new Set(this.item.actions?.map((e=>e.name))??[]);let a=1;for(;s.has(t);)t=`${e} (${a++})`;return t};if(t.classList.contains("edit-action"))return this._onActionEdit(e);if(t.classList.contains("add-action")){await this._onSubmit(e,{preventRender:!0});const t={name:getUniqueActionName(["weapon","attack"].includes(this.item.type)?game.i18n.localize("PF1.Attack"):game.i18n.localize("PF1.Use"))};(await pf1.components.ItemAction.create([t],{parent:this.item})).forEach((e=>e.sheet.render(!0)))}else if(t.classList.contains("delete-action")){const s=t.closest(".item[data-action-id]"),a=this.item.actions.get(s.dataset.actionId);!0===(!!getSkipActionPrompt()||await Dialog.confirm({title:game.i18n.format("PF1.DeleteItemTitle",{name:a.name}),content:`<p>${game.i18n.localize("PF1.DeleteItemConfirmation")}</p>`,yes:()=>!0,no:()=>!1,close:()=>!1,rejectClose:!1}))&&(await this._onSubmit(e,{preventRender:!0}),a.delete())}else if(t.classList.contains("duplicate-action")){const s=t.closest(".item[data-action-id]"),a=this.item.toObject().system.actions??[],i=foundry.utils.deepClone(a.find((e=>e._id===s.dataset.actionId))??{});i.name=getUniqueActionName(i.name),i._id=foundry.utils.randomID(16),a.push(i);const n={"system.actions":a};await this._updateObject(e,this._getSubmitData(n)),this.item.actions.get(i._id)?.sheet.render(!0)}}async _onActionEdit(e){e.preventDefault(),e.stopPropagation();const t=e.target.closest(".item[data-action-id]");this.item.actions.get(t.dataset.actionId).sheet.render(!0)}async _onOpenChangeMenu(e){const t=e.target,s=t.dataset.changeId;if(!s)return;const a=document.createElement("div");a.innerHTML=await renderTemplate("systems/pf1/templates/items/parts/item-change-tooltip.hbs",{changeId:s}),a.querySelector(".duplicate").addEventListener("click",(e=>this._onDuplicateChange(e,t))),a.querySelector(".delete").addEventListener("click",(e=>this._onDeleteChange(e,t))),a.querySelector(".edit").addEventListener("click",(e=>this._onEditChange(e,t))),await game.tooltip.activate(t,{content:a,locked:!0,direction:TooltipManager.TOOLTIP_DIRECTIONS.LEFT,cssClass:"pf1 change-menu"})}_onEditChange(e){e.preventDefault();const t=e.target,s=t.dataset.changeId,a=this.item.changes.get(s);if(a)return game.tooltip.dismissLockedTooltip(t.closest(".locked-tooltip")),void pf1.applications.ChangeEditor.wait(a)}_onDuplicateChange(e){e.preventDefault();const t=e.target,s=t.dataset.changeId;if(!s)return;const a=(this.item.toObject().system.changes??[]).find((e=>e._id===s));return a?(game.tooltip.dismissLockedTooltip(t.closest(".locked-tooltip")),delete a._id,pf1.components.ItemChange.create([a],{parent:this.item})):void 0}_onDeleteChange(e){e.preventDefault();const t=e.target,s=t.dataset.changeId;game.tooltip.dismissLockedTooltip(t.closest(".locked-tooltip")),this.item.changes.get(s)?.delete()}async _onCreateChange(e){e.preventDefault();const[t]=await pf1.components.ItemChange.create([{modifier:"untyped"}],{parent:this.item});t&&pf1.applications.ChangeEditor.wait(t)}async _onNoteControl(e){e.preventDefault();const t=e.currentTarget;if(t.classList.contains("add-note")){const t=this.item.toObject().system.contextNotes||[];t.push((new pf1.components.ContextNote).toObject());const s={"system.contextNotes":t};return this._updateObject(e,this._getSubmitData(s))}if(t.classList.contains("delete-note")){const s=t.closest(".context-note"),a=this.item.toObject().system.contextNotes||[];a.splice(Number(s.dataset.note),1);const i={"system.contextNotes":a};return this._updateObject(e,this._getSubmitData(i))}}_onNoteTargetControl(e){e.preventDefault();const t=e.currentTarget.closest(".context-note"),s=Number(t.dataset.note),a=this.item.system.contextNotes[s],i=getBuffTargetDictionary(this.item.actor,"contextNotes"),n=new Set(["skill"]),o=game.settings.get("core","language");for(const e of i)n.has(e.key)&&e.items.sort(((e,t)=>e.label.localeCompare(t.label,o)));const r=a?.target?.split(".")[0],l=pf1.config.contextNoteTargets[r]?.category??r;new Widget_CategorizedItemPicker({title:"PF1.Application.ContextNoteTargetSelector.Title"},i,(e=>{if(e){const t={};t[`system.contextNotes.${s}.target`]=e,this.item.update(t)}}),{category:l,item:a?.target}).render(!0)}async _onLinkControl(e){e.preventDefault();const t=e.currentTarget;if(t.classList.contains("delete-link")){const{type:s,uuid:a,index:i}=t.dataset,n=this.item.toObject().system.links?.[s]??[],o=n.splice(Number(i),1);if(o.uuid&&o.uuid!==a)throw Error("Link deletion UUID mismatch");Hooks.callAll("pf1DeleteItemLink",this.item,o,s);const r={"system.links":{[s]:n}};return this._updateObject(e,this._getSubmitData(r))}}_onInputText(e){e.preventDefault();const t=e.target;t.readOnly=!1;const{inputValue:s}=t.dataset;let a=s??foundry.utils.getProperty(this.item,t.name);const i=t.value;t.value=a,t.select(),t.addEventListener("blur",(()=>{"number"==typeof a&&(a=a.toString()),a===t.value&&(t.readOnly=!0,t.value=i);const e=document.getSelection();e.anchorNode!==t&&e.anchorNode!==t.parentElement||e.removeAllRanges()}),{once:!0,passive:!0})}async _createAttack(e){if(!this.actor)throw Error(game.i18n.localize("PF1.Error.ItemNoOwner"));await this._onSubmit(e,{preventRender:!0});const t=this.item,s=pf1.documents.item.ItemAttackPF.fromItem(t);s.system.showInQuickbar=t.system.showInQuickbar;const a=await Item.implementation.create(s,{parent:this.actor});if(!a)throw Error("Failed to create attack from weapon");await t.update({"system.showInQuickbar":!1}),await t.createItemLink("children","data",a,a.getRelativeUUID(this.actor)),ui.notifications.info(game.i18n.format("PF1.NotificationCreatedAttack",{item:t.name}))}async _createSpellbook(e){if(e.preventDefault(),null==this.item.actor)throw Error(game.i18n.localize("PF1.Error.ItemNoOwner"));await this._onSubmit(e,{preventRender:!0}),await this.item.actor.createSpellbook({...this.item.system.casting,class:this.item.system.tag}),this.render()}_onEntrySelector(e){e.preventDefault();const t=e.currentTarget,s={name:t.dataset.for,title:t.dataset.title,flag:"true"===t.dataset.flag,boolean:"true"===t.dataset.boolean,flat:"true"===t.dataset.flat,fields:t.dataset.fields,dtypes:t.dataset.dtypes};pf1.applications.EntrySelector.open(this.item,s)}async _onItemSelector(e){if(e.preventDefault(),!this.item.isOwner)return void ui.notifications.warn("PF1.Error.NoItemPermission",{localize:!0});if(!this.actor)throw Error("No actor to find items from.");const{type:t,subType:s,kind:a,empty:i,selected:n,label:o,name:r}=e.currentTarget.dataset,l={actor:this.actor,empty:"true"===i||"false"!==i,filter:e=>(!t||e.type===t)&&((!s||e.subType===s)&&("ammo"!==s||!a||e.system.extraType===a)),selected:n},c={title:`${game.i18n.format("PF1.SelectSpecific",{specifier:game.i18n.localize(o)})} - ${this.actor.name}`,id:this.item.uuid+"-item-selector"},u=await pf1.applications.ItemSelector.wait(l,c);null!==u&&this.item.update({[r]:u})}async _onCardNoteControl(e){e.preventDefault();const t=e.currentTarget,s=t.dataset.name,a=t.dataset.action,i=foundry.utils.getProperty(this.item.toObject(),s)??[];switch(a){case"add":{i.push("");const t={[s]:i};return this._updateObject(e,this._getSubmitData(t))}case"delete":{i.splice(Number(t.dataset.index),1);const a={[s]:i};return this._updateObject(e,this._getSubmitData(a))}}}_selectOnClick(e){e.preventDefault();e.currentTarget.select()}}class ItemSheetPF_Container extends ItemSheetPF{constructor(...e){super(...e),this._expandedItems=[],this._filters={search:{container:""}},this.searchCompositioning=!1,this.searchRefresh=!0,this.searchDelay=250,this.searchDelayEvent=null,this.effectiveSearch="",this._itemUpdates=[],this.options.tabs[0].initial="contents",this._tabs[0].active="contents"}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{width:800,classes:["pf1","sheet","item"],scrollY:[".item-groups-list"],dragDrop:[{dragSelector:"li.item[data-item-id]",dropSelector:'.tab[data-tab="contents"]'},{dragSelector:"label.denomination"}]})}get template(){return"systems/pf1/templates/items/container.hbs"}async getData(){const e=await super.getData();e.units={weight:"metric"===pf1.utils.getWeightSystem()?game.i18n.localize("PF1.Kgs"):game.i18n.localize("PF1.Lbs")},e.filters=this._filters,e.items=this.item.items.reduce(((e,t)=>{const s=t.system,a={...t};return a.id=t.id,e.push(a),a.type=t.type,a.subType=t.subType,a.document=t,a.labels=t.getLabels(),a.hasAttack=t.hasAttack,a.hasDamage=t.hasDamage,a.hasAction=t.hasAction||t.isCharged,a.showUnidentifiedData=t.showUnidentifiedData,t.isPhysical&&(a.quantity=s.quantity||0,a.isStack=a.quantity>1,a.destroyed=s.hp?.value<=0,a.isEmpty=a.quantity<=0,a.isBroken=t.isBroken),a.isEmpty||!t.isCharged||s.isSingleUse||t.charges<=0&&(a.isEmpty=!0),a.disabled=a.destroyed||!1,e}),[]),e.items.sort(((e,t)=>(e.sort||0)-(t.sort||0))),e.hasCurrency=Object.values(this.object.system.currency).some((e=>e>0)),this._prepareContents(e);const t=pf1.utils.getWeightSystem();e.weight={contents:this.item.system.weight.converted.contents,units:"metric"===t?game.i18n.localize("PF1.Kgs"):game.i18n.localize("PF1.Lbs")};const s=pf1.utils.currency.merge(this.item.system.currency),a=this.item.getValue({recursive:!0,sellValue:1,inLowestDenomination:!0})-this.item.getValue({recursive:!1,sellValue:1,inLowestDenomination:!0})-s,i=this.item.getValue({recursive:!0,inLowestDenomination:!0})-this.item.getValue({recursive:!1,inLowestDenomination:!0})-s;return e.totalValue=pf1.utils.currency.split(a),e.sellValue=pf1.utils.currency.split(i),e.currency=pf1.utils.currency.split(s),e.labels??={},e.labels.totalValue=game.i18n.format("PF1.SplitValue",e.totalValue),e.labels.sellValue=game.i18n.format("PF1.SplitValue",e.sellValue),e.labels.currency=game.i18n.format("PF1.SplitValue",e.currency),e}_applySectionFilter(e,t){if(!t.filters)throw Error(`Section "${t.path}" lacks filters`);return t.filters.some((t=>t.type===e.type&&(t.subTypes?.includes(e.subType)??!0)))}_prepareContents(e){const t=Object.values(pf1.config.sheetSections.inventory).map((e=>({...e}))).sort(((e,t)=>e.sort-t.sort)),s=e.items.reduce(((e,t)=>{t.img=t.img||DEFAULT_TOKEN,t.isStack=!!t.system.quantity&&t.system.quantity>1,t.hasUses=t.system.uses&&t.system.uses.max>0,t.isCharged=["day","week","charges"].includes(t.system.uses?.per),t.price=!1===t.system.identified?t.system.unidentified?.price??0:t.system.price??0;const s=t.system.quantity||0,a=t.system.uses?.value||0;return t.empty=s<=0||t.isCharged&&a<=0,t.destroyed=t.system.hp?.value<=0,t.disabled=t.empty||t.destroyed,e.push(t),e}),[]);for(const e of s){const s=t.find((t=>this._applySectionFilter(e,t)));s?(s.items??=[],s.items.push(e)):console.warn(`Could not find section for item "${e.name}"`,e)}e.inventory=t}async _renderInner(...e){const t=await super._renderInner(...e);for(const e of this._expandedItems)if(this.document.items.has(e)){const s=t.find(`.item-list>.item[data-item-id="${e}"]`)[0];s&&this._openItemSummary(s,{animation:!1})}else this._expandedItems.findSplice((t=>t===e));return t}activateListeners(e){super.activateListeners(e),e.find('.tab[data-tab="contents"] .item-create').click((e=>this._onItemCreate(e))),e.find('.tab[data-tab="contents"] .item-edit').click(this._onItemEdit.bind(this)),e.find('.tab[data-tab="contents"] .item-delete').click(this._onItemDelete.bind(this)),e.find('.tab[data-tab="contents"] .item-take').click(this._onItemTake.bind(this)),e.find(".item .item-name").contextmenu(this._onItemEdit.bind(this)).click(this._onItemSummary.bind(this)),e.find("a.item-control.item-identify").click((e=>{this._quickIdentifyItem(e)})),e.find("a.item-control.item-duplicate").click(this._duplicateItem.bind(this)),e.find("a.item-control.item-quantity-add").click((e=>{this._quickChangeItemQuantity(e,1)})),e.find("a.item-control.item-quantity-subtract").click((e=>{this._quickChangeItemQuantity(e,-1)})),e.find(".item-actions a").click((e=>this._quickItemActionControl(e))),e.find(".item-detail.item-uses input[type='text']:not(:disabled)").off("change").change(this._setItemUses.bind(this)).on("wheel",this._setItemUses.bind(this)),e.find("a.convert-currency").click(this._convertCurrency.bind(this)),e.find(".item .item-image").click((e=>this._onItemRoll(e)));const t=e.find(".search-input");t.on("keyup change",this._searchFilterChange.bind(this)),t.on("compositionstart compositionend",this._searchFilterCompositioning.bind(this)),this.searchRefresh=!0,t.each((function(){this.value.length>0&&$(this).change()})),e.find(".clear-search").on("click",this._clearSearch.bind(this))}_onItemCreate(e){e.preventDefault();const t=e.currentTarget,s=t.dataset.type,a={name:"New "+(t.dataset.typeName||t.dataset.type).capitalize(),type:s,system:{subType:t.dataset.subType}};return this.item.createContainerContent(a,{renderSheet:!0})}_onItemEdit(e){e.preventDefault();const t=e.currentTarget.closest(".item");this.item.getContainerContent(t.dataset.itemId).sheet.render(!0,{focus:!0,editable:this.isEditable})}_onItemSummary(e){e.preventDefault();const t=e.target.closest(".item[data-item-id]");this._openItemSummary(t)}async _openItemSummary(e,{animation:t=!0,rollData:s}={}){const a=e.dataset.itemId,i=this.document.items.get(a);s??=i.defaultAction?.getRollData()??i.getRollData();const{description:n,properties:o}=await i.getChatData({chatcard:!1,rollData:s});if(this._expandedItems=this._expandedItems.filter((e=>e!==a)),e.classList.contains("expanded")){const s=e.querySelector(".item-summary");t?$(s).slideUp(200,(()=>s.remove())):s.remove()}else{const i={description:n||game.i18n.localize("PF1.NoDescription"),properties:o};let r=await renderTemplate("systems/pf1/templates/actors/parts/actor-item-summary.hbs",i);r=await TextEditor.enrichHTML(r,{rollData:s,async:!0,secrets:this.document.isOwner});const l=$(r);t?(l.hide(),e.append(...l),l.slideDown(200)):e.append(...l),this._expandedItems.push(a)}e.classList.toggle("expanded")}_onItemDelete(e){e.preventDefault();const t=e.currentTarget;if(t.disabled)return;const s=e.currentTarget.closest(".item");if(getSkipActionPrompt())this.item.deleteContainerContent(s.dataset.itemId);else{t.disabled=!0;const e=this.document.items.get(s.dataset.itemId),a=`<p>${game.i18n.localize("PF1.DeleteItemConfirmation")}</p>`;Dialog.confirm({title:game.i18n.format("PF1.DeleteItemTitle",{name:e.name}),content:a,yes:()=>{this.item.deleteContainerContent(s.dataset.itemId),t.disabled=!1},no:()=>t.disabled=!1,rejectClose:!0}).then(null,(()=>t.disabled=!1))}}async _onItemTake(e){e.preventDefault();const t=e.currentTarget.closest(".item"),s=this.item.getContainerContent(t.dataset.itemId);this.actor&&(await this.actor.createEmbeddedDocuments("Item",[s.toObject()]),await this.item.deleteContainerContent(s._id))}_onDragStart(e){const t=e.currentTarget;let s;if(t.classList.contains("denomination")){if(!this.item.testUserPermission(game.user,3))return;s={type:"Currency",alt:t.classList.contains("alt-currency"),currency:[...t.classList].find((e=>/[pgsc]p/.test(e))),containerId:this.item.id,amount:parseInt(t.nextElementSibling.textContent||t.nextElementSibling.value)}}else{const e=this.item.getContainerContent(t.dataset.itemId);s={type:"Item",data:e.toObject(),containerId:this.item.id},s.itemId=e.id}s.actorUuid=this.item.actor?.uuid,e.dataTransfer.setData("text/plain",JSON.stringify(s))}_onDrop(e){e.preventDefault(),e.stopPropagation();const t=TextEditor.getDragEventData(e),s=this.item;if(!1!==Hooks.call("pf1DropContainerSheetData",s,this,t))switch(t.type){case"Item":return this._onDropItem(e,t);case"Currency":return this._onDropCurrency(e,t)}}async _onDropCurrency(e,t){const s=await fromUuid(t.actorUuid||"");return new CurrencyTransfer({actor:s,container:t.containerId,alt:t.alt},{actor:this.actor,container:this.item.id,amount:Object.fromEntries([[t.currency,parseInt(t.amount)]])}).render(!0)}async _onDropItem(e,t){if(!this.item.isOwner)return void ui.notifications.warn("PF1.Error.NoItemPermission",{localize:!0});const{actorUuid:s,containerId:a}=t,i=await Item.implementation.fromDropData(t);let n=s?await fromUuid(s):null;n??=i.actor;const o=n&&n===this.item.actor,r=game.items.fromCompendium(i,{clearFolder:!0,keepId:o,clearSort:!o});if(o&&a===this.item.id)return this._onSortItem(e,r);if("spell"===r.type){const e=await pf1.documents.item.ItemSpellPF.toConsumablePrompt(r,{allowSpell:!1,actor:this.item.actor});return!!e&&this.item.createContainerContent(e)}i.isPhysical&&(await this.item.createContainerContent(r),o&&(a?n.containerItems.find((e=>e.id===t.itemId&&e.parentItem?.id===a))?.parentItem.deleteContainerContent(t.itemId):n.items.get(i.id)?.delete()))}async _quickIdentifyItem(e){if(e.preventDefault(),!game.user.isGM)return void ui.notifications.error(game.i18n.localize("PF1.Error.CantIdentify"));const t=$(e.currentTarget).parents(".item").attr("data-item-id"),s=this.item.getContainerContent(t),a=s.system.identified;return void 0!==a?s.update({"system.identified":!a}):void 0}async _duplicateItem(e){e.preventDefault();const t=e.currentTarget,s=$(t).parents(".item").attr("data-item-id"),a=this.item.getContainerContent(s),i=a.toObject();return delete i.system?.links?.children,delete i.system?.links?.charges,delete i._id,i.name=`${i.name} (${game.i18n.localize("PF1.Copy")})`,a.isPhysical&&!a.system.identified&&(i.system.unidentified.name=`${a.system.unidentified.name} (${game.i18n.localize("PF1.Copy")})`),i.system.links?.children&&delete i.system.links.children,this.item.createContainerContent(i)}async _quickChangeItemQuantity(e,t=1){e.preventDefault(),e.shiftKey&&(t*=5),e.ctrlKey&&(t*=10);const s=$(e.currentTarget).parents(".item").attr("data-item-id"),a=this.item.getContainerContent(s),i=a.system.quantity||0;let n=Math.max(0,i+t);return"container"===a.type&&n>1&&(n=1),a.update({"system.quantity":n})}_quickItemActionControl(e){e.preventDefault();const t=$(e.currentTarget).closest(".item").attr("data-item-id");this.item.getContainerContent(t).use({ev:e})}async _setItemUses(e){e.preventDefault();const t=e.currentTarget,s=t.closest(".item").dataset.itemId,a=this.item.getContainerContent(s);this._mouseWheelAdd(e.originalEvent,t);const i=Number(t.value);this.setItemUpdate(a._id,"system.uses.value",i),e.originalEvent instanceof MouseEvent?t.addEventListener("pointerleave",(()=>this._updateItems()),{passive:!0,once:!0}):this._updateItems()}async _updateItems(){const e=[],t=this._itemUpdates;this._itemUpdates=[];for(const s of t){const t=this.item.items.get(s._id);t&&(delete s._id,t.testUserPermission(game.user,"OWNER")&&e.push(t.update(s)))}return Promise.all(e)}setItemUpdate(e,t,s){let a=this._itemUpdates.find((t=>t._id===e));a||(a={_id:e},this._itemUpdates.push(a)),a[t]=s}_mouseWheelAdd(e,t){if(e&&e instanceof WheelEvent){const s=parseFloat(t.value);if(Number.isNaN(s))return;const a=-Math.sign(e.deltaY),i=parseFloat(t.dataset.wheelStep)||1;t.value=s+i*a}}_convertCurrency(e){e.preventDefault();const t=e.currentTarget.dataset.type;this.item.convertCurrency(t)}_onSortItem(e,t){const s=this.document.items,a=s.get(t._id),i=e.target.closest(".item"),n=i?i.dataset.itemId:null,o=s.get(n);if(n===a.id)return;const r=[];for(const e of i.parentElement.children){const t=e.dataset.itemId;if(t&&t!==a.id){const t=s.get(e.dataset.itemId);if(t.type!==a.type)continue;r.push(t)}}if(0==r.length)return;const l=SortingHelpers.performIntegerSort(a,{target:o,siblings:r}).map((e=>{const t=e.update;return t._id=e.target._id,t}));return this.item.updateContainerContents(l)}_onItemRoll(e){e.preventDefault();const t=e.currentTarget.closest(".item").dataset.itemId,s=this.item.getContainerContent(t);if(null!=s)return s.displayCard()}_searchFilterCommit(e){const t=this.item,s=this._filters.search.container.toLowerCase();if(this.effectiveSearch===s&&!this.searchRefresh)return;this.effectiveSearch=s,this.searchRefresh=!1;$(e.target).closest(".tab").find(".item-list .item").each((function(){const e=$(this);if(s?.length>0){const a=t.items.get(this.dataset.itemId);a.name.toLowerCase().includes(s)?e.show():e.hide()}else e.show()}))}_clearSearch(e){this._filters.search.container="",$(e.target).prev(".search-input").val("").change()}_searchFilterCompositioning(e){this.searchCompositioning="compositionstart"===e.type}_searchFilterChange(e){e.preventDefault(),e.stopPropagation();const t=e.target.value,s=this._filters.search.container!==t;(this.searchCompositioning||s)&&clearTimeout(this.searchDelayEvent),this.searchCompositioning||(this._filters.search.container=t,"keyup"===e.type?s&&(this.searchDelayEvent=setTimeout((()=>this._searchFilterCommit(e)),this.searchDelay)):this._searchFilterCommit(e))}}class ItemCreateDialog extends FormApplication{constructor(e={},{resolve:t,pack:s=null,parent:a=null,options:i={}}={}){super(e,i),this.resolve=t,this.pack=s,this.parent=a,this._updateCreationData(e)}get title(){return game.i18n.format("DOCUMENT.Create",{type:game.i18n.localize("DOCUMENT.Item")})}get template(){return"systems/pf1/templates/widgets/item-create.hbs"}static get defaultOptions(){const e=super.defaultOptions;return{...e,closeOnSubmit:!1,submitOnChange:!0,submitOnClose:!1,height:"auto",classes:[...e.classes,"pf1","create-document","create-item"]}}get initialData(){return this.object}createData={};getSubtypes(e){switch(e){case"class":return pf1.config.classTypes;case"race":case"spell":case"container":default:return null;case"attack":return pf1.config.attackTypes;case"feat":return pf1.config.featTypes;case"weapon":return Object.entries(pf1.config.weaponTypes).reduce(((e,[t,s])=>(e[t]=s._label,e)),{});case"equipment":return Object.entries(pf1.config.equipmentTypes).reduce(((e,[t,s])=>(e[t]=s._label,e)),{});case"consumable":return pf1.config.consumableTypes;case"loot":return pf1.config.lootTypes;case"buff":return pf1.config.buffTypes;case"implant":return pf1.config.implantTypes}}getData(){const e=game.settings.get("core","language"),t=this.parent?[]:game.folders.filter((e=>"Item"===e.type&&e.displayed)),s=this.createData;let a=this.getSubtypes(s.type);a||void 0===s.system?.subType||delete s.system.subType,a&&(a=Object.fromEntries(Object.entries(a).sort((([t,s],[a,i])=>s.localeCompare(i,e)))));const i=Object.fromEntries(Object.entries(CONFIG.Item.typeLabels).sort((([t,s],[a,i])=>s.localeCompare(i,e))));return delete i.base,{folders:t,name:s.name,defaultName:Item.implementation.defaultName(),folder:s.folder,hasFolders:t.length>0,type:s.type,types:i,subtype:s.system?.subType||null,subtypes:a}}activateListeners(e){super.activateListeners(e),this.form.querySelector("button.create-document").addEventListener("click",this._createItem.bind(this))}_updateObject(e,t){const s=foundry.utils.expandObject(t);this._updateCreationData(s),this.render()}_updateCreationData(e={}){e.type||=CONFIG.Item.defaultType||game.documentTypes.Item[1],this.createData=foundry.utils.mergeObject(this.initialData,e,{inplace:!1}),this.createData.system??={},e.folder||this.initialData.folder||delete this.createData.folder;return this.getSubtypes(this.createData.type)||delete this.createData.system.subType,this.createData}async _createItem(e){e.preventDefault(),e.stopPropagation(),e.stopImmediatePropagation(),await this.submit({preventRender:!0});let t=this._updateCreationData(this.createData);t.name||=Item.implementation.defaultName(),t=new Item.implementation(t).toObject();const s={};this.pack&&(s.pack=this.pack),this.parent&&(s.parent=this.parent),s.renderSheet=!0;const a=Item.implementation.create(t,s);this.resolve?.(a),this.close()}close(e={}){return this.resolve?.(null),super.close(e)}static waitPrompt(e,t={}){return new Promise((s=>{t.resolve=s,new this(e,t).render(!0,{focus:!0})}))}}const I=Object.freeze(Object.defineProperty({__proto__:null,CreateDialog:ItemCreateDialog,ItemSheetPF,ItemSheetPF_Container},Symbol.toStringTag,{value:"Module"}));class ItemActionSheet extends FormApplication{constructor(...e){super(...e),this.item.apps[this.appId]=this,this.action.apps[this.appId]=this}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{template:"systems/pf1/templates/apps/item-action.hbs",classes:["pf1","sheet","action","item-action"],width:580,height:720,closeOnSubmit:!1,submitOnClose:!0,submitOnChange:!0,resizable:!0,scrollY:[".tab"],tabs:[{navSelector:"nav.tabs[data-group='primary']",contentSelector:"section.primary-body",initial:"description",group:"primary"}],dragDrop:[{dragSelector:"li.conditional",dropSelector:'div[data-tab="conditionals"]'}]})}get title(){return`${this.item.name}: ${this.action.name}`}get id(){return`item-${this.item.uuid}-action-${this.action.id}`}get action(){return this.object}get item(){return this.action.item}get actor(){return this.item.actor}async getData(){const e=this.action,t=this.item,s=this.actor,a={config:pf1.config,editable:this.isEditable,user:game.user,action:e,item:t,actor:s,img:e.img,tag:pf1.utils.createTag(e.name),damageTypes:pf1.registry.damageTypes.toObject(),rollData:e.getRollData()};a.data=foundry.utils.mergeObject(e.constructor.defaultData,foundry.utils.deepClone(e.data),{inplace:!1}),a.hasAttack=e.hasAttack,a.actionType=a.data.actionType,a.isHealing="heal"===a.actionType,a.hasDamage=e.hasDamage,a.isCombatManeuver=e.isCombatManeuver,a.canCrit=e.hasAttack&&e.data.ability?.critMult>1,a.hasCritDamage=a.canCrit||a.data.damage?.critParts?.length>0,a.hasNonCritDamage=a.canCrit||a.data.damage?.nonCritParts?.length>0,a.isCharged=e.isCharged,a.isSelfCharged=e.isSelfCharged;const i=new Set([...Object.keys(pf1.config.limitedUsePeriods),"charges"]);i.delete("single"),a.limitedUsePeriods={...pf1.config.limitedUsePeriods},t.isPhysical||delete a.limitedUsePeriods.single,a.showMaxChargeFormula=i.has(a.data.uses.self.per),e.hasRange&&(a.canInputRange=["ft","mi","spec"].includes(a.data.range.units),a.canInputMinRange=["ft","mi","spec"].includes(a.data.range.minUnits)),a.canInputDuration=!["","turn","inst","perm","seeText"].includes(a.data.duration?.units||""),a.itemName=t.name,a.itemEnh=t.system.enh||0,a.isSpell="spell"===t.type,a.usesSpellPoints=t.spellbook?.spellPoints.useSystem,a.defaultChargeFormula=t.getDefaultChargeFormula(),a.owned=null!=s,a.parentOwned=null!=s,a.owner=t.isOwner,a.isGM=game.user.isGM,a.unchainedActionEconomy=game.settings.get("pf1","unchainedActionEconomy"),a.activation=e.activation,a.hasActivationType=a.activation.type,a.abilityActivationTypes=a.unchainedActionEconomy?pf1.config.abilityActivationTypes_unchained:pf1.config.abilityActivationTypes;const n=a.data.description;if(a.descriptionHTML=n?await TextEditor.enrichHTML(n,{secrets:a.owner,rollData:a.rollData,async:!0,relativeTo:this.actor}):null,a.showMaxRangeIncrements="ft"===a.data.range.units,"attack"===t.type&&(a.isWeaponAttack="weapon"===t.system.subType,a.isNaturalAttack="natural"===t.system.subType),a.canUseAmmo=!0!==a.isNaturalAttack,a.usesAmmo=!!e.ammoType,a.inheritedAmmoType=t?.system.ammo?.type,a.usesAmmo&&(a.inheritedMisfire=t?.system.ammo?.misfire??null),a.distanceUnits=foundry.utils.deepClone(pf1.config.distanceUnits),"spell"!==t.type)for(const e of["close","medium","long"])delete a.distanceUnits[e];if(a.minRangeAvailable=["reach","ft","mi","seeText"].includes(a.data.range.units),a.data.conditionals)for(const t of a.data.conditionals)for(const s of t.modifiers)s.targets=e.getConditionalTargets(),s.subTargets=e.getConditionalSubTargets(s.target),s.conditionalModifierTypes=e.getConditionalModifierTypes(s.target),s.conditionalCritical=e.getConditionalCritical(s.target);a.materialCategories=this._prepareMaterialsAndAddons(),a.materialAddons=this.action.data.material?.addon?.reduce(((e,t)=>(e[t]=!0,e)),{})??{},a.canHold=e.hasAttack,a.inheritedHeld=a.canHold&&["attack","weapon"].includes(t.type)?pf1.config.weaponHoldTypes[a.item.system.held]:null,a.alignmentTypes=this._prepareAlignments(this.action.alignments),this.alignments=a.alignmentTypes?.values;const o=a.rollData.action.held||a.rollData.item.held||"normal";return a.heldAbilityMultiplier=pf1.config.abilityDamageHeldMultipliers[o]??1,a.paMultiplier=e.getPowerAttackMult({rollData:a.rollData}),a.extraAttacksTypes=Object.fromEntries([...Object.entries(pf1.config.extraAttacks).map((([e,{label:t}])=>[e,t]))]),a.extraAttacksConfig={...pf1.config.extraAttacks[e.data.extraAttacks?.type]},a.extraAttacksConfig.allowCustom=a.extraAttacksConfig.manual||a.extraAttacksConfig.formula,a}_prepareMaterialsAndAddons(){const e={},t=[];return pf1.registry.materialTypes.forEach((s=>{(s.allowed.lightBlade||s.allowed.oneHandBlade||s.allowed.twoHandBlade||s.allowed.rangedWeapon)&&(s.addon||s.basic?s.basic||["heatstoneplating","lazurite","sunsilk"].includes(s.id)||t.push({key:s.id,name:s.name}):e[s.id]=s.name)})),{materials:e,addons:t}}_prepareAlignments(e={}){const t={};return Object.keys(pf1.config.damageResistances).forEach((e=>{["magic","epic"].includes(e)||(t[e]=pf1.config.damageResistances[e])})),{choices:t,values:e}}get isEditable(){const e=this.item;let t=this.options.editable&&e.isOwner;if(e.pack){game.packs.get(e.pack).locked&&(t=!1)}return t}activateListeners(e){super.activateListeners(e),this.isEditable&&(e.find("img[data-edit]").click((e=>this._onEditImage(e))),e.find("textarea, .card-notes input[type='text']").on("drop",this._onTextAreaDrop.bind(this)),e.find(".attack-control").click(this._onAttackControl.bind(this)),e.find(".damage-control").click(this._onDamageControl.bind(this)),e.find(".damage-type-visual").on("click",this._onClickDamageType.bind(this)),e.find(".card-notes .controls a").click(this._onNoteEntryControl.bind(this)),e.find(".conditional-control").click(this._onConditionalControl.bind(this)),e.find(".alignmentCheckbox").on("change",(e=>{this._onAlignmentChecked(e)})),$(".alignmentCheckbox.actionCheckbox").each(((e,t)=>{const s=$(t).attr("data-type");this.alignments[s]||!1===this.alignments[s]||(t.indeterminate=!0)})))}_onDragStart(e){const t=e.currentTarget;if(t.dataset?.conditional){const s=this.object.conditionals.get(t.dataset?.conditional);e.dataTransfer.setData("text/plain",JSON.stringify(s.data))}}_canDragStart(e){return this.isEditable}_canDragDrop(e){return this.isEditable}async _onDrop(e){e.preventDefault(),e.stopPropagation();const t=TextEditor.getDragEventData(e);let s;null!=t.default&&"string"==typeof t.name&&Array.isArray(t.modifiers)&&(s="conditional");const a=this.object;if("conditional"===s){for(const e of t.modifiers){let t;Object.keys(a.getConditionalTargets()).includes(e.target)||(e.target="");for(let[s,i]of Object.entries(e)){switch(s){case"subTarget":t=Object.keys(a.getConditionalSubTargets(e.target));break;case"type":t=Object.keys(a.getConditionalModifierTypes(e.target));break;case"critical":t=Object.keys(a.getConditionalCritical(e.target))}t?.includes(i)||(i=t?.[0]??"")}}t._id=foundry.utils.randomID(16);const e=foundry.utils.deepClone(a.data.conditionals||[]);e.push(t),await this.object.update({conditionals:e})}}async _onNoteEntryControl(e){e.preventDefault();const t=e.currentTarget,s=t.dataset.name;switch(t.dataset.action){case"add":{const t=foundry.utils.deepClone(foundry.utils.getProperty(this.object.data,s)??[]);t.push("");const a={[s]:t};return this._updateObject(e,this._getSubmitData(a))}case"delete":{const a=Number(t.dataset.index),i=foundry.utils.deepClone(foundry.utils.getProperty(this.object.data,s));i.splice(a,1);const n={[s]:i};return this._updateObject(e,this._getSubmitData(n))}}}async _onConditionalControl(e){e.preventDefault();const t=e.currentTarget;if(await this._onSubmit(e,{preventRender:!0}),t.classList.contains("add-conditional"))return pf1.components.ItemConditional.create([{}],{parent:this.object});if(t.classList.contains("delete-conditional")){const e=t.closest(".conditional");return this.object.conditionals.get(e.dataset.conditional).delete()}if(t.classList.contains("add-conditional-modifier")){const e=t.closest(".conditional"),s=this.object.conditionals.get(e.dataset.conditional);return pf1.components.ItemConditionalModifier.create([{}],{parent:s})}if(t.classList.contains("delete-conditional-modifier")){const e=t.closest(".conditional-modifier");return this.object.conditionals.get(e.dataset.conditional).modifiers.get(e.dataset.modifier).delete()}}async _onDamageControl(e){e.preventDefault();const t=e.currentTarget,s=t.closest(".damage").dataset.key||"damage.parts",a=s.split(".").slice(0,-1).join("."),i=s.split(".").slice(-1).join(".");if(t.classList.contains("add-damage")){const t={formula:"",type:pf1.components.ItemAction.defaultDamageType},n=foundry.utils.getProperty(this.action.data,a),o=foundry.utils.getProperty(n,i)??[];o.push(t);const r={[s]:o};return this._updateObject(e,this._getSubmitData(r))}if(t.classList.contains("delete-damage")){const n=t.closest(".damage-part"),o=foundry.utils.deepClone(foundry.utils.getProperty(this.action.data,a)),r=foundry.utils.getProperty(o,i)??[];if(r.length){r.splice(Number(n.dataset.damagePart),1);const t={[s]:r};return this._updateObject(e,this._getSubmitData(t))}}}async _onClickDamageType(e){e.preventDefault();const t=e.currentTarget,s=t.closest(".damage-part")?.dataset.damagePart,a=t.closest(".damage")?.dataset.key;if(null!=s&&null!=a){return new pf1.applications.DamageTypeSelector(this.action,`${a}.${s}.type`,foundry.utils.getProperty(this.object.data,a)[s].type).render(!0)}const i=t.closest(".conditional"),n=t.closest(".conditional-modifier");if(i&&n){const e=this.object.conditionals.get(i.dataset.conditional).modifiers.get(n.dataset.modifier);return new pf1.applications.DamageTypeSelector(e,"damageType",e.data.damageType).render(!0)}}async _onAttackControl(e){e.preventDefault();const t=e.currentTarget,s=foundry.utils.deepClone(this.action.data.extraAttacks?.manual??[]);if(t.classList.contains("add-attack")){s.push({formula:"",name:""});const t={extraAttacks:{manual:s}};return this._updateObject(e,this._getSubmitData(t))}if(t.classList.contains("delete-attack")){const a=t.closest(".attack-part");s.splice(Number(a.dataset.attackPart),1);const i={extraAttacks:{manual:s}};return this._updateObject(e,this._getSubmitData(i))}}_onEditImage(e){const t=e.currentTarget.dataset.edit,s=foundry.utils.getProperty(this.action.data,t);new FilePicker({type:"image",current:s,callback:e=>this.action.update({img:e}),top:this.position.top+40,left:this.position.left+10}).browse()}async _onTextAreaDrop(e){e.preventDefault();const t=TextEditor.getDragEventData(e.originalEvent);if(!t)return;const s=e.currentTarget,a=await TextEditor.getContentLink(t,{relativeTo:this.actor});return a?(s.value=s.value?s.value+"\n"+a:a,this._onSubmit(e)):void 0}async _onAlignmentChecked(e){const t=e.target,s=this.alignments[t.dataset.type];t.checked=!1===s,t.indeterminate=!0===s,t.checked?this.alignments[t.dataset.type]=!0:t.indeterminate?this.alignments[t.dataset.type]=null:this.alignments[t.dataset.type]=!1}async _updateObject(e,t){const s=foundry.utils.deepClone(this.object.data.conditionals);Object.entries(t).filter((e=>e[0].startsWith("conditionals"))).forEach((e=>{let t;if(t=e[0].match(/^conditionals.([0-9]+).modifiers.([0-9]+).(.+)$/)){const a=parseInt(t[1]),i=parseInt(t[2]),n=s[a]??foundry.utils.deepClone(this.object.data.conditionals[a]),o=t[3];foundry.utils.setProperty(n.modifiers[i],o,e[1])}else if(t=e[0].match(/^conditionals.([0-9]+).(.+)$/)){const a=parseInt(t[1]),i=s[a]??foundry.utils.deepClone(this.object.data.conditionals[a]),n=t[2];foundry.utils.setProperty(i,n,e[1])}})),t.conditionals=s;const a=(t=foundry.utils.expandObject(t)).material;if(a?.addon&&(a.addon=Object.entries(a.addon).filter((([e,t])=>t)).map((([e])=>e))),t.alignments)for(const[e,s]of Object.entries(this.alignments))t.alignments[e]=s;if(t.measureTemplate&&t.measureTemplate.color){const e=Color.fromString(t.measureTemplate.color);Number.isFinite(Number(e))?t.measureTemplate.color=e.toString():console.warn("Invalid color provided to template",t.measureTemplate.color,this.action)}return t.img===this.item?.img&&delete t.img,this.action.update(t)}async close(e){return delete this.item.apps[this.appId],delete this.action.apps[this.appId],this.action._sheet=null,super.close(e)}}const O=Object.freeze(Object.defineProperty({__proto__:null,ItemActionSheet},Symbol.toStringTag,{value:"Module"})),x=Object.freeze(Object.defineProperty({__proto__:null,ExperienceConfig,HealthConfig,TooltipConfig,TooltipWorldConfig},Symbol.toStringTag,{value:"Module"}));class CheckboxFilter extends BaseFilter{static TEMPLATE="systems/pf1/templates/apps/compendium-browser/checkbox-filter.hbs";static MIN_SEARCH_CHOICES=10;booleanOperator=E.NONE;_choiceQuery="";constructor(...e){super(...e),this._debouncedFilterChoices=foundry.utils.debounce(this._onCustomSearchFilter,100)}static getChoicesFromConfig(e,{labelKey:t="_label",innerSet:s=!1}={}){const a=new foundry.utils.Collection;for(const[i,n]of Object.entries(e))if(s)for(const[e,s]of Object.entries(n))e!==t&&a.set(e,{key:e,label:s});else"object"==typeof n&&n[t]?a.set(i,{key:i,label:n[t]}):"string"==typeof n&&a.set(i,{key:i,label:n});return a}get hasControls(){return this.booleanOperator!==E.NONE||this.choices.size>=this.constructor.MIN_SEARCH_CHOICES}get hasSearch(){return this.choices.size>=this.constructor.MIN_SEARCH_CHOICES||(this.constructor.MIN_SEARCH_CHOICES??!1)}setup(){super.setup(),this.prepareBooleanOperator()}prepareBooleanOperator(){const e=this.compendiumBrowser?.entries.contents;let t;e.find((e=>t=foundry.utils.getProperty(e,this.constructor.indexField))),["Array","Object"].includes(foundry.utils.getType(t))&&(this.booleanOperator=E.AND)}prepareChoices(){const e=this.compendiumBrowser?.entries.contents,t=new Set(e.flatMap((e=>{const t=foundry.utils.getProperty(e,this.constructor.indexField);if(Array.isArray(t))return 0===t.length?[]:t;if("object"==typeof t&&null!==t){const e=Object.keys(t);return 0===e.length?[]:e}return null==t||"string"==typeof t&&""===t.trim()?[]:[t]})));this.choices=new foundry.utils.Collection(naturalSort([...t].map((e=>({key:e,label:game.i18n.localize(""+e)}))),"label").map((e=>[""+e.key,e])))}toggleChoice(e,t=null){const s=this.choices?.get(e);if(!s)throw Error(`Choice ${e} does not exist in this filter.`);return s.active=null===t?!s.active:t,s.active}reset(){super.reset(),this.prepareBooleanOperator(),this._choiceQuery="",this.choices?.forEach((e=>e.active=!1))}applyFilter(e){const t=this.choices.filter((e=>e.active));if(0===t.length)return!0;const s=this.constructor.handledTypes;if(s.size&&!s.has(e.type))return!1;const a=foundry.utils.getProperty(e,this.constructor.indexField),i=this.booleanOperator===E.OR?"some":"every";return Array.isArray(a)?t[i]((e=>a.includes(e.key))):"object"==typeof a&&null!==a?t[i]((e=>e.key in a&&!1!==a[e.key])):t.some((e=>a==e.key))}getData(){return{...super.getData(),hasControls:this.hasControls,boolean:this.booleanOperator,hasSearch:this.choices.size>this.constructor.MIN_SEARCH_CHOICES,choiceQuery:this._choiceQuery}}activateListeners(e){super.activateListeners(e),this._onCustomSearchFilter(null,e),e.querySelector("button.boolean")?.addEventListener("click",(e=>{e.preventDefault(),this.booleanOperator===E.OR?this.booleanOperator=E.AND:this.booleanOperator=E.OR,this.compendiumBrowser.render()})),e.querySelector("input[name=choice-query]")?.addEventListener("input",(t=>this._debouncedFilterChoices(t,e))),e.addEventListener("change",(e=>{if("checkbox"===e.target.type){const t=e.target,s=/filter.\w*.choice.(?<choice>.*)/.exec(t.name)?.groups?.choice;s&&(this.toggleChoice(s,t.checked),this.compendiumBrowser.render())}}))}_onCustomSearchFilter(e,t){e&&(e.preventDefault(),this._choiceQuery=SearchFilter.cleanQuery(e.target.value));const s=T.go(this._choiceQuery,this.choices.contents,{key:"label",threshold:-1e4}).map((e=>""+e.obj.key)),a=new Set(s);for(const e of t.querySelectorAll("li.filter-choice")){const t=e.dataset.choice;t&&(a.has(t)||!this._choiceQuery?e.classList.remove("hidden"):e.classList.add("hidden"))}this._choiceQuery&&0===s.length?t.querySelector("span.no-choices")?.classList.remove("hidden"):t.querySelector("span.no-choices")?.classList.add("hidden")}}const E={AND:"AND",OR:"OR",NONE:!1};class NumberRangeFilter extends BaseFilter{static TEMPLATE="systems/pf1/templates/apps/compendium-browser/minmax-filter.hbs";prepareChoices(){this.choices=new foundry.utils.Collection([{key:"min",label:"PF1.Minimum",placeholder:"0"},{key:"max",label:"PF1.Maximum",placeholder:"∞"}].map((e=>[e.key,{...e,label:game.i18n.localize(e.label)}])))}reset(){this.choices.forEach((e=>{e.value=null,e.active=!1}))}activateListeners(e){e.addEventListener("change",(e=>{const t=e.target,s=t.value,a=t.name.split("choice.").pop(),i=this.choices.get(a);i&&(i.value=Number(s)||null,i.active=!!s),this.compendiumBrowser.render()}))}applyFilter(e){const t=foundry.utils.getProperty(e,this.constructor.indexField)??0,s=this.choices.get("min").value??0,a=this.choices.get("max").value??1/0;return!(t<s)&&!(t>a)}}class ItemTypeFilter extends CheckboxFilter{static label="PF1.Type";static indexField="type";static types=["weapon","equipment","consumable","container","loot","implant"];prepareChoices(){this.choices=new foundry.utils.Collection([{key:"weapon",label:game.i18n.localize("TYPES.Item.weapon")},{key:"equipment",label:game.i18n.localize("TYPES.Item.equipment")},{key:"consumable",label:game.i18n.localize("TYPES.Item.consumable")},{key:"container",label:game.i18n.localize("TYPES.Item.container")},{key:"loot",label:game.i18n.localize("PF1.Misc")},{key:"implant",label:game.i18n.localize("TYPES.Item.implant")}].map((e=>[e.key,e])))}}class WeaponTypeFilter extends CheckboxFilter{static label="PF1.WeaponType";static indexField="system.subType";static type="weapon";prepareChoices(){this.choices=this.constructor.getChoicesFromConfig(pf1.config.weaponTypes)}}class WeaponSubtypeFilter extends CheckboxFilter{static label="PF1.WeaponSubtype";static indexField="system.weaponSubtype";static type="weapon";prepareChoices(){this.choices=this.constructor.getChoicesFromConfig(pf1.config.weaponTypes,{innerSet:!0})}}class WeaponPropertyFilter extends CheckboxFilter{static label="PF1.WeaponProperties";static indexField="system.properties";static type="weapon";prepareChoices(){this.choices=this.constructor.getChoicesFromConfig(pf1.config.weaponProperties)}}class WeaponGroupFilter extends CheckboxFilter{static label="PF1.WeaponGroups";static indexField="system.weaponGroups.value";static type="weapon";prepareChoices(){this.choices=this.constructor.getChoicesFromConfig(pf1.config.weaponGroups)}}class EquipmentTypeFilter extends CheckboxFilter{static label="PF1.EquipmentType";static indexField="system.subType";static type="equipment";prepareChoices(){this.choices=this.constructor.getChoicesFromConfig(pf1.config.equipmentTypes)}}class EquipmentSubtypeFilter extends CheckboxFilter{static label="PF1.EquipmentSubtype";static indexField="system.equipmentSubtype";static type="equipment";prepareChoices(){this.choices=this.constructor.getChoicesFromConfig(pf1.config.equipmentTypes,{innerSet:!0})}}class ItemSlotFilter extends CheckboxFilter{static label="PF1.Slot";static indexField="system.slot";static type="equipment";prepareChoices(){this.choices=this.constructor.getChoicesFromConfig(pf1.config.equipmentSlots,{innerSet:!0})}}class ConsumableTypeFilter extends CheckboxFilter{static label="PF1.ConsumableType";static indexField="system.subType";static type="consumable";prepareChoices(){this.choices=this.constructor.getChoicesFromConfig(pf1.config.consumableTypes)}}class MiscItemTypeFilter extends CheckboxFilter{static label="PF1.Misc";static indexField="system.subType";static type="loot";prepareChoices(){this.choices=this.constructor.getChoicesFromConfig(pf1.config.lootTypes)}}class ItemPriceFilter extends NumberRangeFilter{static label="PF1.Price";static indexField="system.price"}class ItemCasterLevelFilter extends NumberRangeFilter{static label="PF1.CasterLevel";static indexField="system.cl"}const M=Object.freeze(Object.defineProperty({__proto__:null,ConsumableTypeFilter,EquipmentSubtypeFilter,EquipmentTypeFilter,ItemCasterLevelFilter,ItemPriceFilter,ItemSlotFilter,ItemTypeFilter,MiscItemTypeFilter,WeaponGroupFilter,WeaponPropertyFilter,WeaponSubtypeFilter,WeaponTypeFilter},Symbol.toStringTag,{value:"Module"}));class PackFilter extends CheckboxFilter{static label="PF1.Compendium";static indexField="__pack";prepareChoices(){const e=this.compendiumBrowser?.entries.contents,t=this.compendiumBrowser?.packs?.filter((t=>e.some((e=>e.__pack===t.collection)))).map((e=>({key:e.collection,label:e.metadata.label}))),s=naturalSort(t,"label").map((e=>[e.key,e]));this.choices=new foundry.utils.Collection(s)}}class TagFilter extends CheckboxFilter{static label="PF1.Tags";static indexField="system.tags"}const R=Object.freeze(Object.defineProperty({__proto__:null,PackFilter,TagFilter},Symbol.toStringTag,{value:"Module"}));class SpellSchoolFilter extends CheckboxFilter{static label="PF1.SpellSchool";static indexField="system.school";static type="spell";prepareChoices(){this.choices=this.constructor.getChoicesFromConfig(pf1.config.spellSchools)}}class SpellSubSchoolFilter extends CheckboxFilter{static label="PF1.SubSchool";static indexField="system.subschool";static type="spell"}class SpellDescriptorFilter extends CheckboxFilter{static label="PF1.Descriptor";static indexField="system.descriptors";static type="spell";prepareChoices(){super.prepareChoices();const e=this.choices;this.constructor.getChoicesFromConfig(pf1.config.spellDescriptors).forEach((t=>{e.set(t.key,t)})),this.choices=e}}class SpellLearnedByClassFilter extends CheckboxFilter{static label="PF1.Classes";static indexField="system.learnedAt.class";static type="spell"}class SpellLearnedByDomainFilter extends CheckboxFilter{static label="PF1.Domain";static indexField="system.learnedAt.domain";static type="spell"}class SpellLearnedBySubdomainFilter extends CheckboxFilter{static label="PF1.SubDomain";static indexField="system.learnedAt.subDomain";static type="spell"}class SpellLearnedByBloodlineFilter extends CheckboxFilter{static label="PF1.Bloodline";static indexField="system.learnedAt.bloodline";static type="spell"}class SpellLevelFilter extends CheckboxFilter{static label="PF1.SpellLevel";static indexField="system.level";static type="spell";prepareChoices(){const e=this.constructor.getChoicesFromConfig(pf1.config.spellLevels);e.forEach((e=>{e.key=Number(e.key)})),this.choices=e}applyFilter(e){const t=this.compendiumBrowser.filters.filter((e=>e.active&&e.constructor.indexField.startsWith("system.learnedAt.")));if(0===t.length)return super.applyFilter(e);const s=this.booleanOperator===E.OR?"some":"every",a=this.choices.filter((e=>e.active));return t[s]((t=>{const i=foundry.utils.getProperty(e,t.constructor.indexField)??{};return t.choices.filter((e=>e.active))[s]((e=>{const t=i[e.key];return a[s]((e=>e.key===t))}))}))}}const L=Object.freeze(Object.defineProperty({__proto__:null,SpellDescriptorFilter,SpellLearnedByBloodlineFilter,SpellLearnedByClassFilter,SpellLearnedByDomainFilter,SpellLearnedBySubdomainFilter,SpellLevelFilter,SpellSchoolFilter,SpellSubSchoolFilter},Symbol.toStringTag,{value:"Module"}));class FeatTypeFilter extends CheckboxFilter{static label="PF1.Type";static type="feat";static indexField="system.subType";prepareChoices(){this.choices=this.constructor.getChoicesFromConfig(pf1.config.featTypes)}}class FeatClassFilter extends CheckboxFilter{static label="PF1.Classes";static type="feat";static indexField="system.associations.classes"}const N=Object.freeze(Object.defineProperty({__proto__:null,FeatClassFilter,FeatTypeFilter},Symbol.toStringTag,{value:"Module"}));class ClassTypeFilter extends CheckboxFilter{static label="PF1.ClassType";static type="class";static indexField="system.subType";prepareChoices(){this.choices=this.constructor.getChoicesFromConfig(pf1.config.classTypes)}}class ClassHitDieFilter extends CheckboxFilter{static label="PF1.HitDie";static type="class";static indexField="system.hd"}class ClassBaseAttackBonusFilter extends CheckboxFilter{static label="PF1.BAB";static type="class";static indexField="system.bab";prepareChoices(){this.choices=this.constructor.getChoicesFromConfig(pf1.config.classBAB)}}class ClassSkillPointsFilter extends CheckboxFilter{static label="PF1.SkillsPerLevel";static type="class";static indexField="system.skillsPerLevel"}class ClassSavingThrowFilter extends CheckboxFilter{static type="class";static savingThrow="";static get label(){return pf1.config.savingThrows[this.savingThrow]??""}static get indexField(){return`system.savingThrows.${this.savingThrow}.value`}prepareChoices(){this.choices=this.constructor.getChoicesFromConfig(pf1.config.classSavingThrows),this.choices.set("none",{label:game.i18n.localize("PF1.None"),key:"none"})}applyFilter(e){const t=super.applyFilter(e),s=foundry.utils.getProperty(e,this.constructor.indexField),a=this.choices.get("none").active&&""===s;return t||a}}class ClassFortitudeFilter extends ClassSavingThrowFilter{static savingThrow="fort"}class ClassReflexFilter extends ClassSavingThrowFilter{static savingThrow="ref"}class ClassWillFilter extends ClassSavingThrowFilter{static savingThrow="will"}const z=Object.freeze(Object.defineProperty({__proto__:null,ClassBaseAttackBonusFilter,ClassFortitudeFilter,ClassHitDieFilter,ClassReflexFilter,ClassSkillPointsFilter,ClassTypeFilter,ClassWillFilter},Symbol.toStringTag,{value:"Module"}));class CreatureTypeFilter extends CheckboxFilter{static label="PF1.CreatureType";static type="race";static indexField="system.creatureType";prepareChoices(){this.choices=this.constructor.getChoicesFromConfig(pf1.config.creatureTypes)}}class CreatureSubTypeFilter extends CheckboxFilter{static label="PF1.RaceSubtypePlural";static type="race";static indexField="system.subTypes"}const j=Object.freeze(Object.defineProperty({__proto__:null,CreatureSubTypeFilter,CreatureTypeFilter},Symbol.toStringTag,{value:"Module"}));class BuffTypeFilter extends CheckboxFilter{static label="PF1.Type";static type="buff";static indexField="system.subType";prepareChoices(){this.choices=this.constructor.getChoicesFromConfig(pf1.config.buffTypes)}}class CreatureCRFilter extends CheckboxFilter{static label="PF1.ChallengeRatingShort";static indexField="system.details.cr.base";static types=["character","npc"];prepareChoices(){super.prepareChoices();const t=this.choices.contents.map((e=>Number(e.key))).sort(((e,t)=>e-t)).map((t=>{const s=e.fromNumber(t);return[t.toString(),{key:t,label:s}]}));this.choices=new foundry.utils.Collection(t)}}const B=Object.freeze(Object.defineProperty({__proto__:null,BaseFilter,CheckboxFilter,NumberRangeFilter,class:z,common:R,feat:N,item:M,race:j,spell:L},Symbol.toStringTag,{value:"Module"})),H=Object.freeze(Object.defineProperty({__proto__:null,BuffBrowser:class BuffBrowser extends CompendiumBrowser{static documentName="Item";static typeName="PF1.Buffs";static filterClasses=[PackFilter,BuffTypeFilter,TagFilter]},ClassBrowser:class ClassBrowser extends CompendiumBrowser{static typeName="PF1.Classes";static filterClasses=[PackFilter,ClassTypeFilter,ClassHitDieFilter,ClassBaseAttackBonusFilter,ClassSkillPointsFilter,ClassFortitudeFilter,ClassReflexFilter,ClassWillFilter,TagFilter]},CompendiumBrowser,CreatureBrowser:class CreatureBrowser extends CompendiumBrowser{static documentName="Actor";static typeName="PF1.Creatures";static filterClasses=[PackFilter,CreatureCRFilter]},FeatBrowser:class FeatBrowser extends CompendiumBrowser{static typeName="PF1.Feats";static filterClasses=[PackFilter,FeatTypeFilter,FeatClassFilter,TagFilter]},ItemBrowser:class ItemBrowser extends CompendiumBrowser{static typeName="PF1.Items";static filterClasses=[PackFilter,ItemTypeFilter,WeaponTypeFilter,WeaponSubtypeFilter,WeaponPropertyFilter,WeaponGroupFilter,EquipmentTypeFilter,EquipmentSubtypeFilter,ItemSlotFilter,ConsumableTypeFilter,MiscItemTypeFilter,ItemPriceFilter,ItemCasterLevelFilter,TagFilter];static _mapEntry(e,t){const s=super._mapEntry(e,t),{subType:a,equipmentSubtype:i}=s.system;if(a){const e=Object.keys(pf1.config.equipmentTypes[a]??{}).filter((e=>!e.startsWith("_")));0===e.length?s.system.equipmentSubtype="":e.includes(i)||(s.system.equipmentSubtype=e.at(0))}return s}},RaceBrowser:class RaceBrowser extends CompendiumBrowser{static typeName="PF1.Races";static filterClasses=[PackFilter,CreatureTypeFilter,CreatureSubTypeFilter,TagFilter]},SpellBrowser:class SpellBrowser extends CompendiumBrowser{static typeName="PF1.Spells";static types=["spell"];static filterClasses=[PackFilter,SpellSchoolFilter,SpellSubSchoolFilter,SpellDescriptorFilter,SpellLearnedByClassFilter,SpellLearnedByDomainFilter,SpellLearnedBySubdomainFilter,SpellLearnedByBloodlineFilter,SpellLevelFilter,TagFilter];static _mapEntry(e,t){const s=super._mapEntry(e,t);s.system.subschool=e.system.subschool?.split(/,|\bor\b/).map((e=>{let t=e.trim();return t.includes("see text")?"see text":(t.startsWith("or")&&(t=t.replace("or").trim()),t)})).filter((e=>e.length))??[];{const t=[...e.system.descriptors?.value??[],...(e.system.descriptors?.custom??[]).flatMap((e=>e?.split(/,|\bor\b/).map((e=>{let t=e.trim();return t.includes("see text")?"see text":(t.startsWith("or")&&(t=t.replace("or").trim()),t)})))).filter((e=>e?.length))].map((e=>{const t=Object.entries(pf1.config.spellDescriptors).find((([t,s])=>t===e||s===e));return t?.[0]??e}));s.system.descriptors=[...new Set(t)]}const a=e.system.learnedAt??{},i=Object.values(a).map((e=>Object.values(e))).flat();return e.system.level&&i.push(e.system.level),s.system.level=[...new Set(i)],s}},filters:B},Symbol.toStringTag,{value:"Module"}));class ActionSelector extends Application{constructor(e,t={},s={}){super(t),this.useOptions=s,this.item=e}static get defaultOptions(){const e=super.defaultOptions;return{...e,template:"systems/pf1/templates/apps/action-select.hbs",classes:[...e.classes,"pf1","action-selector"],width:400}}get title(){return game.i18n.format("PF1.Application.ActionSelector.Title",{actor:this.item.actor.name??"",item:this.item.name})}async getData(){const e=await super.getData();return e.item=this.item.toObject(),e.actions=this.item.actions,e}activateListeners(e){super.activateListeners(e),e.find(".action").on("click",this._onClickAction.bind(this))}_onClickAction(e){e.preventDefault();const t=e.currentTarget.dataset?.action,s=this.item.use({...this.useOptions,actionId:t,skipDialog:getSkipActionPrompt()});this.resolve?.(s),this.close()}close(...e){this.resolve?.(),super.close(...e)}static async open(e,t={},s={}){return new Promise((a=>{const i=new this(e,void 0,t);i.resolve=a,i.render(!0,{focus:!0,...s})}))}}class AttackDialog extends Application{constructor(e,t={}){super(t),this.actionUse=e,this.object=e.action;const s=e.action,a=e.shared;this.shared=a,this.useOptions=a.useOptions??{},this.rollData=a.rollData,this.initAmmoUsage(),this.initAttacks(),this.base={cl:this.rollData.cl??0,sl:this.rollData.sl??0};const i=!("natural"===s.item.subType)||!1!==s.data.naturalAttack.primaryAttack,n=this.useOptions;this.flags={"power-attack":n.powerAttack??!1,"primary-attack":n.primaryAttack??i,"cl-check":n.clCheck??!0===s.clCheck,"measure-template":n.measureTemplate??!0,"haste-attack":n.haste,manyshot:n.manyshot,"rapid-shot":n.rapidShot};let o=this.damageMult;null!=n.abilityMult&&(o=n.abilityMult),this.attributes={d20:this.rollData.d20??"","attack-bonus":"","damage-bonus":"","cl-offset":"0","sl-offset":"0",rollMode:a.rollMode||game.settings.get("core","rollMode"),"damage-ability-multiplier":o,held:n.held||this.rollData.action?.held||this.rollData.item?.held||"normal"},this.conditionals={},s.conditionals?.contents.forEach(((e,t)=>{this.conditionals["conditional."+t]=!0===e.data.default})),n.haste&&this._toggleExtraAttack("haste-attack",!0),n.manyshot&&this._toggleExtraAttack("manyshot",!0),n.rapidShot&&this._toggleExtraAttack("rapid-shot",!0),this.resolve=null}get damageMult(){const e=this.rollData,t=e.action?.held||e.item?.held||"1h";let s=e.action?.ability?.damageMult??pf1.config.abilityDamageHeldMultipliers[t]??1;return this.flags["primary-attack"]||(s=e.action.naturalAttack?.secondary?.damageMult??.5),s}get action(){return this.object}get title(){const e=this.action,t=e.item,s=e.actor;return s?`${e.name} (${t.name}) – ${s.name}`:`${e.name} (${t.name})`}static get defaultOptions(){return{...super.defaultOptions,template:"systems/pf1/templates/apps/attack-roll-dialog.hbs",classes:["pf1","attack-dialog"],width:440,height:"auto",closeOnSubmit:!0,sheetConfig:!1,submitOnChange:!1,submitOnClose:!1}}getData(){const e=this.action,t=e.item,s={data:this.rollData,item:t,action:e,config:pf1.config,rollMode:game.settings.get("core","rollMode"),rollModes:CONFIG.Dice.rollModes,hasAttack:e.hasAttack,hasDamage:e.hasDamage,hasDamageAbility:e.data.ability?.damage??!1,isNaturalAttack:"natural"===t.system.subType,isWeaponAttack:"weapon"===t.system.subType,isRanged:e.isRanged,isMeleeWeaponAttackAction:"mwak"===e.data.actionType,isRangedWeaponAttackAction:e.isRanged&&!e.isCombatManeuver,isAttack:"attack"===t.type,isWeapon:"weapon"===t.type,isSpell:"spell"===t.type,isFeat:"feat"===t.type,isHealing:e.isHealing,hasTemplate:e.hasTemplate,attacks:this.attacks,flags:this.flags,attributes:this.attributes,conditionals:this.conditionals,usesAmmo:!!this.action.ammoType,ammo:this.actionUse.getAmmo()};return s.canConfigureHeld=s.flags["power-attack"]&&!s.isRanged&&(s.isAttack||s.isWeapon)&&!s.isNaturalAttack,Number.isFinite(e.data.ability?.damageMult)||(s.canConfigureHeld=!0),s}activateListeners(e){e.find('.flags input[type="checkbox"]').on("change",this._onToggleFlag.bind(this)),e.find("input.attribute").on("change",this._onChangeAttribute.bind(this)),e.find('input[type="checkbox"][name="concentration"]').on("change",this._onToggleFlag.bind(this)),e.find('input[type="checkbox"][name="cl-check"]').on("change",this._onToggleFlag.bind(this)),e.find('input[type="checkbox"][name="measure-template"]').on("change",this._onToggleFlag.bind(this)),e.find("select").on("change",this._onSelectChange.bind(this)),e.find('.conditionals input[type="checkbox"]').on("change",this._onToggleConditional.bind(this)),e.find(".ammo-select").on("click",this._onAmmoSelectClick.bind(this)),e.find(".ammo-select .ammo-item .controls a").on("click",this._onAmmoControlClick.bind(this)),e.find(".ammo-select .ammo-item").on("click",this._onAmmoClick.bind(this)),e.on("click",this._unfocusElements.bind(this)),e.find('button[name="attack_single"]').on("pointerenter",this._hideExtraAttacks.bind(this)),e.find('button[name="attack_single"]').on("pointerleave",this._showExtraAttacks.bind(this)),e.find('button[name="attack_single"]').on("click",(e=>this.resolveAttack(e,!1))),e.find('button[name="attack_full"]').on("click",(e=>this.resolveAttack(e,!0)))}_onSelectChange(e){e.preventDefault();const t=e.currentTarget;this.attributes[t.name]=t.options[t.selectedIndex].value,this.render()}_hideExtraAttacks(e){this.element.find(".attacks .attack").filter(((e,t)=>parseInt(t.dataset.index)>0)).addClass("disabled")}_showExtraAttacks(e){this.element.find(".attacks .attack").removeClass("disabled")}_onToggleFlag(e){e?.cancelable&&e.preventDefault();const t=e.currentTarget;switch(this.flags[t.name]=!0===t.checked,t.name){case"haste-attack":case"rapid-shot":case"manyshot":this._toggleExtraAttack(t.name,t.checked);break;case"primary-attack":this.attributes["damage-ability-multiplier"]=this.damageMult}this.render()}_toggleExtraAttack(e,t=!0){if(t){const t={"haste-attack":"PF1.Haste","rapid-shot":"PF1.RapidShot",manyshot:"PF1.Manyshot"},s="manyshot"===e?1:this.attacks.length;this.attacks.splice(s,0,new ActionUseAttack(game.i18n.localize(t[e]),"",null,{abstract:!0,type:e})),this.setAttackAmmo(s,this.action.item.getFlag("pf1","defaultAmmo"))}else this.attacks.findSplice((t=>t.type===e))}_onToggleConditional(e){e.preventDefault();const t=e.currentTarget;this.conditionals[t.name]=!0===t.checked,this.render()}_onAmmoSelectClick(e){e.preventDefault();const t=e.currentTarget,s=t.querySelector("ul");if(!e.target.closest("ul")){s.classList.toggle("open");s.classList.contains("open")?t.classList.add("focus"):t.classList.remove("focus")}}_onAmmoClick(e){const t=e.target;if(t.closest(".controls")&&!t.classList.contains("controls"))return;e.preventDefault();const s=t.closest(".ammo-item").dataset.id,a=parseInt(t.closest(".attack").dataset.index);this.setAttackAmmo(a,"null"===s?null:s),this.render()}async _onAmmoControlClick(e){e.preventDefault();const t=e.currentTarget,s=t.closest(".ammo-item").dataset.id;switch(t.dataset.type){case"set-default":"null"===s?await this.action.item.unsetFlag("pf1","defaultAmmo"):await this.action.item.setFlag("pf1","defaultAmmo",s),t.closest("ul").querySelectorAll(".ammo-item").forEach((e=>e.classList.remove("default"))),"null"!==s&&t.closest(".ammo-item").classList.add("default");break;case"set-all":for(let e=0;e<this.attacks.length;e++)this.setAttackAmmo(e,s);this.render()}}_unfocusElements(e){if(null!=this.element[0].querySelector(".ammo-select")&&!e.target.closest(".ammo-select")){const e=this.element[0].querySelector(".ammo-select");e.classList.remove("focus"),e.querySelector("ul").classList.remove("open")}}_onChangeAttribute(e){e.preventDefault();const t=e.currentTarget;switch(this.attributes[t.name]=t.value,t.name){case"cl-offset":this.rollData.cl=this.base.cl+parseInt(t.value);break;case"sl-offset":this.rollData.sl=this.base.sl+parseInt(t.value);break;case"damage-ability-multiplier":foundry.utils.setProperty(this.rollData,"action.ability.damageMult",t.value);break;case"held":foundry.utils.setProperty(this.rollData,"action.held",t.value)}this.render()}initAttacks(){this.attacks=this.shared.attacks;for(const e of this.attacks)e.attackBonusTotal=RollPF.safeRollAsync(e.attackBonus,this.rollData).total??0;if(this.action.ammoType){const e=this.action.item.getFlag("pf1","defaultAmmo");if(null!=e)for(let t=0;t<this.attacks.length;t++)this.setAttackAmmo(t,e)}}initAmmoUsage(){this.ammoUsage=this.actionUse.getAmmo().reduce(((e,t)=>(e[t.id]={quantity:t.quantity,used:0},e)),{})}setAttackAmmo(e,t=null){if(!this.action.ammoType)return;const s=this.attacks[e],a=s.ammo?.id,i=this.action.actor?.items.get(t)??null,n=i?.system.abundant??!1;if(t&&null==this.ammoUsage[t]&&(t=null),!t)return s.ammo=null,void(null!=a&&this.ammoUsage[a].used--);!n&&this.ammoUsage[t].used>=this.ammoUsage[t].quantity||(s.ammo=this.actionUse.getAmmo().find((e=>e.id===t)),a&&this.ammoUsage[a].used--,this.ammoUsage[t].used++)}resolveAttack(e,t=!0){e.preventDefault();const s=new FormDataExtended(this.element.find("form")[0]).object;s.fullAttack=t,this.resolve(s),this.close()}async close(e={}){return this.resolve(null),super.close(e)}show(){return new Promise(((e,t)=>{this.resolve=e,this.render(!0)}))}}class ChangeLogWindow extends FormApplication{constructor(e){super({},{}),this.lastVersion=e}static get defaultOptions(){const e=super.defaultOptions;return foundry.utils.mergeObject(e,{id:"changelog",classes:["pf1","changelog"],template:"systems/pf1/templates/apps/changelog.hbs",width:500,submitOnChange:!0,closeOnSubmit:!1})}get title(){return`${game.i18n.localize("PF1.Title")} ~ ${game.i18n.localize("PF1.Changelog")}`}async getData(){const e=await super.getData();e.dontShowAgain=game.settings.get("pf1","dontShowChangelog");const t=new XMLHttpRequest;t.open("GET","systems/pf1/CHANGELOG.md");const s=new Promise((s=>{t.onload=()=>{200===t.status&&(e.changelog=this._processChangelog(t.response),s(e))}}));return t.send(null),s}_processChangelog(e){const t=new showdown.Converter;let s=e.split(/[\n\r]/);if(this.lastVersion)for(let e=0;e<s.length;e++){if(s[e].match(/##\s+([0-9]+\.[0-9]+\.[0-9]+)/)){if(!SemanticVersion.fromString(RegExp.$1).isHigherThan(this.lastVersion)){s=s.slice(0,e);break}}}return t.makeHtml(s.join("\n"))}async _updateObject(e,t){null!=t.dontShowAgain&&await game.settings.set("pf1","dontShowChangelog",t.dontShowAgain)}}class EntrySelector extends FormApplication{constructor(e,t){super(e,t),t.title&&(this.subtitle=game.i18n.localize(t.title)),this.isFlag=!0===this.options.flag,this.isBoolean=!0===this.options.boolean,this.isFlat=!0===this.options.flat;const s=foundry.utils.deepClone(foundry.utils.getProperty(this.object,this.attribute)??(this.isFlag?{}:[]));this.originalEntries=s,this.entries=this.isFlag?this.isBoolean?Object.keys(s).map((e=>[e])):Object.entries(s):s}static get defaultOptions(){const e=super.defaultOptions;return{...e,classes:[...e.classes,"pf1","entry"],template:"systems/pf1/templates/apps/entry-selector.hbs",width:320,height:"auto",closeOnSubmit:!0,submitOnClose:!1,submitOnChange:!1}}get id(){return`entry-selector-item-${this.object.uuid}-${this.options.name}`}get title(){const e=this.object,t=e.actor,s=this.subtitle??game.i18n.localize("PF1.Application.EntrySelector.Title");return e?t?game.i18n.format("PF1.Application.EntrySelector.TitleOwned",{item:e.name,actor:t.name,title:s}):game.i18n.format("PF1.Application.EntrySelector.TitleIsolated",{item:e.name,title:s}):s}get attribute(){return this.options.name}get fields(){return this.options.fields.split(";")}get dtypes(){return this.options.dtypes.split(";")}get dataCount(){return this.fields.length}getData(){return{entries:this.entries.map((e=>this.isFlat?[e,this.dtypes[e]]:e.map(((e,t)=>[e,this.dtypes[t]])))),fields:this.fields,isFlat:this.isFlat}}activateListeners(e){this.isEditable&&(e.find(".entry-control").click(this._onEntryControl.bind(this)),e.find('tr td input[type="text"]').change(this._onEntryChange.bind(this)))}async _updateObject(e,t){const s={};if(this.isFlag){const e=new Set;this.entries.forEach((([t,a])=>{e.add(t),s[`${this.attribute}.${t}`]=!!this.isBoolean||a}));Object.keys(this.originalEntries).forEach((t=>{e.has(t)||(s[`${this.attribute}.-=${t}`]=null)}))}else s[this.attribute]=this.entries;return this.object.update(s)}async _onEntryControl(e){e.preventDefault();const t=e.currentTarget;if(t.classList.contains("add-entry")){if(this.isFlat){"Number"===this.dtypes[t]?this.entries.push(0):this.entries.push("")}else{const e=[];for(let t=0;t<this.dataCount;t++){"Number"===this.dtypes[t]?e.push(0):e.push("")}this.entries.push(e)}return this.render()}if(t.classList.contains("delete-entry")){const e=t.closest("tr"),s=parseInt(e.dataset.index);return this.entries.splice(s,1),this.render()}}async _onEntryChange(e){const t=e.currentTarget,s=t.closest("tr.entry"),a=parseInt(s.dataset.index),i=parseInt(t.dataset.index),n=t.value;if("Number"===t.dataset.dtype){let e=parseFloat(n);isNaN(e)&&(e=0),this.isFlat?this.entries[a]=Math.floor(100*e)/100:this.entries[a][i]=Math.floor(100*e)/100}else this.isFlat?this.entries[a]=n:this.entries[a][i]=n}static open(e,t){const s=new this(e,t),a=Object.values(ui.windows).find((e=>e instanceof this&&e.id===s.id));a?a.render(!1,{focus:!0}):s.render(!0,{focus:!0})}}class ItemSelector extends FormApplication{constructor({actor:e,items:t,filter:s,empty:a=!0,selected:i=null}={},n){if(super(e,n),this.empty=a,this.selected=i||"",this.filterFunc=s,this.items=t??e?.items,!this.items)throw Error("No items list provided.")}get title(){return this.options.title||game.i18n.localize("PF1.Application.ItemSelector.Title")}get template(){return"systems/pf1/templates/apps/item-select.hbs"}static get defaultOptions(){return{...super.defaultOptions,classes:["pf1","item-selector"],scrollY:[".item-list"],height:"auto",submitOnClose:!1,submitOnChange:!0,closeOnSubmit:!1,resizable:!0}}getData(){this.actor&&(this.items=this.actor.items);const e=this.filterFunc?this.items.filter(this.filterFunc):[...this.items];return this.empty&&e.unshift({id:"",img:"icons/svg/cancel.svg",name:game.i18n.localize("PF1.None")}),{empty:this.empty,selected:this.selected||"",items:e}}close(...e){super.close(...e),this.resolve?.(null)}activateListeners(e){super.activateListeners(e);const t=e[0].querySelector("button.commit-select");t&&t.addEventListener("click",this._onSaveSelection.bind(this))}_onSaveSelection(e){this.resolve?.(this.selected||""),this.close()}_updateObject(e,t){this.selected=t.selected,this.render()}static wait({actor:e,items:t,filter:s,empty:a=!0,selected:i=null}={},n,o){const r=Object.values(ui.windows).find((e=>e instanceof pf1.applications.ItemSelector&&e.id===n.id));return r?(r.render(!1,{focus:!0}),null):new Promise((r=>{const l=new this({actor:e,items:t,filter:s,empty:a,selected:i},n);l.resolve=r,l.render(!0,o)}))}}class HelpBrowserPF extends Application{_backwardHistory=[];_forwardHistory=[];_currentPage={url:"Help/Home"};#a;constructor(...e){super(...e),this.#a=new showdown.Converter({extensions:[HelpBrowserPF.defaultExtensions],noHeaderId:!1,ghCompatibleHeaderId:!0,prefixHeaderId:"pf1-help-browser-"})}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["pf1","help-browser"],template:"systems/pf1/templates/apps/help-browser.hbs",minWidth:800,minHeight:450,width:960,height:600,resizable:!0,id:"pf1-help-browser"})}get title(){return game.i18n.localize("PF1.Help.Label")}get currentUrl(){return this._currentPage.url}async getData(){const e=await super.getData();return e.hasHistoryBack=this._backwardHistory.length>0,e.hasHistoryForward=this._forwardHistory.length>0,e.pageContent=this.#a.makeHtml(game.i18n.localize("PF1."+this.currentUrl)),e.isHome="Help/Home"===this.currentUrl,e}openUrl(e){let t;e.startsWith("/")&&(e=e.slice(1)),[e,t]=e.split("#"),this.currentUrl&&e!==this.currentUrl&&(this._backwardHistory.push(this.getCurrentHistoryObject()),this._forwardHistory.splice(0,this._forwardHistory.length)),this._currentPage={url:e},this.render(!0,{header:t})}async _render(e,t){await super._render(e,t);const s=this.element.find(".content")[0];if(this._currentPage.scrollTop)setTimeout((()=>{s.scrollTop=this._currentPage.scrollTop}),0);else if(t.header){const e=document.getElementById("pf1-help-browser-"+t.header);e&&setTimeout((()=>{e.scrollIntoView({block:"start"})}),0)}}getCurrentHistoryObject(){const e=this.element.find(".content")[0],t=e?.scrollTop??0;return{url:this.currentUrl,scrollTop:t}}backInHistory(){this._backwardHistory.length&&(this._forwardHistory.push(this.getCurrentHistoryObject()),this._currentPage=this._backwardHistory.pop(),this.render())}forwardInHistory(){this._forwardHistory.length&&(this._backwardHistory.push(this.getCurrentHistoryObject()),this._currentPage=this._forwardHistory.pop(),this.render())}activateListeners(e){const t=e.find("a[href]");for(const e of t){const t=e.getAttribute("href");e.removeAttribute("href"),e.dataset.url=t}e.on("click","a",(e=>{e.preventDefault();const t=e.currentTarget.dataset.url;t&&this.openUrl(t)})),e.find(".history-back").on("click",this.backInHistory.bind(this)),e.find(".history-forward").on("click",this.forwardInHistory.bind(this)),e.find(".history-home").on("click",(()=>this.openUrl("Help/Home")))}static get defaultExtensions(){return[{type:"output",regex:/<img.*?src="(.+?)".*?>/g,replace:function(e,t,s,a){const i=game.i18n.localize("PF1."+(t.startsWith("/")?t.slice(1):t));return e.replace(t,foundry.utils.getRoute("systems/pf1/"+i))}},{type:"output",regex:/<p>:::(\s\w+)?<\/p>/g,replace:function(e,t,s,a){return t?`<div class="${t.slugify()}">`:"</div>"}}]}}const U=new HelpBrowserPF;class ScriptEditor extends FormApplication{constructor(e={}){super(e),this.command=e.command||"",this.name=e.name||null,this.parent=e.parent,this.script=e.script,this.name?this.options.title=this.parent?`${this.parent.name}: ${this.name}`:this.name:this.options.title=this.parent?.name??game.i18n.localize("PF1.Unknown"),this._promises={submit:[]}}get id(){return`script-call-${this.parent.uuid.replaceAll(".","-")}-id-${this.script}`}get isEditable(){const e=this.parent;let t=this.options.editable&&e.isOwner;return e.pack&&game.packs.get(e.pack)?.locked&&(t=!1),t}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["pf1","script-editor"],template:"systems/pf1/templates/apps/script-editor.hbs",width:640,height:560})}getData(){const e={};return e.command=this.command||"",e.name=this.name,e}awaitResult(){let e;const t=new Promise((t=>{e=t}));return this._promises.submit.push({callback:e,promise:t,resolved:!1}),t}activateListeners(e){e.find("a.help-browser[data-url]").click(this._openHelpBrowser.bind(this))}_openHelpBrowser(e){e.preventDefault();const t=e.currentTarget;pf1.applications.helpBrowser.openUrl(t.dataset.url)}_updateObject(e,t){this.command=t.command,this.name=t.name||null;const s={command:this.command,name:this.name};this.resolvePromises("submit",s)}resolvePromises(e,t){for(const s of this._promises[e])s.resolved||(s.callback(t),s.resolved=!0)}async close(...e){super.close(...e),this.resolvePromises("submit",null)}}class SensesSelector extends DocumentSheet{static get defaultOptions(){const e=super.defaultOptions;return foundry.utils.mergeObject(e,{classes:["pf1","senses-selector"],template:"systems/pf1/templates/apps/senses-selector.hbs",width:500,closeOnSubmit:!0})}get title(){return`${game.i18n.localize("PF1.Senses")}: ${this.object.name}`}static get convertKeys(){return{dv:"distance",ts:"distance",bse:"distance",bs:"distance",sc:"distance",tr:"distance"}}async getData(){const e=this.document,t=foundry.utils.deepClone(e.system.traits?.senses??{});for(const[e,s]of Object.entries(this.constructor.convertKeys)){const a=t[e];"distance"===s&&a>0&&(t[e]=pf1.utils.convertDistance(a)[0])}const s="imperial"!==pf1.utils.getDistanceSystem();return{noSystemVision:!game.settings.get("pf1","systemVision")||(e.token?.getFlag("pf1","customVisionRules")??e.prototypeToken?.getFlag("pf1","customVisionRules"))||!1,senses:t,isMetric:s,gridUnits:s?game.i18n.localize("PF1.Distance.mShort"):game.i18n.localize("PF1.Distance.ftShort")}}async _updateObject(e,t){const s=(t=foundry.utils.expandObject(t)).system.traits.senses;if(Object.entries(this.constructor.convertKeys).forEach((([e,t])=>{const a=s[e];a>0&&"distance"===t&&(s[e]=pf1.utils.convertDistanceBack(a)[0])})),!this.document.isToken)for(const[e,t]of Object.entries(s))t||(delete s[e],s["-="+e]=null);return super._updateObject(e,t)}}class SkillEditor extends DocumentSheet{constructor(e,t,s,a={}){super(e,a),this.skillId=t,this.subSkillId=s,this._callbacks=[]}static get defaultOptions(){const e=super.defaultOptions;return{...e,width:380,template:"systems/pf1/templates/apps/skill-editor.hbs",dragDrop:[{dragSelector:null,dropSelector:"*"}],classes:[...e.classes,"pf1","skill-editor"],submitOnChange:!0,closeOnSubmit:!1,submitOnClose:!1}}get title(){return`${game.i18n.localize("PF1.EditSkill")}: ${this.skillName} – ${this.actor.name}`}get actor(){return this.document}get isSubSkill(){return!!this.subSkillId}get isStaticSkill(){return null!=pf1.config.skills[this.skillId]&&!this.isSubSkill}get skill(){return this.isSubSkill?this.actor.system.skills[this.skillId]?.subSkills[this.subSkillId]:this.actor.system.skills[this.skillId]}get skillName(){return this.isStaticSkill?pf1.config.skills[this.skillId]:this.skill.name}get skillTag(){return this.isStaticSkill?this.skillId:this.isSubSkill?this.subSkillId:this.skillId}async getData(){const e=await super.getData();e.config=pf1.config,e.skill=foundry.utils.mergeObject(this.skill,{skillId:this.skillId,subSkillId:this.subSkillId,isSubSkill:this.isSubSkill,name:this.skillName,static:this.isStaticSkill,tag:this.skillTag},{inplace:!1}),e.actorData=this.actor.toObject();try{const t=await fromUuid(e.skill.journal);e.journal=t.toObject(),e.journal.uuid=e.skill.journal,e.journal.documentType=t instanceof JournalEntryPage?"JournalEntryPage":"JournalEntry"}catch(t){e.journal=null}return e}addCallback(e){this._callbacks.push(e)}async _updateObject(e,t){e.preventDefault();const s={system:{skills:{}}},a=s.system.skills;t=foundry.utils.expandObject(t);const i=t.tag?.slugify({strict:!0}),n=t.skill,o=this.subSkillId,r=this.skillId;if(void 0===n.journal&&(n.journal??=this.skill.journal),void 0===n.custom&&(n.custom??=this.skill.custom),this.isStaticSkill||(n.background??=this.skill.background),!this.isStaticSkill&&!i)return void ui.notifications.error(game.i18n.localize("PF1.Error.EmptySkillTag"));const l=this.isSubSkill?i:null,c=this.isSubSkill?this.skillId:i,u=this.isSubSkill?i!==this.subSkillId:i!==this.skillId;if(u){if(i in(this.isSubSkill?this.actor.system.skills[c].subSkills:this.actor.system.skills)){const e={tag:this.isSubSkill?`${this.skillId}.subSkills.${i}`:i};return void ui.notifications.error(game.i18n.format("PF1.Error.SkillTagAlreadyExists",e))}}return i&&(this.isSubSkill?this.subSkillId=i:this.skillId=i),this.isSubSkill?(a[c]={subSkills:{[l]:n}},u&&(a[c].subSkills["-="+o]=null)):(a[c]=n,u&&(a["-="+r]=null)),this.actor.update(s)}async close(...e){await super.close(...e),this._callbacks.forEach((e=>e()))}_canDragDrop(){return this.isEditable}async _onDrop(e){const t=TextEditor.getDragEventData(e);if("JournalEntryPage"!==t.type&&"JournalEntry"!==t.type)return;const s=await CONFIG[t.type].documentClass.implementation.fromDropData(t);s&&this._updateObject(e,this._getSubmitData({"skill.journal":s.uuid}))}activateListeners(e){super.activateListeners(e),e.find(".compendium-page").on("click",this._openCompendiumEntry.bind(this)),e.find(".compendium-controls a").on("click",this._onCompendiumControls.bind(this)),e.find('button[type="submit"]').on("click",(e=>{e.preventDefault();this.element[0].querySelector("form").reportValidity()&&this.close({submit:!0})}))}async _openCompendiumEntry(e){e.preventDefault();openJournal(e.currentTarget.closest(".compendium-entry").dataset.compendiumEntry)}async _onCompendiumControls(e){e.preventDefault();if(e.currentTarget.classList.contains("delete"))return this._updateObject(e,this._getSubmitData({"skill.journal":null}))}}class ContentSourceEditor extends DocumentSheet{get title(){const e=game.i18n.format("PF1.ContentSource.Title",{name:this.document.name}),t=this.document.actor;return t?e+" – "+t.name:e}get template(){return"systems/pf1/templates/apps/content-source-editor.hbs"}static get defaultOptions(){const e=super.defaultOptions;return{...e,tabs:[{contentSelector:"section.tabs",navSelector:"nav.tabs[data-group='sources']",group:"sources"}],dragDrop:[{dragSelector:"nav.tabs .source",dropSelector:null}],width:540,height:"auto",resizable:!0,submitOnChange:!0,submitOnClose:!0,closeOnSubmit:!1,sheetConfig:!1,classes:[...e.classes,"pf1","content-source-editor"]}}getData(){let e=!0,t=this.document.system.sources??[];return t.some((e=>0===Object.keys(e).length))&&(e=!1),t=t.map((e=>{const t=pf1.registry.sources.get(e.id);return{...e,registry:t}})),0===t.length&&(t.push({stub:!0}),e=!1),{sources:t,registry:pf1.registry.sources,uuid:this.document.uuid,canAdd:e}}_getHeaderButtons(){return super._getHeaderButtons().filter((e=>"import"!==e.class))}async _onAction(e){e.preventDefault();const t=e.target;if(!t.classList.contains("disabled"))switch(t.dataset.action){case"add":{this.form.disabled=!0;const e=this.document.system.sources??[];await this.document.update({"system.sources":[...e,{}]}),this.activateTab("source-"+e.length);break}case"delete":{const e=Number(t.dataset.index);if(Number.isFinite(e)&&e>=0){const t=this.document.system.sources[e];if(!t)return void this.render();const s=t.title||pf1.registry.sources.get(t.id)?.name||game.i18n.localize("PF1.ContentSource.NewEntry");if(!0!==await Dialog.prompt({title:game.i18n.format("PF1.ContentSource.DelTitle",{entry:s}),content:game.i18n.format("PF1.ContentSource.DelEntryDesc",{entry:s}),callback:()=>!0,close:()=>!1,rejectClose:!1}))return;this.form.disabled=!0;await this.document.update({"system.sources":this.document.system.sources.filter(((t,s)=>s!==e))})||this.render()}break}default:console.warn("Unrecognized action:",t.dataset.action,t)}}_canDragStart(e){return!this.document.inContainer}_canDragDrop(e){return!this.document.inContainer&&this.isEditable}_onDragStart(e){const t=e.currentTarget,s=Number(t.dataset.index),a=this.document.system.sources?.[s];if(!a)return!1;const i={type:"pf1ContentSourceEntry",uuid:this.document.uuid,index:s,data:{...a}};e.dataTransfer.setData("text/plain",JSON.stringify(i))}async _onDrop(e){const t=TextEditor.getDragEventData(e);if("pf1ContentSourceEntry"===t.type)this._onDropContentSource(e,t)}async _onDropContentSource(e,t){let s=e.target;void 0===s.dataset.index&&(s=s.closest(".source[data-index]"));let a=Number(s?.dataset.index);this.form.disabled=!0;const i=t.data,n=fromUuidSync(t.uuid);if(n)if(n===this.document){if(!Number.isFinite(a)||a<0)return;if(a===t.index)return;const e=foundry.utils.deepClone(this.document.system.sources??[]),[s]=e.splice(t.index,1);e.splice(a,0,s),this.document.update({"system.sources":e})}else{const e=foundry.utils.deepClone(this.document.system.sources??[]);if(i.id&&e.some((e=>e.id===i.id)))return;Number.isFinite(a)||(a=e.length),e.splice(a,0,i),this.document.update({"system.sources":e})}}activateListeners(e){super.activateListeners(e),this.form.querySelectorAll("header .control").forEach((e=>e.addEventListener("click",this._onAction.bind(this))))}static open(e){const t=Object.values(ui.windows).find((t=>t instanceof this&&t.object===e))??new this(e);return t.render(!0,{focus:!0}),t}_updateObject(e,t){(t=foundry.utils.expandObject(t)).system.sources=Object.values(t.system.sources);const s=t.system.sources;for(const e of s){let t=!0;for(const[s,a]of Object.entries(e))null===a||""===a?delete e[s]:t=!1;pf1.registry.sources.get(e.id)&&(delete e.title,delete e.publisher),t&&(e.empty=!0)}return t.system.sources=t.system.sources.filter((e=>!0!==e.empty)),this.object.update(t)}}class ExperienceDistributor extends FormApplication{_bonusXP=0;_actors=[];constructor(e=[],t={}){super(void 0,t),this._actors=e.map((e=>this.constructor.getActorData(e))).filter((e=>null!=e))}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["pf1","xp-distributor"],title:game.i18n.localize("PF1.Application.XPDistributor.Title"),template:"systems/pf1/templates/apps/xp-distributor.hbs",dragDrop:[{dragSelector:null,dropSelector:"form"}],submitOnChange:!1,submitOnClose:!1,closeOnSubmit:!1,width:430,height:794,resizable:!0,scrollY:[".selectors"]})}getData(){return{actors:{characters:this.getCharacters(),npcs:this.getNPCs()},xp:{total:this.getTotalExperience(),split:this.getSplitExperience()},bonusXP:this._bonusXP}}getCharacters(){return this._actors.filter((e=>!e.isNPC))}getNPCs(){return this._actors.filter((e=>e.isNPC))}activateListeners(e){super.activateListeners(e);const t=this.form,addListener=(e,s,a)=>t.querySelectorAll(e).forEach((e=>e.addEventListener(s,a)));addListener(".character-selector .actor, .npc-selector .actor","click",this._onClickActor.bind(this)),addListener(".bonus-xp input","change",(e=>{e.preventDefault(),this._bonusXP=parseInt(e.currentTarget.value),isNaN(this._bonusXP)&&(this._bonusXP=0),this.render()})),addListener("button.cancel","click",this._onCancel.bind(this)),addListener("button[data-reward]","click",this._onSubmit.bind(this))}async _onDrop(e){e.preventDefault();const t=TextEditor.getDragEventData(e);if("Actor"!==t.type)return;const s=await pf1.documents.actor.ActorPF.fromDropData(t);if("character"!==s.type||null==this._actors.find((e=>e.actor===s))){const e=this.constructor.getActorData(s);e.selected=!0,this._actors.push(e),this.render()}}_onClickActor(e){e.preventDefault();const t=e.currentTarget,s=t.dataset.id,a=this._actors.find((e=>e.id===s));a&&(a.selected?(a.selected=!1,t.classList.remove("toggled")):(a.selected=!0,t.classList.add("toggled")),this.render())}async _onSubmit(e){e.preventDefault();const t="split"===e.currentTarget.dataset.reward?this.getSplitExperience():this.getTotalExperience();if(t>0){const e=this.getCharacters().filter((e=>e.selected));for(const s of e){const e={value:t};Hooks.callAll("pf1GainXp",s.actor,e),s.value=Math.floor(e.value)}const s=e.filter((e=>e.value>0&&Number.isSafeInteger(e.value))).map((e=>({_id:e.actor.id,"system.details.xp.value":e.actor.system.details.xp.value+e.value})));Actor.implementation.updateDocuments(s)}this.close()}_onCancel(e){e.preventDefault(),this.close()}getTotalExperience(){return this.getNPCs().filter((e=>e.selected)).reduce(((e,t)=>e+t.xp),this._bonusXP)}getSplitExperience(){const e=this.getCharacters().filter((e=>e.selected));if(0==e.length)return 0;const t=this.getTotalExperience();return Math.floor(t/e.length)}static getActorData(e){if(!(e instanceof Actor))return null;const t=e.system.details?.xp?.value??0;return{id:foundry.utils.randomID(16),isNPC:"character"!==e.type,actor:e,selected:this._shouldActorBeSelected(e),xp:t,xpString:t.toLocaleString()}}static _shouldActorBeSelected(e){if("character"===e.type)return!0;return e.system.attributes?.hp?.value<0}static fromCombat(e){const t=new this(e.combatants.map((e=>e.actor)));return t.getCharacters().length>0?t.render(!0):t.close(),t}}class ChangeEditor extends ItemSheet{change;constructor(e,t){super(e.parent,t),this.change=e}static get defaultOptions(){const e=super.defaultOptions;return{...e,classes:[...e.classes,"pf1","change-editor"],template:"systems/pf1/templates/apps/change-editor.hbs",submitOnChange:!0,submitOnClose:!0,closeOnSubmit:!1,sheetConfig:!1,width:460,height:"auto"}}_getHeaderButtons(){return super._getHeaderButtons().filter((e=>"close"===e.class))}_createDocumentIdLink(e){const t=e.find(".window-title"),s=game.i18n.localize("PF1.Change"),a=document.createElement("a");a.classList.add("document-id-link"),a.setAttribute("alt",game.i18n.localize("PF1.Application.ChangeEditor.CopyId")),a.dataset.tooltip=`${s}: ${this.change.id}`,a.dataset.tooltipDirection="UP",a.innerHTML='<i class="fa-solid fa-passport"></i>',a.addEventListener("click",(e=>{e.preventDefault(),game.clipboard.copyPlainText(this.object.id),ui.notifications.info(game.i18n.format("DOCUMENT.IdCopiedClipboard",{label:s,type:"id",id:this.change.id}))})),t.append(a)}get title(){let e=game.i18n.localize("PF1.Application.ChangeEditor.Label");return e+=": "+this.item.name,this.actor&&(e+=" – "+this.actor.name),e}get id(){return super.id+"-Change-"+this.change.id}getData(){const e=this.change,t=this.actor,s=this.item,a=getBuffTargets(t)[e.target];return{config:pf1.config,actor:t,item:s,change:e,isAdd:"add"===e.operator,isSet:"set"===e.operator,isValid:!!a,isValidType:!!pf1.config.bonusTypes[e.type],isValidOp:["add","set"].includes(e.operator),isDeferred:e.isDeferred,label:a?.label||e.target}}_onChangeTargetControl(e){e.preventDefault(),e.currentTarget;const t=getBuffTargetDictionary(this.item.actor),s=new Set(["skill"]),a=game.settings.get("core","language");for(const e of t)s.has(e.key)&&e.items.sort(((e,t)=>e.label.localeCompare(t.label,a)));const i=this.change?.target?.split(".")[0],n=pf1.config.buffTargets[i]?.category??i;new Widget_CategorizedItemPicker({title:"PF1.Application.ChangeTargetSelector.Title",classes:["change-target-selector"]},t,(e=>{e&&this.change.update({target:e})}),{category:n,item:this.change?.target}).render(!0)}_openHelpBrowser(e){e.preventDefault();const t=e.currentTarget;pf1.applications.helpBrowser.openUrl(t.dataset.url)}async _validateFormula(e){const t=e.value;if(!t)return;let s;try{s=Roll.create(t),await s.evaluate()}catch(t){return e.dataset.tooltip=t.message,void e.setCustomValidity(t.message)}e.classList.contains("deterministic")&&(s.isDeterministic||(e.dataset.tooltip="PF1.WarningFormulaMustBeDeterministic",e.setCustomValidity(game.i18n.localize("PF1.WarningFormulaMustBeDeterministic"))))}activateListeners(e){super.activateListeners(e),e.find(".target .change-target").click(this._onChangeTargetControl.bind(this)),e.find("a.help-browser[data-url]").click(this._openHelpBrowser.bind(this)),e.find("input.formula").each((async(e,t)=>this._validateFormula(t))),this.form.reportValidity()}static async wait(e,t){const s=Object.values(ui.windows).find((t=>t.change===e&&t instanceof this));return s?(s.render(!0,{focus:!0}),s):new Promise((s=>{const a=new this(e,t);a.resolve=s,a.render(!0,{focus:!0})}))}_updateObject(e,t){const s=foundry.utils.expandObject(t).change;this.change.update(s)}}class ItemDirectoryPF extends ItemDirectory{static get defaultOptions(){const e=super.defaultOptions;return e.renderUpdateKeys.push("system.unidentified.name","system.identified"),e}async _render(e=!1,t={}){const{action:s,data:a,documentType:i}=t;return s&&!["create","update","delete"].includes(s)?this:"Folder"===i||"update"!==s||a.some((e=>this.options.renderUpdateKeys.some((t=>void 0!==foundry.utils.getProperty(e,t)))))?(this.initialize(),SidebarTab.prototype._render.call(this,e,t)):void 0}}class Troubleshooter extends Application{unlock=!1;migrating={world:!1,modules:!1};get title(){return game.i18n.localize("PF1.Troubleshooter.Title")}get template(){return"systems/pf1/templates/apps/troubleshooter.hbs"}static get defaultOptions(){const e=super.defaultOptions;return{...e,classes:[...e.classes,"pf1","troubleshooter"],id:"pf1-troubleshooter",width:460}}getData(){return{isGM:game.user.isGM,unlockPacks:this.unlock,migrating:this.migrating,links:{help:`<a data-action='help'>${game.i18n.localize("PF1.Troubleshooter.Steps.HelpLink")}</a>`,report:`<a href="https://gitlab.com/foundryvtt_pathfinder1e/foundryvtt-pathfinder1/-/issues">${game.i18n.localize("PF1.Troubleshooter.Steps.ReportLinkText")}</a>`,foundry:{kb:`<a href="https://foundryvtt.com/kb/">${game.i18n.localize("PF1.Troubleshooter.Steps.FoundryLink")}</a>`,discord:'<a href="https://discord.gg/foundryvtt">Foundry VTT</a>',channel:"#pf1"},faq:"https://gitlab.com/foundryvtt_pathfinder1e/foundryvtt-pathfinder1/-/wikis/FAQs",helpmodule:'<a href="https://foundryvtt.com/packages/find-the-culprit">Find the Culprit</a>'}}}async _runMigration(e){const t=this.unlock??!1,s=e.target;if(s.disabled)return;s.classList.remove("finished"),s.disabled=!0,s.classList.add("active");const a=s.dataset.target,i=s.closest(".window-content").getBoundingClientRect().top+20;switch(a){case"world":this.migrating.world=!0,await pf1.migrations.migrateWorld({unlock:t,dialog:{top:i}}),this.migrating.world=!1;break;case"modules":this.migrating.modules=!0,await pf1.migrations.migrateModules({unlock:t,dialog:{top:i}}),this.migrating.modules=!1;break;default:throw Error(`Unrecognized migration target: "${a}"`)}this.element[0].querySelector("form").classList.remove("migrating"),s.disabled=!1,s.classList.remove("active"),s.classList.add("finished")}_openHelp(e){pf1.applications.helpBrowser.openUrl("Help/Home")}activateListeners(e){super.activateListeners(e);const[t]=e,s=t.querySelectorAll("button[data-action='migrate']");for(const e of s)e.addEventListener("click",this._runMigration.bind(this));if(pf1.migrations.isMigrating){this.migrating.world=!0,this.migrating.modules=!0;for(const e of s)e.disabled=!0,e.classList.add("active");Hooks.once("pf1MigrationFinished",(()=>{for(const e of s)e.disabled=!1,this.migrating.world=!1,this.migrating.modules=!1}))}t.querySelector("input[name='unlock']").addEventListener("change",(e=>this.unlock=e.target.checked)),t.querySelector("a[data-action='help']").addEventListener("click",this._openHelp.bind(this))}static open(){(new Troubleshooter).render(!0,{focus:!0})}}class ActorSelector extends FormApplication{static searchOptions={delay:250,value:"",event:null,compositioning:!1,effectiveSearch:""};constructor({actors:e,filter:t,disableUnowned:s=!0,ownership:a=CONST.DOCUMENT_OWNERSHIP_LEVELS.LIMITED,selected:i=null,showUnowned:n=!0}={},o){if(super({},o),this.actors=e??[...game.actors],this.disableUnowned=s,this.filterFunc=t,this.ownership=a,this.search={...ActorSelector.searchOptions},this.selected=i||"",this.showUnowned=n,!this.actors)throw Error("No actors list provided.")}get title(){return this.options.title||game.i18n.localize("PF1.Application.ActorSelector.Title")}get template(){return"systems/pf1/templates/apps/actor-select.hbs"}static get defaultOptions(){const e=super.defaultOptions;return{...e,classes:[...e.classes,"pf1","actor-selector"],scrollY:[".actor-list"],height:"auto",submitOnClose:!1,submitOnChange:!0,closeOnSubmit:!1,resizable:!0}}getData(){const e=!!game.users.activeGM;let t=this.filterFunc?this.actors.filter(this.filterFunc):[...this.actors];this.search.value&&(t=t.filter((e=>e.name.toLowerCase().includes(this.search.value.toLowerCase())))),t.sort(((e,t)=>e.name.localeCompare(t.name)));const s=t.filter((e=>e.isOwner)).map((e=>({id:e.id,name:e.name,img:e.img,isDisabled:!1}))),a=t.filter((e=>!e.isOwner&&e.testUserPermission(game.user,this.ownership))).map((t=>({id:t.id,name:t.name,img:t.img,isDisabled:!e&&this.disableUnowned})));return{selected:this.selected||"",ownedActors:s,unownedActors:a,showUnowned:!game.user.isGM&&this.showUnowned,searchTerm:this.search.value}}close(...e){super.close(...e),this.resolve?.(null)}activateListeners(e){super.activateListeners(e);e[0].querySelector("button.commit-select").addEventListener("click",this._onSaveSelection.bind(this));const t=e.find(".search-input");t.on("keyup change",this._searchFilterChange.bind(this)),t.on("compositionstart compositionend",this._searchFilterCompositioning.bind(this)),e.find(".clear-search").on("click",this._clearSearch.bind(this))}_onSaveSelection(e){this.resolve?.(this.selected||""),this.close()}_updateObject(e,t){this.selected=t.selected,this.render()}_searchFilterCommit(e){const t=this.search.value.toLowerCase();this.search.effectiveSearch!==t&&(this.search.effectiveSearch=t,this.render(!0))}_clearSearch(e){const t=$(e.target).prev(".search-input");this.search.value="",t.val("").trigger("change")}_searchFilterCompositioning(e){this.search.compositioning="compositionstart"===e.type}_searchFilterChange(e){e.preventDefault(),e.stopPropagation();const t=e.target.value,s=this.search.value!==t;(this.search.compositioning||s)&&clearTimeout(this.search.event),this.search.compositioning||(this.search.value=t,"keyup"===e.type?s&&(this.search.event=setTimeout((()=>this._searchFilterCommit(e)),this.search.delay)):this._searchFilterCommit(e))}static wait({actors:e,filter:t,disableUnowned:s=!0,ownership:a=CONST.DOCUMENT_OWNERSHIP_LEVELS.LIMITED,selected:i=null,showUnowned:n=!0}={},o,r){return new Promise((l=>{const c=new this({actors:e,filter:t,disableUnowned:s,ownership:a,selected:i,showUnowned:n},o);c.resolve=l,c.render(!0,r)}))}}class SplitStack extends Dialog{static async wait({title:e,initial:t=1,step:s=1,total:a,css:i=[]}={},n={}){if(a<=1)return null;if(2==a)return[1,1];s||=1,t=Math.clamped(t||0,1,a);const o=a-1,r=await renderTemplate("systems/pf1/templates/apps/split-stack.hbs",{initial:t,keep:a-t,max:o});return super.wait({title:e,content:r,buttons:{split:{label:game.i18n.localize("PF1.Split"),callback:async([e])=>{const t=Math.clamped(e.querySelector("input.split").valueAsNumber,1,o);return Number.isNumeric(t)?[Math.max(1,a-t),t]:null}}},render:([e])=>{const t=e.querySelector("input.slider"),s=e.querySelector("input.left"),i=e.querySelector("input.split");t.addEventListener("input",(e=>{const t=e.target.valueAsNumber;i.value=t,s.value=a-t}),{passive:!0}),i.addEventListener("input",(e=>{let n=e.target.valueAsNumber;n>o?(i.value=o,n=o):n<1&&(i.value=1,n=1),t.value=n,s.value=a-n}),{passive:!0}),s.addEventListener("input",(e=>{let n=a-e.target.valueAsNumber;n>a?(s.value=o,n=1):n<1&&(s.value=1,n=o),i.value=n,t.value=n}))},close:()=>null,default:"split"},{classes:[...Dialog.defaultOptions.classes,"pf1","split-stack",...i]},n)}}const q=Object.freeze(Object.defineProperty({__proto__:null,ActionSelector,ActorSelector,ActorTraitSelector,AttackDialog,ChangeEditor,ChangeLogWindow,ContentSourceEditor,CurrencyTransfer,DamageTypeSelector,EntrySelector,ExperienceDistributor,HelpBrowserPF,ItemDirectoryPF,ItemSelector,LevelUpForm,PointBuyCalculator,ScriptEditor,SensesSelector,SkillEditor,SplitStack,TooltipPF,Troubleshooter,VisionSharingSheet,Widget_CategorizedItemPicker,Widget_ItemPicker,actor:A,compendiumBrowser:H,compendiums:{},component:O,helpBrowser:U,item:I,settings:x},Symbol.toStringTag,{value:"Module"}));class ActiveEffectPF extends ActiveEffect{async _preCreate(e,t,s){await super._preCreate(e,t,s);const a=this.actor;if(!a)return;const i=a.getCombatants()[0]?.combat;i&&void 0===this.getFlag("pf1","initiative")&&this.updateSource({"flags.pf1.initiative":i.initiative})}_onCreate(e,t,s){super._onCreate(e,t,s),s===game.user.id&&(this.parent instanceof Actor||this.isTracker&&(this.isSuppressed||this.parent.isActive||this.parent.setActive(!0,{pf1:{reason:"effect-creation"}})))}_onDelete(e,t){super._onDelete(e,t),t===game.user.id&&(this.parent instanceof Actor||this.isTracker&&e.pf1?.delete!==this.parent.uuid&&this.parent.isActive&&(e.pf1??={},e.pf1.startTime=this.duration.startTime,this.parent.setActive(!1,e)))}_onUpdate(e,t,s){super._onUpdate(e,t,s),game.user.id===s&&(this.isSuppressed||void 0!==e.disabled&&this.parent instanceof Item&&this.parent.setActive?.(!this.disabled,t))}get actor(){const e=this.parent;return e instanceof Actor?e:e?.actor||null}get isTemporary(){return!1!==this.getFlag("pf1","show")&&!game.settings.get("pf1","hideTokenConditions")&&(super.isTemporary||this.getFlag("pf1","show")||!1)}get _hasDuration(){return(this.duration.seconds??(this.duration.rounds||this.duration.turns)??0)>0}get initiative(){return this.getFlag("pf1","initiative")}get isTracker(){return this.getFlag("pf1","tracker")??!1}get isSuppressed(){return this.parent instanceof Item&&!1===this.parent?.isActive}}Hooks.on("getCombatTrackerEntryContext",(function addCombatTrackerContextOptions(e,t){t.push({name:"PF1.DuplicateInitiative",icon:'<i class="fas fa-dice-d20"></i>',callback:([e])=>async function duplicateCombatantInitiativeDialog(e){const t=game.combat.combatants.get(e);if(!t)return void ui.notifications.warn(game.i18n.localize("PF1.Warning.NoCombatantFound"));const s=await pf1.utils.dialog.getNumber({title:`${game.i18n.localize("PF1.DuplicateInitiative")}: ${t.name}`,label:game.i18n.localize("PF1.InitiativeOffset"),initial:0,classes:["duplicate-initiative"]});return Number.isFinite(s)?t.duplicateWithData({initiative:(t.initiative??0)+s}):void 0}(e.dataset.combatantId)})}));class CombatPF extends Combat{async rollInitiative(e,{formula:t=null,d20:s,bonus:a=null,rollMode:i,updateTurn:n=!0,messageOptions:o={},skipDialog:r=null}={}){r??=getSkipActionPrompt(),e=Array.isArray(e)?e:[e];const l=this.combatant?.id,c=this.combatants.get(e[0]),u=(e.length>1?c?.actor?.name:c?.token?.name)??c?.name;if(!r){const e=await Combat.implementation.showInitiativeDialog({d20:s,bonus:a,rollMode:i,name:u});if(i=e.rollMode,a=e.bonus||"",s=e.d20,e.stop)return this}const[p,m]=await e.reduce((async(e,n,r)=>{const l=await e,[c,u]=l,p=this.combatants.get(n);if(!p?.isOwner)return e;const m=p.getInitiativeRoll(t,s,a);m.options.flavor=game.i18n.localize("PF1.Initiative"),await m.evaluate(),c.push({_id:n,initiative:m.total});(p.token?.hidden||p.hidden)&&(i=o.rollMode??"gmroll"),m.err&&ui.notifications.warn(m.err.message);const[d,h]=p.actor?.getInitiativeContextNotes?.()??[],g={formula:m.formula,tooltip:await m.getTooltip(),total:m.total,extraText:h};i&&(o.rollMode=i);let f={speaker:ChatMessage.getSpeaker({actor:p.actor,token:p.token,alias:p.name}),...o};return foundry.utils.setProperty(f,"flags.core.initiativeRoll",!0),f=await m.toMessage(f,{create:!1,rollMode:i,subject:{core:"init"},chatTemplateData:g}),r>0&&(f.sound=null),u.push(f),e}),[[],[]]);if(!p.length)return this;await this.updateEmbeddedDocuments("Combatant",p),n&&l&&await this.update({turn:this.turns.findIndex((e=>e.id===l))});return{combat:this,messages:await ChatMessage.implementation.create(m,{rollMode:i})}}static async showInitiativeDialog({d20:e=null,bonus:t=null,name:s}={}){const a={d20:e,bonus:t,rollMode:game.settings.get("core","rollMode"),rollModes:CONFIG.Dice.rollModes};return Dialog.wait({title:game.i18n.format("PF1.InitiativeCheck",{name:s}),content:await renderTemplate("systems/pf1/templates/chat/roll-dialog.hbs",a),buttons:{normal:{label:game.i18n.localize("PF1.Roll"),callback:e=>new FormDataExtended(e.querySelector("form")).object}},default:"normal",close:e=>({stop:!0})},{subject:{core:"init"},classes:[...Dialog.defaultOptions.classes,"pf1","roll-prompt","roll-initiative"],jQuery:!1},{focus:!0})}_onUpdate(e,t,s){void 0===e.turn&&void 0===e.round||this._onNewTurn(e,t,s)}async _preUpdate(e,t,s){await super._preUpdate(e,t,s),("turn"in e||"round"in e)&&(t.pf1??={},t.pf1.from={turn:this.turn,round:this.round})}async _onNewTurn(e,t,s){if(this._isForwardTime(e,t)){if(t.pf1?.from){const e=this._detectSkippedTurns(t.pf1.from,t);game.users.activeGM?.isSelf&&this._handleSkippedTurns(e,t);const s=this.turns.at(this.turn-1);e.has(s)||this._processEndTurn(t.pf1?.from,t)}this._processTurnStart(e,t,s),this._processInitiative()}}_isForwardTime(e,t){const s=t.pf1.from.turn,a=t.pf1.from.round,i=e.turn??s,n=(e.round??a)-a;return!(n<0)&&!(0==n&&i-s<=0)}_detectSkippedTurns({turn:e,round:t}={},s){const a=this.round!==t,i=new Set;if(!a&&e+1===this.turn)return i;for(const[t,s]of this.turns.entries())!a&&t<=e||(t<this.turn||a&&t>e)&&i.add(s);return Hooks.callAll("pf1CombatTurnSkip",this,i,s),i}_handleSkippedTurns(e,t){const s=this.turn,a=this,i=t.advanceTime??0;for(const t of e){const e=t.actor;if(!e)continue;const n=i+(this.turns.findIndex((e=>e===t))>s)?-CONFIG.time.roundTime:0;e.expireActiveEffects?.({timeOffset:i+n,combat:a,event:"turnEnd"})}}async _processEndTurn({turn:e}={},t={}){const s=this.turns.at(e).actor;if(!s)return;const a=s.activeOwner;if(!a?.isSelf)return;let i=t.advanceTime??0;e-1<0&&(i-=CONFIG.time.roundTime);try{await(s.expireActiveEffects?.({timeOffset:i,combat:this,event:"turnEnd"}))}catch(e){console.error(e,s)}}async _processTurnStart(e,t,s){const a=this.combatant?.actor;if(!a)return;const i=a.activeOwner;if(!i?.isSelf)return;const n=t.advanceTime??0;try{await(a.expireActiveEffects?.({timeOffset:n,combat:this,event:"turnStart"}))}catch(e){console.error(e,a)}try{await(a.rechargeItems?.({period:"round",exact:!0}))}catch(e){console.error(e,a)}}_processInitiative(){if(!game.users.activeGM?.isSelf)return;const e=this.initiative;for(const t of this.combatants){if(t.isDefeated)continue;const s=t.actor;s&&s.expireActiveEffects?.({combat:this,initiative:e})}}_onDelete(e,t){if(super._onDelete(e,t),game.user.id!==t)return;if(!this.started)return;const s=game.settings.get("pf1","experienceConfig");if(s.disable)return;s.openDistributor^pf1.documents.settings.getSkipActionPrompt()&&pf1.applications.ExperienceDistributor.fromCombat(this)}get initiative(){return this.combatant?.initiative}}class CombatantPF extends Combatant{updateResource(){return this.actor&&this.combat?this.resource=foundry.utils.getProperty(this.actor.system,this.parent.settings.resource)??null:this.resource=null}duplicateWithData(e={},t={}){return console.debug("Duplicating combatant:",this),t.parent??=this.combat,this.constructor.create(foundry.utils.mergeObject(this.toObject(),e),t)}getInitiativeRoll(e,t=null,s=null){e||=this._getInitiativeFormula(t);const a=this.actor?.getRollData()||{};return s&&(a.bonus=s,e+=" + @bonus"),new pf1.dice.D20RollPF(e,a)}_getInitiativeFormula(e){e||=pf1.dice.D20RollPF.standardRoll;const t=[e,`@attributes.init.total[${game.i18n.localize("PF1.Initiative")}]`],s=this.actor;s&&game.settings.get("pf1","initiativeTiebreaker")&&t.push(`(@attributes.init.total / 100)[${game.i18n.localize("PF1.Tiebreaker")}]`);const a=CONFIG.Combat.initiative.formula?CONFIG.Combat.initiative.formula.split(/\s*\+\s*/):t;return s?a.filter((e=>!!e)).join(" + "):a[0]||"0"}}const getLeftRight=e=>[e+"Left",e+"Right"].map((e=>({key:e}))),W=getLeftRight("Shift"),G=getLeftRight("Control"),registerSystemControls=()=>{game.keybindings.register("pf1","skipConfirmPrompt",{name:"PF1.KEYBINDINGS.SkipConfirmPrompt.Name",uneditable:W,onDown:()=>{pf1.skipConfirmPrompt=!0},onUp:()=>{pf1.skipConfirmPrompt=!1}}),game.keybindings.register("pf1","forceShowItem",{name:"PF1.KEYBINDINGS.ForceShowItem.Name",hint:"PF1.KEYBINDINGS.ForceShowItem.Hint",uneditable:G,onDown:()=>{pf1.forceShowItem=!0},onUp:()=>{pf1.forceShowItem=!1}}),game.keybindings.register("pf1","hideTokenTooltip",{name:"PF1.KEYBINDINGS.HideTokenTooltip.Name",hint:"PF1.KEYBINDINGS.HideTokenTooltip.Hint",uneditable:G,onDown:()=>pf1.documents.controls._hideTokenTooltip(!0),onUp:()=>pf1.documents.controls._hideTokenTooltip(!1)}),game.keybindings.register("pf1","hideTokenTooltipGMInfo",{name:"PF1.KEYBINDINGS.HideTokenTooltipGMInfo.Name",uneditable:W,restricted:!0,onDown:()=>pf1.documents.controls._hideTokenTooltipGMInfo(!0),onUp:()=>pf1.documents.controls._hideTokenTooltipGMInfo(!1)}),game.keybindings.register("pf1","stickyTokenTooltip",{name:"PF1.KEYBINDINGS.StickyTokenTooltip.Name",hint:"PF1.KEYBINDINGS.StickyTokenTooltip.Hint",onDown:()=>pf1.documents.controls._stickyTokenTooltip(!0),onUp:()=>pf1.documents.controls._stickyTokenTooltip(!1)})},Z=Object.freeze(Object.defineProperty({__proto__:null,_hideTokenTooltip:e=>{pf1.tooltip&&(!0===game.settings.get("pf1","tooltipConfig")?.hideWithoutKey?pf1.tooltip.forceHide=!e:pf1.tooltip.forceHide=e,pf1.tooltip.refresh())},_hideTokenTooltipGMInfo:e=>{pf1.tooltip&&(pf1.tooltip.forceHideGMInfo=e,pf1.tooltip.refresh())},_stickyTokenTooltip:e=>{pf1.tooltip&&(pf1.tooltip.sticky=e)},registerSystemControls},Symbol.toStringTag,{value:"Module"}));class TokenDocumentPF extends TokenDocument{async _preCreate(e,t,s){await super._preCreate(e,t,s),this._preCreateSetSize()}async _preUpdate(e,t,s){if(await super._preUpdate(e,t,s),!1===t.recursive)return;const a=e.flags?.pf1;if(a){const e=["staticSize","disableLowLight","customVisionRules"];for(const t of e)!1===a[t]&&(a["-="+t]=null,delete a[t])}}_preCreateSetSize(){if(!this.actor)return;if(this.getFlag("pf1","staticSize"))return;const e=pf1.config.tokenSizes[this.actor.system.traits?.size];e&&this.updateSource({width:e.w,height:e.h,texture:{scaleX:e.scale*this.actor.prototypeToken.texture.scaleX,scaleY:e.scale*this.actor.prototypeToken.texture.scaleY}})}static getTrackedAttributes(e,t=[]){const s=super.getTrackedAttributes(e,t);return e||s.value.push(["attributes","hp","temp"],["attributes","hp","nonlethal"],["attributes","ac","normal","total"]),s}getBarAttribute(e,{alternative:t=null}={}){let s;try{s=super.getBarAttribute(e,{alternative:t})}catch(e){s=null}s?.attribute.startsWith("resources.")&&(s.editable=!0);if(["attributes.hp","attributes.wounds","attributes.vigor"].includes(s?.attribute)){const e=foundry.utils.getProperty(this.actor?.system,s.attribute+".temp")||0;s.value+=e,s.editable=!0}return s}prepareBaseData(){this._syncSenses(),super.prepareBaseData()}_syncSenses(){if(!this.actor)return;if(!game.settings.get("pf1","systemVision"))return;if(this.getFlag("pf1","customVisionRules"))return;if(this.detectionModes=[],!this.sight.enabled)return;const e=this._source.sight.range;this.detectionModes=[],this.sight.visionMode="basic";const t={id:DetectionMode.BASIC_MODE_ID,enabled:!0,range:e};this.detectionModes.push(t);const s=this.actor?.system?.traits?.senses??{},a=s.dv??0;a>0&&(this.sight.visionMode="darkvision",t.range=Math.max(e,pf1.utils.convertDistance(a)[0])),s.si&&this.detectionModes.push({id:"seeInvisibility",enabled:!0,range:t.range});const i=s.tr??0;if(i>0){const e=pf1.utils.convertDistance(i)[0];t.range=Math.max(e,t.range),i>a&&(this.sight.visionMode="basic"),this.detectionModes.push({id:"seeInvisibility",enabled:!0,range:e,limited:!0})}this.sight.range=Math.max(e,t.range),s.ts&&this.detectionModes.push({id:"feelTremor",enabled:!0,range:s.ts}),s.bse&&this.detectionModes.push({id:"blindSense",enabled:!0,range:s.bse}),s.bs&&this.detectionModes.push({id:"blindSight",enabled:!0,range:s.bs}),this.detectionModes.sort(this.constructor._sortDetectionModes);const n=CONFIG.Canvas.visionModes[this.sight.visionMode]?.vision?.defaults||{};for(const e of["attenuation","brightness","saturation","contrast"])e in n&&(this.sight[e]=n[e])}static _sortDetectionModes(e,t){if(e.id===DetectionMode.BASIC_MODE_ID)return-1;if(t.id===DetectionMode.BASIC_MODE_ID)return 1;const s=CONFIG.Canvas.detectionModes[e.id],a=CONFIG.Canvas.detectionModes[t.id];return(s?.constructor.PRIORITY??0)-(a?.constructor.PRIORITY??0)}}class BasicActorPF extends ActorBasePF{constructor(...e){super(...e),foundry.utils.logCompatibilityWarning(`Basic actor type is obsolete with Foundry v11. Actor "${this.uuid}" will become nonfunctional in the future.`,{since:"PF1 v9",until:"PF1 v11"})}_resetInherentTotals(){}_setSourceDetails(){}prepareBaseData(){}prepareDerivedData(){}applyActiveEffects(){}}class ActorCharacterPF extends ActorPF{async _preCreate(e,t,s){await super._preCreate(e,t,s);const a={};if(void 0===e.prototypeToken?.actorLink&&(a.actorLink=!0),game.settings.get("pf1","characterVision")&&void 0===e.prototypeToken?.sight?.enabled&&(a.sight={enabled:!0}),void 0===e.prototypeToken?.disposition){const e=game.settings.get("pf1","pcDisposition");"NONE"!==e&&(a.disposition=CONST.TOKEN_DISPOSITIONS[e])}foundry.utils.isEmpty(a)||this.prototypeToken.updateSource(a)}async _preUpdate(e,t,s){await super._preUpdate(e,t,s),e.system&&this._updateExp(e)}_updateExp(e){const t=e.system.details?.xp;if(0===t?.value){const e=this.itemTypes.class?.filter((e=>"mythic"!==e.subType)).reduce(((e,t)=>e+t.system.level),0)??0;t.value=e>0?this.getLevelExp(e-1):0}}getLevelExp(e,{rollData:t=null}={}){if(!(Number.isInteger(e)&&e>=0))throw Error(`Level "${e}" must be zero or greater integer.`);const s=game.settings.get("pf1","experienceConfig"),a=s.track;if(["fast","medium","slow"].includes(a)){const t=pf1.config.CHARACTER_EXP_LEVELS[a];return e<t.length?t[e]:t.at(-1)}let i=0;if(s.custom.formula.length>0){t??=this.getRollData();for(let a=0;a<e;a++){t.level=a+1;i+=RollPF.safeRollSync(s.custom.formula,t).total}delete t.level}return Math.max(1,i)}prepareDerivedData(){super.prepareDerivedData();const e=this.system;e.details??={};const t=e.details.level?.value||1;e.details.xp??={};const s=this.getLevelExp(t);e.details.xp.max=s;const a=e.details.xp.value;if(a>=s)e.details.xp.pct=100;else{const i=this.getLevelExp(t-1||0);e.details.xp.pct=(Math.clamped(a,i,s)-i)/(s-i)*100}}}class ActorNPCPF extends ActorPF{async _preCreate(e,t,s){await super._preCreate(e,t,s);const a={};if(void 0===e.prototypeToken?.disposition){const e=game.settings.get("pf1","npcDisposition");"NONE"!==e&&(a.disposition=CONST.TOKEN_DISPOSITIONS[e])}foundry.utils.isEmpty(a)||this.prototypeToken.updateSource(a)}prepareBaseData(){super.prepareBaseData(),this.system.details.cr.total=this.getCR()}prepareSpecificDerivedData(){super.prepareSpecificDerivedData(),this._prepareCR()}_prepareCR(){foundry.utils.setProperty(this.system,"details.cr.total",this.getCR());let e=0;try{const t=this.system.details?.cr?.total||0;e=this.getCRExp(t)}catch(t){e=this.getCRExp(1)}foundry.utils.setProperty(this.system,"details.xp.value",e)}hasArmorProficiency(e){return!game.settings.get("pf1","npcProficiencies")||super.hasArmorProficiency(e)}hasWeaponProficiency(e,t={}){return!game.settings.get("pf1","npcProficiencies")||super.hasWeaponProficiency(e,t)}getCR(){const e=this.system.details?.cr?.base??0;return this.itemTypes.feat.filter((e=>"template"===e.subType&&e.isActive)).reduce(((e,t)=>{const s=t.system.crOffset;return s&&(e+=RollPF.safeRollSync(s,t.getRollData()).total),e}),e)}getCRExp(e){return e<1?Math.floor(Math.max(400*e,0)):pf1.config.CR_EXP_LEVELS[e]||null}}class ActorHauntPF extends ActorNPCPF{prepareBaseData(){delete this._rollData,this.system.abilities={str:{value:10,damage:0,drain:0,userPenalty:0,mod:0,total:10},dex:{value:10,damage:0,drain:0,userPenalty:0,mod:0,total:10},con:{value:10,damage:0,drain:0,userPenalty:0,mod:0,total:10},int:{value:10,damage:0,drain:0,userPenalty:0,mod:0,total:10},wis:{value:10,damage:0,drain:0,userPenalty:0,mod:0,total:10},cha:{value:10,damage:0,drain:0,userPenalty:0,mod:0,total:10}},this.system.attributes.attack??={general:0,shared:0},this.system.skills??={},this.sourceDetails={},this.system.resources??={}}prepareDerivedData(){this.system.details.cr.total=this.system.details.cr.base,this.system.attributes.init.total=this.system.attributes.init.value,this.items.forEach((e=>{e._prepareDependentData(!1),this.updateItemResources(e)})),applyChanges.call(this),this._prepareCR(),this.prepareHealth(),this.prepareItemLinks(),delete this._rollData,this.items.forEach((e=>{e._prepareDependentData(!0),this.updateItemResources(e,{warnOnDuplicate:!1})})),this._initialized=!0}prepareHealth(){const e=this.system.attributes.hp;Number.isFinite(e?.offset)||(e.offset=0),e.value=e.max+e.offset}refreshDerivedData(){}_prepareChanges(){this.changeItems=this.items.filter((e=>e.isActive&&(e.system.changes?.length>0||Object.values(e.system.changeFlags??{}).some((e=>!!e)))));const e=[];for(const t of this.changeItems)e.push(...t.changes);const t=new Collection;for(const s of e){const e=`${s.parent?.id??"Actor"}-${s._id}`;t.set(e,s)}this.changes=t}getRollData(e={refresh:!1}){const t=!e.refresh&&this._rollData,s={...t?this._rollData:foundry.utils.deepClone(this.system)};if(t)for(const e of pf1.config.temporaryRollDataFields.actor)foundry.utils.setProperty(s,e,void 0);if(game.combats?.viewed&&(s.combat={round:game.combat.round||0}),t)return s;const a=Object.keys(pf1.config.sizeChart);return s.size=a.indexOf(s.traits.size),s.dFlags=this.itemFlags?.dictionary??{},s.range=pf1.documents.actor.ActorPF.getReach(this.system.traits.size,this.system.traits.stature),s.attributes.woundThresholds={level:0},s.attributes.acp={attackPenalty:0},this._rollData=s,s}}class ActorTrapPF extends ActorNPCPF{prepareBaseData(){delete this._rollData,this.system.traits={size:"med"},this.system.abilities={str:{value:10,damage:0,drain:0,userPenalty:0,mod:0,total:10},dex:{value:10,damage:0,drain:0,userPenalty:0,mod:0,total:10},con:{value:10,damage:0,drain:0,userPenalty:0,mod:0,total:10},int:{value:10,damage:0,drain:0,userPenalty:0,mod:0,total:10},wis:{value:10,damage:0,drain:0,userPenalty:0,mod:0,total:10},cha:{value:10,damage:0,drain:0,userPenalty:0,mod:0,total:10}},this.system.attributes={attack:{general:0,shared:0},woundThresholds:{}},this.system.skills??={},this.sourceDetails={},this.system.resources??={}}prepareDerivedData(){this.system.details.cr.total=this.system.details.cr.base,this.items.forEach((e=>{e._prepareDependentData(!1),this.updateItemResources(e)})),applyChanges.call(this),this._prepareCR(),this.prepareItemLinks(),delete this._rollData,this.items.forEach((e=>{e._prepareDependentData(!0),this.updateItemResources(e,{warnOnDuplicate:!1})})),this._initialized=!0}refreshDerivedData(){}_resetInherentTotals(){}_setSourceDetails(){}_prepareChanges(){this.changeItems=this.items.filter((e=>e.isActive&&(e.system.changes?.length>0||Object.values(e.system.changeFlags??{}).some((e=>!!e)))));const e=[];for(const t of this.changeItems)e.push(...t.changes);const t=new Collection;for(const s of e){const e=`${s.parent?.id??"Actor"}-${s._id}`;t.set(e,s)}this.changes=t}getRollData(e={refresh:!1}){const t=!e.refresh&&this._rollData,s={...t?this._rollData:foundry.utils.deepClone(this.system)};if(t)for(const e of pf1.config.temporaryRollDataFields.actor)foundry.utils.setProperty(s,e,void 0);if(game.combats?.viewed&&(s.combat={round:game.combat.round||0}),t)return s;const a=Object.keys(pf1.config.sizeChart);return s.size=a.indexOf(s.traits.size),s.dFlags=this.itemFlags?.dictionary??{},s.range=pf1.documents.actor.ActorPF.getReach(this.system.traits.size,this.system.traits.stature),s.attributes.woundThresholds={level:0},s.attributes.acp={attackPenalty:0},this._rollData=s,s}}class ActorVehiclePF extends ActorPF{prepareBaseData(){delete this._rollData,this._resetInherentTotals(),this.system.attributes.init.total=this.system.attributes.init.value,this.system.attributes.cmd.total=this.system.attributes.cmd.value,this.system.attributes.ac.normal.total=this.system.attributes.ac.normal.base,this.system.attributes.savingThrows.save.total=this.system.attributes.savingThrows.save.base,this.system.attributes.attack??={general:0,shared:0},this.system.attributes.woundThresholds??={},this.system.skills??={},this.system.attributes.speed??={};const e=this.system.abilities.str.value;this.system.abilities={str:{value:e,damage:0,drain:0,userPenalty:0,mod:0,total:10},dex:{value:10,damage:0,drain:0,userPenalty:0,mod:0,total:10},con:{value:10,damage:0,drain:0,userPenalty:0,mod:0,total:10},int:{value:10,damage:0,drain:0,userPenalty:0,mod:0,total:10},wis:{value:10,damage:0,drain:0,userPenalty:0,mod:0,total:10},cha:{value:10,damage:0,drain:0,userPenalty:0,mod:0,total:10}},this.sourceDetails={},this.system.resources??={}}_getInherentTotalsKeys(){return{"attributes.hp.max":this.system.attributes?.hp?.base??0,"details.carryCapacity.bonus.total":0,"details.carryCapacity.multiplier.total":0}}_getBaseValueFillKeys(){return[{parent:"abilities.str",key:"base",value:0}]}prepareDerivedData(){this.items.forEach((e=>{e._prepareDependentData(!1),this.updateItemResources(e)})),applyChanges.call(this),this.prepareHealth(),this._computeEncumbrance(),this.prepareItemLinks(),delete this._rollData,this.items.forEach((e=>{e._prepareDependentData(!0),this.updateItemResources(e,{warnOnDuplicate:!1})})),this._initialized=!0}prepareHealth(){const e=this.system.attributes.hp;Number.isFinite(e?.offset)||(e.offset=0),e.value=e.max+e.offset}refreshDerivedData(){}_prepareChanges(){this.changeItems=this.items.filter((e=>e.isActive&&(e.system.changes?.length>0||Object.values(e.system.changeFlags??{}).some((e=>!!e)))));const e=[];for(const t of this.changeItems)e.push(...t.changes);const t=new Collection;for(const s of e){const e=`${s.parent?.id??"Actor"}-${s._id}`;t.set(e,s)}this.changes=t}getRollData(e={refresh:!1}){const t=!e.refresh&&this._rollData,s={...t?this._rollData:foundry.utils.deepClone(this.system)};if(t)for(const e of pf1.config.temporaryRollDataFields.actor)foundry.utils.setProperty(s,e,void 0);if(game.combats?.viewed&&(s.combat={round:game.combat.round||0}),t)return s;const a=Object.keys(pf1.config.sizeChart);return s.size=a.indexOf(s.traits.size),s.dFlags=this.itemFlags?.dictionary??{},s.range=pf1.documents.actor.ActorPF.getReach(this.system.traits.size,this.system.traits.stature),s.attributes.woundThresholds={level:0},s.attributes.acp={attackPenalty:0},this._rollData=s,s}getTotalCurrency({inLowestDenomination:e=!0}={}){const t=this.getCurrency("currency",{inLowestDenomination:!0});return e?t:t/100}}const V=Object.freeze(Object.defineProperty({__proto__:null,ActorBasePF,ActorCharacterPF,ActorHauntPF,ActorNPCPF,ActorPF,ActorTrapPF,ActorVehiclePF,BasicActorPF,changes:n,spellbook:u},Symbol.toStringTag,{value:"Module"})),J=Object.freeze(Object.defineProperty({__proto__:null,ActiveEffectPF,ChatMessagePF,CombatPF,CombatantPF,TokenDocumentPF,actor:V,controls:Z,customRolls,duplicateCombatantInitiative:function(e,t,s){return foundry.utils.logCompatibilityWarning("pf1.documents.duplicateCombatantInitiative() is deprecated in favor of CombatantPF.duplicateWithData()",{since:"PF1 v10",until:"PF1 v11"}),t.duplicateWithData({initiative:s})},item:c,macros:p,settings:o},Symbol.toStringTag,{value:"Module"})),K=Object.freeze(Object.defineProperty({__proto__:null,ActionUse,ChatAttack,ERR_REQUIREMENT:r},Symbol.toStringTag,{value:"Module"}));class PF1TextEnricher{id;pattern;match;enricher;click(e,t){}drag(e,t){}constructor(e,t,s,{click:a,drag:i}={}){if(!(t instanceof RegExp))throw Error("TextEnricher pattern must be a regular expression");if(!t.global)throw Error("TextEnricher pattern must be global and multiline");this.id=e,this.pattern=t,this.enricher=s.bind(this),this.click=a,this.drag=i}}function setIcon(e,t){const s=document.createElement("i");s.classList.add(...t.split(" ")),e.prepend(s," ")}function createElement({label:e,icon:t,click:s=!1,drag:a=!1,handler:i,options:n,broken:o=!1}={}){const r=document.createElement("a");return r.classList.add("pf1-link"),s&&r.classList.add("button"),a&&(r.classList.add("content"),r.draggable=!0),t&&setIcon(r,t),e&&r.append(e,": "),i&&(r.dataset.handler=i),o&&r.classList.add("broken"),setElementOptions(r,n),r}function getRelevantActors(e){const t=[];if(e.dataset.speaker){const s=e.closest("[data-message-id]")?.dataset.messageId,a=game.messages.get(s),i=ChatMessage.getSpeakerActor(a.speaker);i&&t.push(i)}else if(canvas.tokens.controlled.length){const e=canvas.tokens.controlled.map((e=>e.actor));for(const s of e)s&&t.push(s)}else{const e=game.user.character;e&&t.push(e)}if(0==t.length)throw ui.notifications.error(game.i18n.localize("PF1.EnrichedText.Errors.NoActors")),Error("No valid actors found.");return t}function generateTooltip(e){const{roll:t,formula:s,bonus:a,speaker:i,name:n}=e.dataset,o=[];n&&o.push(n),t?/d\d+/.test(t)?o.push(game.i18n.localize("PF1.Roll")+": "+t):o.push(game.i18n.format("PF1.TakeX",{number:t})):s&&o.push(s),a&&o.push(game.i18n.localize("PF1.Bonus")+": "+a),i&&o.push(game.i18n.localize("PF1.EnrichedText.AsSpeaker")),e.dataset.tooltip=o.join("<br>")}function setElementOptions(e,t){if(t)for(const s of t.split(";")){const[t,a]=s.split("=",2);e.dataset[t]=a??!0}}function onSave(e,t){const s=getRelevantActors(t),a={},{roll:i,bonus:n,type:o}=t.dataset;if(!o)throw Error("No save type defined");i&&(a.staticRoll=i),n&&(a.bonus=n);for(const e of s)e.rollSavingThrow(o,foundry.utils.deepClone(a))}function onAbility(e,t){const s=getRelevantActors(t),a={},{ability:i,bonus:n,roll:o}=t.dataset;if(!i)throw Error("No ability check type defined");o&&(a.staticRoll=o),n&&(a.bonus=n);for(const e of s)e.rollAbilityTest(i,foundry.utils.deepClone(a))}function onSkill(e,t){const s={},{skill:a,bonus:i,roll:n,info:o}=t.dataset;if(!a)throw Error("No skill key defined");if(o){const e=pf1.config.skillCompendiumEntries[a];if(!e)throw Error(`Journal entry not found for skill "${a}"`);return void openJournal(e)}n&&(s.staticRoll=n),i&&(s.bonus=i);const r=getRelevantActors(t);for(const e of r)e.rollSkill(a,foundry.utils.deepClone(s))}function onUse(e,t){const{type:s,item:a,action:i,speaker:n}=t.dataset;if(!a)throw Error("No item name defined");const o=getRelevantActors(t);for(const e of o){const t=e.items.find((e=>(!s||e.type===s)&&0==e.name.localeCompare(a,void 0,{usage:"search"})));if(!t){const t=game.i18n.format("PF1.Warning.NoItemOnActor",{actor:e.name,item:a});ui.notifications.warn(t,{console:!1}),console.warn("PF1 | @Use |",t,e);continue}let n=t.defaultAction;if(i){const e=/^(?:tag:(?<actionTag>.*?)|id:(?<actionId>.*?))$/.exec(i),{actionTag:s,actionId:a}=e?.groups??{};n=t.actions.find((e=>e.id===a||(e.data.tag===s||0==e.name.localeCompare(i,void 0,{usage:"search"}))))}if(n)n.use();else{const s=game.i18n.format("PF1.Warning.NoActionInItem",{item:t.name,actor:e.name});ui.notifications.warn(s,{console:!1}),console.warn("PF1 | @Use |",s,e)}}}function onAction(e,t){const{action:s}=t.dataset,a=t.closest(".chat-message[data-message-id]")?.dataset.messageId,i=game.messages.get(a),n=i.itemSource;if(!n){const e=game.i18n.format("PF1.EnrichedText.Errors.NoItemInMessage");return ui.notifications.warn(e,{console:!1}),void console.warn("PF1 | @Action |",e,i)}const o=n.actor,r=/^(?:tag:(?<actionTag>.*?)|id:(?<actionId>.*?))$/.exec(s),{actionTag:l,actionId:c}=r?.groups??{},u=n.actions.find((e=>e.id===c||(e.data.tag===l||0==e.name.localeCompare(s,void 0,{usage:"search"}))));if(!u){const e=game.i18n.format("PF1.Warning.NoActionInItem",{item:n.name,actor:o.name});return ui.notifications.warn(e,{console:!1}),void console.warn("PF1 | @Action |",e,o)}u.use()}function onHealth(e,t){const{command:s,formula:a,speaker:i,nonlethal:n}=t.dataset,o=getRelevantActors(t),r={};n&&(r.asNonlethal=!0);for(const i of o){let n=RollPF.safeRollAsync(a,i.getRollData()).total;"heal"===s&&(n=-n),i.applyDamage(n,{...r,event:e,element:t})}}function onBrowse(e,t){const{category:s,options:a}=t.dataset,i=pf1.applications.compendiums[s];i?i.render(!0,{focus:!0}):ui.notifications.error(game.i18n.format("PF1.EnrichedText.Errors.BrowserNotFound",{category:s}))}function onCondition(e,t){const{condition:s,toggle:a,remove:i,duration:n,options:o,info:r}=t.dataset;if(r){const e=pf1.registry.conditions.get(s)?.journal;if(!e)throw Error(`Journal entry not found for condition "${s}"`);return void openJournal(e)}const l=getRelevantActors(t);for(const e of l)a?e.toggleCondition(s):e.setCondition(s,!i)}async function onApply(e,t){const{uuid:s,level:a}=t.dataset,i=getRelevantActors(t);if(0==i.length)return;const n=await fromUuid(s);if(!n){const e=game.i18n.localize("PF1.EnrichedText.Errors.ItemNotFound");return ui.notifications.warn(e,{console:!1}),void console.error("PF1 | @Apply |",e,s)}if("buff"!==n.type)return void ui.notifications.error(game.i18n.format("PF1.EnrichedText.Errors.UnsupportedItemType",{type:n.type}));const o=game.items.fromCompendium(n,{clearFolder:!0});o.system.active=!0,void 0!==a&&(o.system.level=Number(a));for(const e of i)Item.implementation.create(o,{parent:e})}const Y=[new PF1TextEnricher("apply",/@Apply\[(?<uuid>.*?)(?:;(?<options>.*?))?\](?:\{(?<label>.*?)})?/g,((e,t)=>{const{uuid:s,options:a,label:i}=e.groups,n=fromUuidSync(s);n||console.warn("PF1 | @Apply | Could not find item",s);const o=createElement({label:i,click:!0,handler:"apply",options:a,broken:!n});return n?(o.dataset.name=`${game.i18n.localize("DOCUMENT.Item")}: ${n.name}`,o.dataset.uuid=n.uuid,o.append(n.name)):o.replaceChildren(`@Apply[${s}]`),generateTooltip(o),setIcon(o,"fa-solid fa-angles-right"),o}),{click:onApply}),new PF1TextEnricher("save",/@Save\[(?<save>\w+)(;(?<options>.*?))?](?:\{(?<label>.*?)})?/g,((e,{rollData:t}={})=>{const{save:s,options:a,label:i}=e.groups,n=createElement({label:i,click:!0,handler:"save",options:a}),o=CONFIG.PF1.savingThrows[s];let r=n.dataset.dc;if(!/^\d+$/.test(r)){n.dataset.formula=r;r=RollPF.safeRollSync(r,t,{formula:r},{},{minimize:!0}).total}const l=void 0!==r?game.i18n.format("PF1.SavingThrowButtonLabel",{type:o,dc:r}):o;return n.append(l),n.dataset.type=s,generateTooltip(n),setIcon(n,"fa-solid fa-shield-halved"),n}),{click:onSave}),new PF1TextEnricher("ability",/@Ability\[(?<ability>\w+)(;(?<options>.*?))?](?:\{(?<label>.*?)})?/g,((e,t)=>{const{ability:s,label:a,options:i}=e.groups,n=createElement({label:a,click:!0,handler:"ability",options:i}),o=CONFIG.PF1.abilities[s]??s;return n.dataset.ability=s,n.append(o),generateTooltip(n),setIcon(n,"fa-solid fa-brain"),n}),{click:onAbility}),new PF1TextEnricher("skill",/@Skill\[(?<skill>\w+)(;(?<options>.*?))?](?:\{(?<label>.*?)})?/g,((e,t)=>{const{skill:s,label:a,options:i}=e.groups,n=createElement({label:a,click:!0,handler:"skill",options:i}),o=CONFIG.PF1.skills[s]??s;if(n.dataset.skill=s,n.dataset.info){if(!pf1.config.skillCompendiumEntries[s])return;setIcon(n,"fa-solid fa-book")}return n.append(o),generateTooltip(n),setIcon(n,"fa-solid fa-hands-clapping"),n}),{click:onSkill}),new PF1TextEnricher("use",/@Use\[(?<item>.*?)(?:#(?<action>.*?))?(?:;(?<options>.*?))?](?:\{(?<label>.*?)})?/g,((e,t)=>{const{item:s,action:a,label:i,options:n}=e.groups,o=createElement({label:i,click:!0,handler:"use",options:n});if(o.append(s),o.dataset.item=s,a){const e=a.replace(/^(id|tag):\s*/,"");o.append(` (${e})`),o.dataset.actionId=a}return generateTooltip(o),setIcon(o,"fa-solid fa-trowel"),o}),{click:onUse}),new PF1TextEnricher("action",/@Action\[(?<action>.[\w\d\s]+)(?:;(?<options>.*?))?](?:\{(?<label>.*?)})?/g,((e,t)=>{const{action:s,label:a,options:i}=e.groups,n=createElement({label:a,click:!0,handler:"action",options:i});return n.append(s),n.dataset.speaker=!0,n.dataset.action=s,generateTooltip(n),setIcon(n,"fa-solid fa-trowel"),n}),{click:onAction}),new PF1TextEnricher("health",/@(?<command>Heal|Damage)\[(?<formula>.*?)(?:;(?<options>.*?))?](?:\{(?<label>.*?)})?/g,((e,t)=>{const{command:s,formula:a,label:i,options:n}=e.groups,o=createElement({click:!0,handler:"health",options:n});return o.dataset.command=s.toLowerCase(),o.dataset.formula=a,o.append(game.i18n.format("PF1.EnrichedText.Health."+s,{value:i||a,NL:o.dataset.nonlethal?game.i18n.localize("PF1.EnrichedText.Health.NL"):""})),generateTooltip(o),"heal"===o.dataset.command?setIcon(o,"fa-solid fa-heart-pulse"):setIcon(o,"fa-solid fa-heart-crack"),o}),{click:onHealth}),new PF1TextEnricher("browse",/@Browse\[(?<category>\w+)(?:;(?<options>.*?))?](?:\{(?<label>.*?)})?/g,(e=>{const{category:t,label:s,options:a}=e.groups,i=createElement({click:!0,handler:"browse",options:a});let n;i.dataset.category=t;const o=pf1.applications.compendiums[t];return o?(setIcon(i,"fa-solid fa-book"),n=game.i18n.localize(o.constructor.typeName)):(setIcon(i,"fa-solid fa-link-slash"),i.classList.add("invalid"),n=t),n=game.i18n.format("PF1.EnrichedText.Browse",{value:n}),s?i.append(s):i.append(n),generateTooltip(i),s&&(i.dataset.tooltip=n),o||(s&&(i.dataset.tooltip+="<br>"),i.dataset.tooltip+=game.i18n.localize("PF1.EnrichedText.Error")+": "+game.i18n.localize("PF1.EnrichedText.Errors.NoCategory")),i}),{click:onBrowse}),new PF1TextEnricher("condition",/@Condition\[(?<condition>\w+)(?:;(?<options>.*?))?](?:\{(?<label>.*?)})?/g,(e=>{const{condition:t,options:s,label:a}=e.groups,i=pf1.registry.conditions.get(t),n=i?.name||t,o=createElement({click:!0,handler:"condition",options:s});return i||o.classList.add("broken"),o.dataset.condition=t,o.dataset.disable&&(o.dataset.remove=!0),o.dataset.info?(setIcon(o,"fa-solid fa-atlas"),i?.journal||o.classList.add("broken")):o.dataset.remove?(setIcon(o,"fa-solid fa-minus"),o.dataset.tooltip=game.i18n.format("PF1.EnrichedText.Remove",{value:n})):o.dataset.toggle?(setIcon(o,"fa-solid fa-plus-minus"),o.dataset.tooltip=game.i18n.format("PF1.EnrichedText.Toggle",{value:n})):(setIcon(o,"fa-solid fa-plus"),o.dataset.tooltip=game.i18n.format("PF1.EnrichedText.Add",{value:n})),o.append(n),o}),{click:onCondition})];Hooks.once("setup",(()=>{CONFIG.TextEditor.enrichers.push(...Y)}));Hooks.once("ready",(()=>{$("body").on("click","a.pf1-link.button",(e=>((e,t=!0)=>{const s=e.currentTarget,a=s.dataset.handler,i=Y.find((e=>e.id===a));if(!i)throw Error("Relevant enricher not found: "+a);s.classList.contains("broken")||(e.stopPropagation(),e.preventDefault(),t?i.click(e,s):i.drag(e,s))})(e,!0)))}));const Q=Object.freeze(Object.defineProperty({__proto__:null,PF1TextEnricher,createElement,enrichers:Y,generateTooltip,getRelevantActors,onAbility,onAction,onApply,onBrowse,onCondition,onHealth,onSave,onSkill,onUse,setElementOptions},Symbol.toStringTag,{value:"Module"})),X=Object.freeze(Object.defineProperty({__proto__:null,enrichers:Q},Symbol.toStringTag,{value:"Module"})),withinAngle=(e,t,s)=>(e=Math.normalizeDegrees(e),t=Math.normalizeDegrees(t),s=Math.normalizeDegrees(s),e<t?s>=e&&s<=t:s>=e||s<=t),withinRect=(e,t)=>e.x>=t.x&&e.x<t.x+t.width&&e.y>=t.y&&e.y<t.y+t.height;class TemplateLayerPF extends TemplateLayer{_onDragLeftMove(e){if(!game.settings.get("pf1","measureStyle"))return super._onDragLeftMove(e);const t=e.interactionData,{destination:s,layerDragState:a,preview:i,origin:n}=t;if(0===a)return;const o=!e.shiftKey;o&&(t.destination=canvas.grid.getSnappedPosition(s.x,s.y,this.gridPrecision));const r=new Ray(n,s),l=canvas.dimensions.distance,c=canvas.dimensions.size/l,u=r.distance/c;i.document.distance=u;const p=Math.normalizeDegrees(Math.toDegrees(r.angle));if(i.document.direction=p,o)switch(i.document.t){case"cone":{const e=CONFIG.MeasuredTemplate.defaults.angle/2;i.document.direction=Math.floor((p+e/2)/e)*e;break}}i.renderFlags.set({refreshShape:!0}),t.layerDragState=2}}class MeasuredTemplatePF extends MeasuredTemplate{getHighlightedSquares(){return foundry.utils.logCompatibilityWarning("MeasuredTemplatePF.getHighlightedSquares() deprecated in favor of MeasuredTemplate._getGridHighlightPositions()",{since:"PF1 v10",until:"PF1 v11"}),this._getGridHighlightPositions()}_getGridHighlightPositions(){const e=this.document.t;if(!this.ray||!game.settings.get("pf1","measureStyle")||!["circle","cone","ray"].includes(e))return super._getGridHighlightPositions();const t="cone"===e,s="ray"===e,a=canvas.grid,i=canvas.dimensions.size,n=i+i%2,o=canvas.dimensions.distance,{direction:r,angle:l,distance:c}=this.document,u=Math.min(Math.abs(l||CONFIG.MeasuredTemplate.defaults.angle),359);if(s){const e=[],line=(t,s,a,i)=>{t=Math.floor(t/n),a=Math.floor(a/n),s=Math.floor(s/n),i=Math.floor(i/n);const o=Math.abs(a-t),r=Math.abs(i-s),l=t<a?1:-1,c=s<i?1:-1;let u=o-r;for(;t!==a||s!==i;){e.push({x:t*n,y:s*n});const a=u<<1;a>-r&&(u-=r,t+=l),a<o&&(u+=o,s+=c)}},t=Ray.fromAngle(this.ray.A.x,this.ray.A.y,this.ray.angle,this.ray.distance+n/2);return line(t.A.x,t.A.y,t.B.x,t.B.y),e}const p=Math.ceil(1.5*c/o/(n/a.h)),m=Math.ceil(1.5*c/o/(n/a.w)),{x:d,y:h}=this.document,[g,f]=a.getCenter(d,h),[y,b]=a.grid.getGridPositionFromPixels(g,f),v=Math.normalizeDegrees(r-u/2),P=Math.normalizeDegrees(r+u/2),k={x:0,y:0};if(t){const e=(r>=0?360-r:-r)%360;k.x=d%i!=0?Math.sign(Math.round(Math.cos(Math.toRadians(e))))/2:0,k.y=h%i!=0?-Math.sign(Math.round(Math.sin(Math.toRadians(e))))/2:0}const S={x:d+k.x*i,y:h+k.y*i},F=[];for(let e=-m;e<m;e++)for(let s=-p;s<p;s++){const[a,i]=canvas.grid.grid.getPixelsFromGridPosition(y+e,b+s),o={x:a+.5*n,y:i+.5*n},r=new Ray(S,o);if(t&&r.distance>0){const e=Math.normalizeDegrees(r.angle/(Math.PI/180));if(!withinAngle(v,P,e))continue}measureDistance(S,o,{ray:r})<=c+1&&F.push({x:a,y:i})}return F}async getTokensWithin(){const e=this.document.t,t=this.scene.dimensions,s=t.size,a=t.distance;this.shape||(this._applyRenderFlags({refreshShape:!0}),await new Promise((e=>canvas.app.ticker.addOnce((()=>e()))),void 0,PIXI.UPDATE_PRIORITY.LOW));const i=(()=>"rect"!==e?this.center:{x:this.x+this.width/2,y:this.y+this.height/2})(),{distance:n,angle:o,direction:r}=this.document,l=Math.max(this.height,this.width)+s+1,c=new Set(canvas.tokens.placeables.filter((e=>new Ray(e.center,i).distance-e.sizeErrorMargin<=l))),u=new Set,isLargeToken=e=>e.document.width>1||e.document.height>1,withinCone=(e,t,o)=>{const r=new Ray(i,e),l=Math.normalizeDegrees(Math.toDegrees(r.angle)),c=withinAngle(t,o,l),u=r.distance/s*a;return c&&u<=n+1};if("rect"===e){const e={x:this.x,y:this.y,width:this.shape.width,height:this.shape.height};for(const t of c)if(isLargeToken(t)){t.getOccupiedCells({center:!0}).some((t=>withinRect(t,e)))&&u.add(t)}else withinRect(t.center,e)&&u.add(t)}else if(canvas.grid.type===CONST.GRID_TYPES.GRIDLESS&&["circle","cone"].includes(e)){let t,l;"cone"===e&&(t=Math.normalizeDegrees(r-o/2),l=Math.normalizeDegrees(r+o/2));for(const o of c){const r=isLargeToken(o)?o.getOccupiedCells({center:!0}):[o.center];switch(e){case"circle":r.some((e=>new Ray(i,e).distance/s*a<=n+1))&&u.add(o);break;case"cone":r.some((e=>withinCone(e,t,l)))&&u.add(o)}}}else{const mapCoordsToCell=({x:e,y:t})=>({x:e,y:t,width:s,height:s}),e=this._getGridHighlightPositions().map(mapCoordsToCell);for(const t of e)for(const e of c){(isLargeToken(e)?e.getOccupiedCells({center:!0}):[e.center]).some((e=>withinRect(e,t)))&&(u.add(e),c.delete(e))}}return Array.from(u)}highlightGrid(){if(!game.settings.get("pf1","measureStyle")||!["circle","cone","ray"].includes(this.document.t)||canvas.grid.type!==CONST.GRID_TYPES.SQUARE)return super.highlightGrid();const e=canvas.grid,t=this.borderColor,s=this.fillColor;if(!this.id||!this.shape)return;const a=this.getHighlightLayer();if(a.clear(),!this.isVisible)return;const i=this._getGridHighlightPositions();for(const n of i)e.grid.highlightGridPosition(a,{x:n.x,y:n.y,color:s,border:t})}getHighlightLayer(){return canvas.grid.getHighlightLayer(this.highlightId)}get origin(){const{uuid:e,action:t}=this.document.getFlag("pf1","origin")??{};if(!e)return null;const s=fromUuidSync(e),a=s?.actions?.get(t);return a??s??null}}const ee={fill:Color.from("#FF0000"),border:Color.from("#FF0000").multiply(.9)},te={fill:Color.from("#FFFF00"),border:Color.from("#FFFF00").multiply(.9)};class SquareHighlight{constructor(e,t=65280,s=0){this.origin=e,this.borderColor=s,this.fillColor=t,this._squares=[],this._id=foundry.utils.randomID(),canvas.grid.addHighlightLayer("AttackHighlight."+this._id)}addSquare(e,t){this._squares.push({x:e,y:t})}clear(){const e=canvas.grid.getHighlightLayer("AttackHighlight."+this._id);e&&e.clear()}render(){const e=canvas.grid,t=e.size,s=canvas.grid.getHighlightLayer("AttackHighlight."+this._id);this.clear();for(const a of this._squares){const i=Math.floor(this.origin.x-a.x)*t,n=Math.floor(this.origin.y-a.y)*t;e.grid.highlightGridPosition(s,{x:i,y:n,border:this.borderColor,color:this.fillColor})}}}class AttackHighlightBase{clearHighlight(){throw Error("must be overridden")}renderHighlight(){throw Error("must be overridden")}get isValid(){throw Error("must be overridden")}constructor(e,t){const s=t?.item;if(!t||!e||!s)throw Error("Invalid arguments.")}}class GridlessHighlight extends AttackHighlightBase{#i;get isValid(){return(this.#i?.length??0)>=2}#n;constructor(e,t){super(e,t);const s=canvas.grid.size,a=e.document.width,i=e.document.height;this.#n={x:Math.floor(e.x+a*s/2),y:Math.floor(e.y+i*s/2)};const n=t.getRollData(),o=t.data.range.units;if(!["melee","touch","reach","ft","close","medium"].includes(o))return;const r=pf1.utils.convertDistanceBack(t.getRange({type:"min",rollData:n}))[0],l=pf1.utils.convertDistanceBack(t.getRange({type:"single",rollData:n}))[0],c=[r||0,l];if("ft"===o){const e=t.data.range.maxIncrements;for(let t=1;t<e;t++)c.push((t+1)*l)}this.#i=c.map((e=>{const t=0===e?0:a*s/2;return e*canvas.dimensions.size/canvas.dimensions.distance+t})),this._id=foundry.utils.randomID(),canvas.grid.addHighlightLayer("AttackHighlight."+this._id)}clearHighlight(){if(this.isValid){const e=canvas.grid.getHighlightLayer("AttackHighlight."+this._id);if(!e)return;e.removeChildren(),this.#i=void 0}}renderHighlight(){if(this.isValid){const e=canvas.grid.getHighlightLayer("AttackHighlight."+this._id);if(!e)return;e.clear();const{x:t,y:s}=this.#n,a=new PIXI.Graphics,i=this.#i;for(let e=i.length-1;e>0;e--){const n=i[e],o=i[e-1],r=[ee,te][(e+1)%2];a.beginFill(r.fill,.1),a.drawCircle(t,s,n),o&&(a.beginHole(),a.beginFill(te.fill,.1),a.drawCircle(t,s,o),a.endHole())}a.endFill(),e.addChild(a)}}}class SquareGridHighlight extends AttackHighlightBase{#o;get isValid(){return!!this.#o}constructor(e,t){super(e,t);const s=canvas.grid.size,a=e.document.width,i=e.document.height,n={x:Math.floor((e.x+a*s-.5*s)/s),y:Math.floor((e.y+i*s-.5*s)/s)},o=t.getRollData(),r=t.data.range.units;if(!["melee","touch","reach","ft","close","medium"].includes(r))return;const l="ft"===r,c=pf1.utils.convertDistanceBack(t.getRange({type:"min",rollData:o}))[0],u=pf1.utils.convertDistanceBack(t.getRange({type:"single",rollData:o}))[0],p={normal:[],reach:[],extra:[]},m=!0!==game.settings.get("pf1","alternativeReachCornerRule");if(p.normal=this.#r(e,u,c,{useReachRule:!!l||m}),"ft"===r){const s=convertDistance(u)[0],a=game.settings.get("pf1","performance").reachLimit,i=Math.min(a,Math.max(canvas.dimensions.width/canvas.dimensions.size*canvas.dimensions.distance,canvas.dimensions.height/canvas.dimensions.size*canvas.dimensions.distance)+s),n=t.data.range.maxIncrements;for(let t=1;t<n;t++)(t+1)*s<=i&&p.extra.push(this.#r(e,(t+1)*u,t*u,{useReachRule:m}))}const d={normal:new SquareHighlight(n,ee.fill,ee.border),extra:[]};for(const e of p.normal)d.normal.addSquare(e[0],e[1]);for(let e=0;e<p.extra.length;e++){const t=p.extra[e],s={fill:e%2==1?ee.fill:te.fill,border:e%2==1?ee.border:te.border},a=new SquareHighlight(n,s.fill,s.border);for(const e of t)a.addSquare(e[0],e[1]);d.extra.push(a)}this.#o=d}#r(e,t,s=0,a){const i=[];if(canvas.grid.type!==CONST.GRID_TYPES.SQUARE)return i;t=convertDistance(t)[0],"number"==typeof s&&(s=convertDistance(s)[0]);const n=canvas.scene.grid.distance,o=canvas.grid.size,r=[];for(let t=0;t<Math.floor(e.w/o);t++)for(let s=0;s<Math.floor(e.h/o);s++){const a=Math.floor((e.x+.5*o)/o+t),i=Math.floor((e.y+.5*o)/o+s);r.push([a,i])}const l=[Math.floor((e.x+.5*o)/o),Math.floor((e.y+.5*o)/o),Math.floor(e.w/o),Math.floor(e.h/o)],getClosestTokenSquare=function(e){const t={square:null,dist:null};for(const s of r){const a=Math.sqrt((s[0]-e[0])**2+(s[1]-e[1])**2);(null==t.dist||a<t.dist)&&(t.square=s,t.dist=a)}return t.square},c=Math.round(t/n),u=2*c+l[2],p=2*c+l[3],m=[l[0]-c,l[1]-c];for(let e=m[0];e<m[0]+u;e++)for(let n=m[1];n<m[1]+p;n++){const o=getClosestTokenSquare([e,n]),r=[e-l[0],n-l[1]];e>=l[0]&&e<l[0]+l[2]&&n>=l[1]&&n<l[1]+l[2]&&null!=s||!this.#l([e,n],o,t,s,a)||i.push(r)}return i}#l(e,t,s,a,i={useReachRule:!1}){const n=canvas.grid.size,o={x:t[0]*n,y:t[1]*n},r={x:e[0]*n,y:e[1]*n},l=measureDistance(o,r),c=i.useReachRule?measureDistance(o,r,{diagonalRule:"555"}):null,u=convertDistance(10)[0];return!(l>s&&(!i.useReachRule||s!==u))&&(!(null!=a&&l<=a)&&!(i.useReachRule&&a>=u&&c<=u))}clearHighlight(){if(this.#o){this.#o.normal.clear();for(const e of this.#o.extra)e.clear();this.#o=void 0}}renderHighlight(){if(this.#o){this.#o.normal.render();for(const e of this.#o.extra)e.render()}}}let se;const showAttackReach=(e,t)=>{clearHighlight();const s=canvas.grid.type===CONST.GRID_TYPES.SQUARE?SquareGridHighlight:GridlessHighlight;try{const a=new s(e,t);if(!a.isValid)return;se=a,se.renderHighlight()}catch{}},clearHighlight=()=>{se?.clearHighlight(),se=void 0};function addReachListeners(e){e.on("pointerenter",".card-range",_onMouseEnterReach),e.on("pointerleave",".card-range",_onMouseLeaveReach)}const _onMouseEnterReach=e=>{if(e.preventDefault(),game.settings.get("pf1","performance").reachLimit<10)return;const t=e.currentTarget.closest(".chat-card"),{tokenUuid:s,actionId:a,itemId:i}=t.dataset;i&&a&&s&&async function(e){if(!e)return;const t=await fromUuid(e);return t instanceof TokenDocument?t.object:t?.token??(null!=t?canvas.tokens.placeables.find((e=>e.actor===t)):null)}(s).then((e=>{if(!e)return;const t=e.actor.allItems.find((e=>e.id===i)),s=t?.actions.get(a);s&&showAttackReach(e,s)}))},_onMouseLeaveReach=e=>{e.preventDefault(),clearHighlight()},ae=Object.freeze(Object.defineProperty({__proto__:null,addReachListeners,clearHighlight,showAttackReach},Symbol.toStringTag,{value:"Module"}));class TokenPF extends Token{async toggleEffect(e,{active:t,overlay:s=!1}={}){const a="string"==typeof e?e:e?.id;if(this.actor){const e=this.actor.items.get(a);if(e)return foundry.utils.logCompatibilityWarning("Toggling buffs via TokenPF.toggleEffect() is deprecated.",{since:"PF1 v10",until:"PF1 v11"}),await e.setActive(t??!e.isActive),e.isActive}if(this.actor&&pf1.registry.conditions.has(a)&&"function"==typeof this.actor.toggleCondition){let e;return e=void 0===t?await this.actor.toggleCondition(a):await this.actor.setCondition(a,t),e[a]}return super.toggleEffect(e,{active:t,overlay:s})}get actorVision(){const e=this.actor.system.traits?.senses?.ll??{};return{lowLight:e.enabled,lowLightMultiplier:e.multiplier?.dim,lowLightMultiplierBright:e.multiplier?.bright}}get disableLowLight(){return!0===this.document.getFlag("pf1","disableLowLight")}_isVisionSource(){if(!canvas.effects.visibility.tokenVision||!this.hasSight)return!1;const e=game.user.isGM;if(this.document.hidden&&!e)return!1;if(this.controlled)return!0;if(e)return!1;if(this.actor?.sharesVision)return!0;const t=game.settings.get("pf1","guaranteedVision");if(!(this.actor?.testUserPermission(game.user,t)??!1))return!1;return!this.layer.controlled.filter((e=>!e.document.hidden&&e.hasSight)).length}_getBarBoost(e){return"attributes.hp"===e.attribute?{value:this.actor.system.attributes.hp.temp,color:12637924}:"attributes.vigor"===e.attribute?{value:this.actor.system.attributes.vigor.temp,color:12637924}:null}_getBarUnderline(e){return"attributes.hp"===e.attribute?{value:this.actor.system.attributes.hp.nonlethal,color:8202280}:null}_drawBar(e,t,s){const a=this._getBarBoost(s),i=this._getBarUnderline(s),n=s.max,o=Number(s.value);s.max=Math.max(s.max,(a?.value??0)+o);const r=Math.clamped(o,0,s.max)/s.max,l=Math.clamped(o,0,n)/n;let c=Math.max(canvas.dimensions.size/12,8);const u=this.w,p=Math.clamped(c/8,1,2);this.document.height>=2&&(c*=1.6);let m;if(m=0===e?Color.fromRGBvalues(1-l/2,l,0):Color.fromRGBvalues(.5*l,.7*l,.5+l/2),t.clear(),t.beginFill(0,.5).lineStyle(p,0,1).drawRoundedRect(0,0,this.w,c,3),a?.value>0){const e=Math.clamped(o+a.value,0,s.max)/s.max;t.beginFill(a.color,1).lineStyle(p,0,1).drawRoundedRect(0,0,e*u,c,2)}if(t.beginFill(m,1).lineStyle(p,0,1).drawRoundedRect(0,0,r*u,c,2),i?.value>0){const e=Math.clamped(i.value,0,s.max)/s.max;t.beginFill(i.color,1).lineStyle(p,0,1).drawRoundedRect(0,c/2,e*u,c/2,2)}const d=0===e?this.h-c:0;t.position.set(0,d)}get sizeErrorMargin(){return Math.max(this.w/2,this.h/2)}getOccupiedCells({center:e=!1}={}){const t=this.document,s=this.scene.grid.size??1,{x:a,y:i,width:n,height:o}=t,r=e?s/2:0,l=[],c=n-1,u=o-1;for(let e=0;e<=c;e++)for(let t=0;t<=u;t++)l.push({x:a+e*s+r,y:i+t*s+r});return l}get isSquare(){return this.document.width===this.document.height}}class TokenQuickActions{static async addQuickActions(e,t){const s=e.object,a=s.actor,i=a?.getQuickActions?.();if(!i?.length)return;const n={actions:i},o=document.createElement("div");o.innerHTML=renderCachedTemplate("systems/pf1/templates/hud/quick-actions.hbs",n),this.activateElementListeners(o.firstChild,a,s),t[0].querySelector(".col.middle").after(o.firstChild)}static activateElementListeners(e,t,s){e.addEventListener("click",(e=>{e.preventDefault();const a=e.target.dataset.itemId,i=t.items.get(a);e.ctrlKey?i.displayCard({token:s.document}):i.use({ev:e,token:s.document,skipDialog:getSkipActionPrompt()})})),e.addEventListener("contextmenu",(e=>{e.preventDefault();const s=e.target.dataset.itemId;t.items.get(s).sheet.render(!0,{focus:!0})})),game.settings.get("pf1","performance").reachLimit>=10&&e.querySelectorAll(".token-quick-action").forEach((e=>{const a=e.dataset.itemId,i=t.items.get(a).defaultAction;e.addEventListener("pointerenter",(()=>showAttackReach(s,i)),{passive:!0}),e.addEventListener("pointerleave",(()=>clearHighlight()),{passive:!0})}))}}class DetectionModeInvisibilityPF extends DetectionModeInvisibility{static ID="seeInvisibility";static LABEL="PF1.Sense.seeInvis";static PRIORITY=1e5;_testPoint(e,t,s,a){if(!this._testLOS(e,t,s,a))return!1;if(this._testRange(e,t,s,a))return!0;if(t.limited)return!1;const{x:i,y:n}=a.point;for(const e of canvas.effects.lightSources.values())if(e.active&&e.shape.contains(i,n))return!0;return!1}}class DetectionModeBlindSensePF extends DetectionMode{static ID="blindSense";static LABEL="PF1.Sense.blindsense";static DETECTION_TYPE=DetectionMode.DETECTION_TYPES.OTHER;static PRIORITY=200100;constructor(e={},...t){e.walls=!0,super(e,...t)}static getDetectionFilter(){return this._detectionFilter??=OutlineOverlayFilter.create({outlineColor:[0,.33,.6,1],knockout:!1,wave:"blindSense"===this.ID})}_canDetect(e,t){return!0}}class DetectionModeBlindSightPF extends DetectionModeBlindSensePF{static ID="blindSight";static LABEL="PF1.Sense.blindsight";static DETECTION_TYPE=DetectionMode.DETECTION_TYPES.OTHER;static PRIORITY=2e5;static getDetectionFilter(){return this._detectionFilter??=OutlineOverlayFilter.create({outlineColor:[0,.33,.6,1],knockout:!1,wave:!1})}}class DetectionModeTremorPF extends DetectionModeTremor{static ID="feelTremor";static LABEL="PF1.Sense.tremorsense";static DETECTION_TYPE=DetectionMode.DETECTION_TYPES.MOVE;static PRIORITY=201e3;constructor(e={},...t){e.walls=!1,super(e,...t)}}const ie=Object.freeze(Object.defineProperty({__proto__:null,DetectionModeBlindSensePF,DetectionModeBlindSightPF,DetectionModeInvisibilityPF,DetectionModeTremorPF},Symbol.toStringTag,{value:"Module"})),ne=(()=>{const e=CONFIG.Canvas.visionModes.darkvision.toObject();return delete e.lighting.levels[VisionMode.LIGHTING_LEVELS.DIM],new VisionMode(e)})(),oe=Object.freeze(Object.defineProperty({__proto__:null,darkvision:ne},Symbol.toStringTag,{value:"Module"})),re=Object.freeze(Object.defineProperty({__proto__:null,AbilityTemplate:class AbilityTemplate extends MeasuredTemplatePF{static RENDER_THROTTLE=30;static fromData(e){const t=e.type,s=e.distance,a=e.flags;if(!t)return null;if(!s)return null;if(!canvas.scene)return null;if(!["cone","circle","rect","ray"].includes(t))return null;const i={t,distance:s||5,direction:0,x:0,y:0,flags:a,fillColor:e.color?e.color:game.user.color,texture:e.texture?e.texture:null,_id:foundry.utils.randomID(16)};switch(t){case"cone":!0===game.settings.get("pf1","measureStyle")?i.angle=CONFIG.MeasuredTemplate.defaults.angle:i.angle=CONFIG.MeasuredTemplate.defaults.originalAngle;break;case"rect":i.distance=Math.sqrt(Math.pow(s,2)+Math.pow(s,2)),i.direction=45;break;case"ray":i.width=CONFIG.MeasuredTemplate.defaults.width}return new this(new(0,CONFIG.MeasuredTemplate.documentClass)(i,{parent:canvas.scene}))}async drawPreview(e){const t=canvas.activeLayer;return await this.draw(),this.active=!0,this.layer.activate(),this.layer.preview.addChild(this),this.activatePreviewListeners(t)}activatePreviewListeners(e){return new Promise((t=>{const s={},a=!0===game.settings.get("pf1","measureStyle"),_clear=()=>{this.destroyed||this.destroy()},i=function throttle(e,t){let s=-1;return()=>(s<=0&&(s=setTimeout((()=>{s=-1,e()}),t)),s)}((()=>{this.refresh(),canvas.app.render()}),this.constructor.RENDER_THROTTLE);s.mm=e=>{e.stopPropagation();const t=e.data.getLocalPosition(this.layer),s=canvas.grid.getSnappedPosition(t.x,t.y,2);this.document.x=s.x,this.document.y=s.y,i()},s.rc=(a,i=!0)=>{a.preventDefault(),a.stopPropagation(),this.layer.preview.removeChildren(),canvas.stage.off("pointermove",s.mm),canvas.stage.off("pointerdown",s.lc),canvas.app.view.removeEventListener("contextmenu",s.rc),canvas.app.view.removeEventListener("wheel",s.mw),this.active=!1;canvas.grid.getHighlightLayer(this.highlightId).clear(),_clear(),e.activate(),i&&t({result:!1})},s.lc=async e=>{e.preventDefault(),e.stopPropagation(),s.rc(e,!1);const a={result:0!=this.document.distance,place:async()=>{const[e]=await canvas.scene.createEmbeddedDocuments("MeasuredTemplate",[this.document.toObject(!1)]);return this.document=e,e},delete:()=>this.document.delete()};_clear(),t(a)},s.mw=e=>{let t,s;e.preventDefault(),e.stopPropagation(),e.ctrlKey?(t=canvas.dimensions.distance*-Math.sign(e.deltaY),this.document.distance+=t,this.document.distance<0&&(this.document.distance=0)):(a&&"cone"===this.document.t?(t=90,s=e.shiftKey?t:45):(t=canvas.grid.type>CONST.GRID_TYPES.SQUARE?30:15,s=e.shiftKey?t:5),"rect"===this.document.t?(s=Math.sqrt(50),this.document.distance+=s*-Math.sign(e.deltaY)):this.document.direction+=s*Math.sign(e.deltaY)),i()},this.controlIcon&&this.controlIcon.removeAllListeners(),canvas.stage.on("pointermove",s.mm),canvas.stage.on("pointerdown",s.lc),canvas.app.view.addEventListener("contextmenu",s.rc),canvas.app.view.addEventListener("wheel",s.mw),this.hitArea=new PIXI.Polygon([])}))}refresh(){if(this.template&&canvas.scene)return super.refresh()}},MeasuredTemplatePF,TemplateLayerPF,TokenPF,TokenQuickActions,attackReach:ae,detectionModes:ie,lowLightVision:t,visionModes:oe},Symbol.toStringTag,{value:"Module"}));class FunctionTerm extends RollTerm{constructor({terms:e=[],options:t={},maxArgs:s}={}){super({options:t}),this.terms=e.map((e=>e instanceof RollTerm?e:e.class?RollTerm.fromData(e):e)),s>0&&this.terms.length>s&&(this.terms=this.terms.slice(0,s))}isIntermediate=!1;terms=[];static parseArgs(e){return e.map((e=>{if(e instanceof RollTerm)return e;const t=RollPF.parse(e);return t.length>1?ParentheticalTerm.fromTerms(t):t[0]}))}static SERIALIZE_ATTRIBUTES=["terms"];static matchTerm(e){return!1}get simplify(){return this.formula}static get isFunction(){return!0}}const le=Object.freeze(Object.defineProperty({__proto__:null,FunctionTerm},Symbol.toStringTag,{value:"Module"}));class RealStringTerm extends StringTerm{constructor({term:e=null,options:t={}}={}){if(super({options:t}),this.term=/^(\\?["'])(?<str>.*)\1$/.exec(e)?.groups.str??e,"string"!=typeof this.term)throw Error(`RealStringTerm can only accept strings, received: "${e}"`);this._evaluated=!0}static SERIALIZE_ATTRIBUTES=["term"];get expression(){return this.term}get formula(){return`"${this.term}"`}static matchTerm(e){return/^(\\?["']).*\1$/.test(e)}}class BooleanTerm extends RollTerm{constructor({term:e=!0,options:t={}}={}){if(super({options:t}),!["true","false",!0,!1].includes(e))throw Error('BooleanTerm can only be "true" or "false", received: '+e);this.term="true"===e||!0===e,this._evaluated=!0}static SERIALIZE_ATTRIBUTES=["term"];get total(){return this.term?1:0}get expression(){return this.term}get formula(){return this.term.toString()}static matchTerm(e){return["true","false"].includes(e)}}class NullTerm extends RollTerm{constructor({options:e={}}={}){super({options:e}),this._evaluated=!0}get expression(){return null}get formula(){return"null"}static matchTerm(e){return"null"===e}}class UndefinedTerm extends RollTerm{constructor({options:e={}}={}){super({options:e}),this._evaluated=!0}get expression(){}get formula(){return"undefined"}static matchTerm(e){return"undefined"===e}}const ce=Object.freeze(Object.defineProperty({__proto__:null,BooleanTerm,NullTerm,RealStringTerm,UndefinedTerm},Symbol.toStringTag,{value:"Module"}));class IfElseTerm extends FunctionTerm{constructor({terms:e=[],options:t}){if(super({options:t}),e)if(e[0]instanceof RollTerm)this.terms=e;else if("string"==typeof e[0])this.terms=e.reduce(((e,t)=>{if(!t)return e.push(t),e;const s=Roll.parse(t);return s.length>1?e.push(ParentheticalTerm.fromTerms(s)):e.push(s[0]),e}),[]);else try{this.terms=e.map((e=>e?RollTerm.fromData(e):null))}catch(t){console.error({terms:e},t)}this.terms.length>3&&(this.terms=this.terms.slice(0,3))}terms=[];isIntermediate=!1;static SERIALIZE_ATTRIBUTES=["terms"];static MODIFIERS={};get total(){const[e,t,s]=this.terms,a=!!e.total,i=a?t:s;return i?i.total:a?1:0}get dice(){return this.terms.reduce(((e,t)=>(t instanceof DiceTerm?e.push(t):t instanceof PoolTerm&&(e=e.concat(t.dice)),e)),[])}get simplify(){const[e,t,s]=this.terms,a=!!e.total,i=a?t:s;return i?i.formula:a?"1":"0"}get expression(){const e=[this.terms[0].formula,this.terms[1]?.formula||"1",this.terms[2]?.formula||"0"];return"0"===e[2]&&(e.pop(),"1"===e[1]&&e.pop()),`ifelse(${e.join(", ")})`}get isDeterministic(){return!this.terms.some((e=>!e.isDeterministic))}_evaluateSync({minimize:e=!1,maximize:t=!1}={}){const s={minimize:e,maximize:t,async:!1},a=[];for(let e of this.terms)e._evaluated||e.isIntermediate&&(e.evaluate(s),e=new NumericTerm({number:e.total,options:e.options})),a.push(e);this.terms=a;for(const e of this.terms)e._evaluated||e.evaluate(s);const[i,n,o]=this.terms,r=!!i.total,l=(r?n:o)??new NumericTerm({number:r?1:0});return this.flavor&&(l.options.flavor=this.flavor),this.terms=[i,r?n:null,r?null:o],this}async _evaluate({minimize:e=!1,maximize:t=!1}={}){return this._evaluateSync({minimize:e,maximize:t})}static matchTerm(e){return"ifelse"===e}}const ue=Object.freeze(Object.defineProperty({__proto__:null,IfElseTerm,IfTerm:class IfTerm extends IfElseTerm{constructor({terms:e=[],roll:t,options:s}){super({terms:e,roll:t,options:s}),this.terms.length>2&&(this.terms=this.terms.slice(0,2))}get expression(){const e=[this.terms[0].formula],t=this.terms[1]?.formula||"1";return"1"!==t&&e.push(t),`if(${e.join(", ")})`}get isDeterministic(){return!this.terms.some((e=>!e.isDeterministic))}static matchTerm(e){return"if"===e}},LookupTerm:class LookupTerm extends FunctionTerm{constructor({terms:e=[],search:t,result:s,options:a={}}={}){if(super({terms:e,options:a}),this.search=t,this.result=s,this.terms.length<3)throw Error("LookupTerm requires minimum of 3 arguments")}result=null;static SERIALIZE_ATTRIBUTES=["terms","search","result"];get expression(){return`lookup(${this.terms.map((e=>e instanceof ParentheticalTerm?e.term:e.expression)).join(", ")})`}get formula(){return`lookup(${this.terms.map((e=>e.formula)).join(", ")})${this.flavor?`[${this.flavor}]`:""}`}get total(){const e=this.terms[0];if(!e)return;let t=e.total;return this.terms[1+t]||(t=0),this.terms[1+t]?.total}get dice(){const e=this.lookupResult;if(!e)return[];return Roll.defaultImplementation.fromTerms(e).dice??[]}get lookupResult(){const e=this.terms[0];if(!e)return;let t=e.total;return(t<0||this.terms.length<t+1)&&(t=0),this.terms[1+t]}get simplify(){return this.lookupResult.formula}get isDeterministic(){return this.terms[0]?.isDeterministic&&this.lookupResult?.isDeterministic}_evaluateSync({minimize:e=!1,maximize:t=!1}={}){const s={minimize:e,maximize:t,async:!1},evalOffset=e=>{const t=this.terms[e];t._evaluated||t.evaluate(s)},a=[];for(let e of this.terms)e._evaluated||e.isIntermediate&&(e.evaluate(s),e=new NumericTerm({number:e.total,options:e.options})),a.push(e);this.terms=a,evalOffset(0);const i=this.terms[0],n=Roll.defaultImplementation.fromTerms([i]);n._evaluated||n.evaluate(s);let o=Math.max(0,n.total);return this.terms[1+o]||(o=0),evalOffset(o),this.flavor&&(this.result.terms[1+o].options.flavor=this.flavor),this.result??=Roll.defaultImplementation.fromTerms(this.terms),this}async _evaluate({minimize:e=!1,maximize:t=!1}={}){const s={minimize:e,maximize:t},evalOffset=async e=>{const t=this.terms[e];t._evaluated||await t.evaluate(s)},a=[];for(let e of this.terms)e._evaluated||e.isIntermediate&&(await e.evaluate(s),e=new NumericTerm({number:e.total,options:e.options})),a.push(e);this.terms=a,await evalOffset(0);const i=this.terms[0];this.search??=Roll.defaultImplementation.fromTerms([i]),this.search._evaluated||await this.search.evaluate(s);let n=Math.max(0,this.search.total);return this.terms[1+n]||(n=0),await evalOffset(n),this.flavor&&(this.terms[1+n].options.flavor??=this.flavor),this}get hasNumericTooltip(){const e=this.lookupResult;return e?.isDeterministic??!0}getTooltipData(){const e=this.lookupResult;if(!e)return;return{total:Roll.defaultImplementation.fromTerms([e]).total,flavor:e.options.flavor??game.i18n.localize("PF1.Undefined")}}static matchTerm(e){return"lookup"===e}},SizeReachTerm:class SizeReachTerm extends FunctionTerm{constructor({terms:e=[],options:t={}}={}){super({terms:e,options:t,maxArgs:3})}static SERIALIZE_ATTRIBUTES=["terms","roll"];static MODIFIERS={};get total(){return this.roll?.total}get dice(){return this.roll?.dice}get expression(){return`sizeReach(${this.terms.map((e=>e.formula)).join(", ")})`}get formula(){return`sizeReach(${this.terms.map((e=>e.formula)).join(", ")})`}get simplify(){return this.roll?.formula}get inheritDice(){return this.roll?.dice.length>0}get isDeterministic(){return!this.terms.some((e=>!e.isDeterministic))}static get isFunction(){return!0}_evaluateSync({minimize:e=!1,maximize:t=!1}={}){const s={minimize:e,maximize:t,async:!1},a=[];for(let e of this.terms)e._evaluated||e.isIntermediate&&(e.evaluate(s),e=new NumericTerm({number:e.total,options:e.options})),a.push(e);this.terms=a;for(const e of this.terms)e._evaluated||e.evaluate(s);const i=!this.roll,n=i?pf1.utils.roll.sizeReach(...this.terms.map((e=>e.total))):null;n&&this.flavor&&(n[0].options.flavor=this.flavor);const o=i?RollPF.fromTerms(n):this.roll;return this.flavor&&(o.options.flavor=this.flavor),this.roll=o._evaluated?o:o.evaluate(s),this}async _evaluate({minimize:e=!1,maximize:t=!1}={}){const s={minimize:e,maximize:t},a=[];for(let e of this.terms)e._evaluated||e.isIntermediate&&(await e.evaluate(s),e=new NumericTerm({number:e.total,options:e.options})),a.push(e);this.terms=a;for(const e of this.terms)e._evaluated||await e.evaluate(s);const i=!this.roll,n=i?pf1.utils.roll.sizeReach(...this.terms.map((e=>e.total))):null;n&&this.flavor&&(n[0].options.flavor=this.flavor);const o=i?RollPF.fromTerms(n):this.roll;return this.flavor&&(o.options.flavor=this.flavor),this.roll=o._evaluated?o:await o.evaluate(s),this}static matchTerm(e){return"sizeReach"===e}get hasNumericTooltip(){return 0===this.roll?.dice.length}getTooltipData(){this.roll.getTooltipData()}},SizeRollTerm:class SizeRollTerm extends FunctionTerm{constructor({terms:e=[],roll:t,options:s={}}={}){super({terms:e,options:s,maxArgs:4}),this.roll=t?t instanceof Roll?t:Roll.fromData(t):void 0}roll=null;static SERIALIZE_ATTRIBUTES=["terms","roll"];get total(){return this.roll.total}get dice(){return this.roll?.dice??[]}get expression(){return`sizeRoll(${this.terms.map((e=>e.formula)).join(", ")})`}get inheritDice(){return!0}get simplify(){return this.roll?.formula}get isDeterministic(){return!1}_evaluateSync({minimize:e=!1,maximize:t=!1}={}){const s={minimize:e,maximize:t,async:!1},a=[];for(let e of this.terms)e._evaluated||e.isIntermediate&&(e.evaluate(s),e=new NumericTerm({number:e.total,options:e.options})),a.push(e);this.terms=a;for(const e of this.terms)e._evaluated||e.evaluate(s);if(!this.roll){const e=pf1.utils.roll.sizeRoll(...this.terms.map((e=>e.total)));e&&this.flavor&&(e[0].options.flavor=this.flavor),this.roll=RollPF.fromTerms(e)}return this.flavor&&(this.roll.options.flavor??=this.flavor),this.roll._evaluated||this.roll.evaluate(s),this}async _evaluate({minimize:e=!1,maximize:t=!1}={}){const s={minimize:e,maximize:t},a=[];for(let e of this.terms)e._evaluated||e.isIntermediate&&(await e.evaluate(s),e=new NumericTerm({number:e.total,options:e.options})),a.push(e);this.terms=a;for(const e of this.terms)e._evaluated||await e.evaluate(s);if(!this.roll){const e=pf1.utils.roll.sizeRoll(...this.terms.map((e=>e.total)));e&&this.flavor&&(e[0].options.flavor=this.flavor),this.roll=RollPF.fromTerms(e)}return this.flavor&&(this.roll.options.flavor??=this.flavor),this.roll._evaluated||await this.roll.evaluate(s),this}static matchTerm(e){return"sizeRoll"===e}getTooltipData(){return this.roll.getTooltipData()}}},Symbol.toStringTag,{value:"Module"})),pe=Object.freeze(Object.defineProperty({__proto__:null,aux:ce,base:le,fn:ue},Symbol.toStringTag,{value:"Module"})),me=Object.freeze(Object.defineProperty({__proto__:null,D20RollPF,DamageRoll,RollPF,d20Roll:async function d20Roll(e={}){const{skipDialog:t=getSkipActionPrompt(),staticRoll:s=null,chatTemplateData:a={},chatMessage:i=!0,compendium:n,noSound:o=!1,flavor:r="",parts:l=[],dice:c=pf1.dice.D20RollPF.standardRoll,rollData:u={},subject:p,bonus:m="",speaker:d}=e;let h=e.rollMode;const g=[c,...l].join("+"),f=new pf1.dice.D20RollPF(g,u,{flavor:r,staticRoll:s,bonus:m},{speaker:d});if(!t){const e=d?.alias?`${d.alias}: ${r}`:r;if(null===await f.promptDialog({title:e,rollMode:h,subject:p,speaker:d}))return;h=f.options.rollMode,delete f.options.rollMode}return f.toMessage({speaker:d},{create:i,noSound:o,chatTemplateData:a,compendium:n,subject:p,rollMode:h})},terms:pe},Symbol.toStringTag,{value:"Module"}));class ContextNote extends foundry.abstract.DataModel{static defineSchema(){const e=foundry.data.fields;return{text:new e.StringField({initial:"",nullable:!1,blank:!0}),target:new e.StringField({initial:"",nullable:!1,blank:!0})}}get subTarget(){return foundry.utils.logCompatibilityWarning("ContextNote.subTarget is deprecated in favor of ContextNote.target",{since:"PF1 v10",until:"PF1 v11"}),this.target}static migrateData(e){e.subTarget&&("spell"===e.target&&"effect"===e.subTarget?e.target="spellEffect":e.target=e.subTarget)}}const de=Object.freeze(Object.defineProperty({__proto__:null,ContextNote,ItemAction,ItemChange,ItemConditional:class ItemConditional{constructor(e,t){this.data=e,this.parent=t,this.prepareData()}static async create(e,t={}){const{parent:s}=t;if(s instanceof pf1.components.ItemAction){e=e.map((e=>foundry.utils.mergeObject(this.defaultData,e)));const t=foundry.utils.deepClone(s.data.conditionals||[]);return t.push(...e),await s.update({conditionals:t}),e.map((e=>s.conditionals.get(e._id)))}return[]}static get defaultData(){return{_id:foundry.utils.randomID(16),default:!1,name:"",modifiers:[]}}get id(){return this.data._id}get name(){return this.data.name}prepareData(){this.data.modifiers instanceof Array&&(this.modifiers=this._prepareModifiers(this.data.modifiers))}_prepareModifiers(e){const t=this.modifiers,s=new Collection;for(const a of e){let e=null;t&&t.has(a._id)?(e=t.get(a._id),e.data=a,e.prepareData()):e=new pf1.components.ItemConditionalModifier(a,this),s.set(a._id||e.data._id,e)}return s}async update(e,t={}){const s=this.parent.data.conditionals.indexOf(this.data),a=foundry.utils.deepClone(this.data),i=foundry.utils.mergeObject(a,e);if(keepUpdateArray(this.data,i,"modifiers"),t.dryRun)return i;await this.parent.update({["conditionals."+s]:i})}async delete(){const e=foundry.utils.deepClone(this.parent.data.conditionals);return e.findSplice((e=>e._id===this.id)),this.parent.update({conditionals:e})}},ItemConditionalModifier:class ItemConditionalModifier{constructor(e,t){this.data=e,this.parent=t,this.prepareData()}static async create(e,t={}){const{parent:s}=t;if(s instanceof pf1.components.ItemConditional){e=e.map((e=>foundry.utils.mergeObject(this.defaultData,e)));const t=foundry.utils.deepClone(s.data.modifiers||[]);return t.push(...e),await s.update({modifiers:t}),e.map((e=>s.modifiers.get(e._id)))}return[]}static get defaultData(){return{_id:foundry.utils.randomID(16),formula:"",target:"",subTarget:"",type:"",damageType:pf1.components.ItemAction.defaultDamageType,critical:""}}get id(){return this.data._id}prepareData(){}async update(e,t={}){const s=this.parent.data.modifiers.indexOf(this.data),a=foundry.utils.deepClone(this.data),i=foundry.utils.flattenObject(foundry.utils.mergeObject(a,e));if(t.dryRun)return i;await this.parent.update({["modifiers."+s]:foundry.utils.expandObject(i)})}async delete(){const e=this.parent.data.modifiers.indexOf(this.data);if(e<0)throw Error("Modifier not found in parent "+this.parent.name);const t=foundry.utils.duplicate(this.parent.data.modifiers);return t.splice(e,1),this.parent.update({modifiers:t})}},ItemScriptCall:class ItemScriptCall{constructor(e,t){if(this.data=foundry.utils.mergeObject(this.constructor.defaultData,e),this.parent=t,"macro"===this.type){const e=fromUuidSync(this.value);this.data.name=e?.name||`${game.i18n.localize("PF1.Unknown")} (${game.i18n.localize("DOCUMENT.Macro")})`,this.data.img=e?.img||"icons/svg/hazard.svg"}}static async create(e,t){const{parent:s}=t;if(s instanceof pf1.documents.item.ItemPF){e=e.map((e=>foundry.utils.mergeObject(this.defaultData,e)));const t=s.toObject().system.scriptCalls||[];return t.push(...e),await s.update({"system.scriptCalls":t}),e.map((e=>s.scriptCalls.get(e._id)))}return[]}static get defaultData(){return{_id:foundry.utils.randomID(16),name:game.i18n.localize("PF1.ScriptCalls.NewName"),img:"icons/svg/dice-target.svg",type:"script",value:"",category:"",hidden:!1}}get id(){return this.data._id}get type(){return this.data.type}get value(){return this.data.value}get category(){return this.data.category}get name(){return this.data.name}get img(){return this.data.img}get hidden(){return this.data.hidden}get hide(){return this.hidden&&!game.user.isGM}async getScriptBody(){return foundry.utils.logCompatibilityWarning("ItemScriptCall.getScriptBody() has been deprecated with no replacement.",{since:"PF1 v10",until:"PF1 v11"}),"script"===this.type?this.value:(await fromUuid(this.value))?.command??""}async getDelegate(){return"script"===this.type?new Macro({type:"script",command:this.value,name:this.name}):fromUuid(this.value)}async update(e,t={}){if(null!=this.parent){const s=this.parent.system.scriptCalls.find((e=>e._id===this.id)),a=this.parent.system.scriptCalls.indexOf(s);if(a>=0)return e=Object.entries(e).reduce(((e,t)=>(e[`system.scriptCalls.${a}.${t[0]}`]=t[1],e)),{}),this.parent.update(e,t)}}async edit({editable:e=!0}={}){if("macro"===this.type){const t=await fromUuid(this.value);if(!t)return void ui.notifications.error(game.i18n.format("PF1.Error.NoMacroID",{id:this.value}));t.sheet.render(!0,{focus:!0,editable:e})}else{const t=new pf1.applications.ScriptEditor({command:this.value,name:this.name,parent:this.parent,script:this.id,scriptCall:!0}).render(!0,{editable:e}),s=await t.awaitResult();if(s)return this.update({value:s.command,name:s.name})}}async execute(e,t={}){const s=this.parent,a=s.actor,i=e.action??null,n=a?.token?.object??a.getActiveTokens(!1,!1)[0],o=await this.getDelegate();if(o)return o.execute({item:s,actor:a,token:n,shared:e,action:i,...t})}}},Symbol.toStringTag,{value:"Module"})),registerHandlebarsHelpers=function(){Handlebars.registerHelper("convertDistance",(e=>Number.isFinite(e)?convertDistance(e)[0]:e)),Handlebars.registerHelper("distanceUnit",(e=>{foundry.utils.logCompatibilityWarning("distanceUnit HBS helper is deprecated with no replacement.",{since:"PF1 v10",until:"PF1 v11"});const t=convertDistance(0,e)[1];return pf1.config.measureUnitsShort[t]||t})),Handlebars.registerHelper("actionRange",((e,t)=>{if(!e?.hasRange)return null;const s=e.data.range.value,a=e.data.range.units;if(null==a)return null;const[i,n]=calculateRange(s,a,t);return`${i} ${n}`})),Handlebars.registerHelper("actionDamage",(function actionDamage2(e,t,s){return e.hasDamage?pf1.utils.formula.actionDamage(e,{simplify:s?.hash?.combine??!0}):null})),Handlebars.registerHelper("damageTypes",(e=>{foundry.utils.logCompatibilityWarning("damageTypes HBS helper is deprecated with no replacement.",{since:"PF1 v10",until:"PF1 v11"});const t=[],{custom:s,values:a}=e;return s&&t.push(s),a.forEach((e=>t.push(game.i18n.localize(pf1.registry.damageTypes.get(e)?.name??"PF1.Undefined")))),t.join(", ")})),Handlebars.registerHelper("actionAttacks",(e=>{foundry.utils.logCompatibilityWarning("actionAttacks HBS helper is deprecated with no replacement.",{since:"PF1 v10",until:"PF1 v11"});const t=e.getAttacks({full:!0,bonuses:!0,conditionals:!0}).map((e=>e.attackBonus)),s=Math.max(...t);return`${t.length} (${s<0?s:"+"+s}${t.length>1?"/…":""})`})),Handlebars.registerHelper("abilityMod",((e,t,s)=>Math.floor(t.abilities[e]?.mod*s))),Handlebars.registerHelper("json-string",(e=>new Handlebars.SafeString(escape(JSON.stringify(e))))),Handlebars.registerHelper("numberFormatAlt",((e,{hash:t}={})=>pf1.utils.limitPrecision(e,t.decimals)))},he=Object.freeze(Object.defineProperty({__proto__:null,preloadHandlebarsTemplates,registerHandlebarsHelpers,renderCachedTemplate},Symbol.toStringTag,{value:"Module"}));const ge=Object.freeze(Object.defineProperty({__proto__:null,dialogGetActor:async function dialogGetActor(e="",t=[]){return foundry.utils.logCompatibilityWarning("pf1.utils.dialog.dialogGetActor is deprecated in favor of pf1.utils.dialog.getActor",{since:"PF1 v10",until:"PF1 v11"}),{type:"actor",id:await pf1.utils.dialog.getActor({actors:t,title:e})}},dialogGetNumber:async function dialogGetNumber({title:e="Input Number",initial:t=null,min:s=-1/0,max:a=1/0}={}){foundry.utils.logCompatibilityWarning("pf1.utils.dialog.dialogGetNumber is deprecated in favor of pf1.utils.dialog.getNumber",{since:"PF1 v10",until:"PF1 v11"});let i=await pf1.utils.dialog.getNumber({title:e,initial:t,min:s,max:a});return Number.isNaN(i)&&(i=t),""+i},getActor:async function getActor({filter:e,actors:t,title:s,disableUnowned:a,ownership:i,selected:n,showUnowned:o,appOptions:r={},renderOptions:l={}}={}){const c={actors:t,disableUnowned:a,filter:t=>e?.(t)??!0,ownership:i,selected:n,showUnowned:o};return r.title=s,ActorSelector.wait(c,r,l)},getItem:async function getItem({empty:e=!0,type:t,subType:s,filter:a,actor:i,items:n,title:o,appOptions:r={},renderOptions:l={}}={}){if(!t&&!s&&!a)throw Error("Insufficient filter rules provided.");const c={actor:i,items:n,empty:e,filter:e=>(!t||e.type===t)&&((!s||e.subType===s)&&(a?.(e)??!0))};return o||a||!t||(o=s?pf1.config[t+"Types"]?.[s]:game.i18n.localize(CONFIG.Item.typeLabels[t]))&&(o=game.i18n.format("PF1.SelectSpecific",{specifier:o})),r.title=o,ItemSelector.wait(c,r,l)},getNumber:async function getNumber({title:e,label:t,hint:s,initial:a,placeholder:i,min:n,max:o,step:r,classes:l=[],render:c,dialog:u={}}={}){const p={value:a,min:n,max:o,step:r,placeholder:i,label:t,hint:s},m=await renderTemplate("systems/pf1/templates/apps/get-number.hbs",p);return Dialog.wait({title:e||game.i18n.localize("PF1.Application.GetNumber.Title"),content:m,buttons:{confirm:{icon:'<i class="fas fa-check"></i>',label:game.i18n.localize("PF1.Application.GetNumber.Confirm"),callback:e=>e.querySelector("input[name='number']").valueAsNumber}},default:"confirm",render:c,close:()=>NaN},{jQuery:!1,classes:[...Dialog.defaultOptions.classes,"pf1","get-number",...l]},{focus:!0,width:260,...u})}},Symbol.toStringTag,{value:"Module"}));const fe=Object.freeze(Object.defineProperty({__proto__:null,convert:function convert(e,t="gp"){if(!(Number.isFinite(e)&&e>=0))throw Error("Invalid copper quantity: "+e);let s=0,a=0,i=0;const n={pp:3,gp:2,sp:1,cp:0},o=n[t];return o>=n.pp&&(s=Math.floor(e/1e3),e-=1e3*s),o>=n.gp&&(a=Math.max(0,Math.floor(e/100)),e-=100*a),o>=n.sp&&(i=Math.max(0,Math.floor(e/10)),e-=10*i),{pp:s,gp:a,sp:i,cp:e}},merge:function merge({pp:e=0,gp:t=0,sp:s=0,cp:a=0}={},i="cp"){const n=1e3*e+100*t+10*s+a;switch(i){case"pp":return n/1e3;case"gp":return n/100;case"sp":return n/10;default:return n}},split:function split(e){const t=Math.floor(e/100),s=Math.floor(e/10)-10*t;return e=e-100*t-10*s,{gp:Math.max(0,t),sp:Math.max(0,s),cp:Math.max(0,e)}}},Symbol.toStringTag,{value:"Module"})),unflair=e=>e.replace(/\[[^\]]*]/g,""),compress=e=>e.replace(/\s+/g,"").replace(/\+-/g,"-").replace(/--/g,"+").replace(/-\+/g,"-").replace(/\+\++/g,"+"),isSimpleTerm=e=>e instanceof NumericTerm||e?.simple||!1;class FormulaPart{terms=[];simple=!1;constructor(e=[],t=!1){this.terms=e.filter((e=>!!e)),this.simple=t}get isDeterministic(){return this.terms.every((e=>e.isDeterministic))}get formula(){const e=this.terms.map((e=>e.constructor.isFunction?""+e.simplify:e.isDeterministic?""+e.total:e.formula)).join(""),t=Roll.create(e);return t.isDeterministic?t.evaluate({async:!1}).total.toString():e}get total(){const e=Roll.create(this.formula);return e.evaluate({async:!1}),e.total}}function triTermOps(e,t,s=!1){const a=[];for(;e.length;){const i=e.shift();if(i instanceof OperatorTerm&&t.includes(i.operator)&&(!s||isSimpleTerm(a.at(-1))&&isSimpleTerm(e[0]))){const t=a.pop(),s=e.shift();a.push(new FormulaPart([t,i,s],isSimpleTerm(t)&&isSimpleTerm(s)))}else a.push(i)}return a}class TernaryTerm{condition;ifTrue;ifFalse;constructor(e,t,s){e instanceof FormulaPart||(e=new FormulaPart(Array.isArray(e)?e:[e])),this.condition=e,t instanceof FormulaPart||(t=new FormulaPart(Array.isArray(t)?t:[t])),this.ifTrue=t,s instanceof FormulaPart||(s=new FormulaPart(Array.isArray(s)?s:[s])),this.ifFalse=s}get isDeterministic(){return Roll.create(this.formula).isDeterministic}get formula(){return this.condition.isDeterministic?this.condition.total?this.ifTrue.formula:this.ifFalse.formula:[this.condition.formula,"?",this.ifTrue.formula,":",this.ifFalse.formula].join(" ")}get total(){return Roll.create(this.formula).evaluate({async:!1}).total}}const ye=Object.freeze(Object.defineProperty({__proto__:null,actionDamage:function actionDamage(e,{simplify:t=!0,strict:s=!0}={}){const a=e.actor,i=e.item,n=a?.system,o=e.data,r=[],l={_rollData:null,get rollData(){return this._rollData??=e.getRollData(),this._rollData}},handleFormula=(t,a)=>{try{switch(typeof t){case"string":{const e=t.indexOf("@")>=0?a?.parent?.getRollData()??l.rollData:{};if(0!=t){const a=pf1.utils.formula.simplify(t,e,{strict:s});0!=a&&r.push(a)}break}case"number":0!=t&&r.push(""+t)}}catch(s){console.error(`Action damage formula parsing error with "${t}"`,s,e),r.push("NaN")}},handleParts=e=>e.forEach((({formula:e})=>handleFormula(e)));handleParts(o.damage.parts);const c="natural"===e.item.subType,u=o.ability.damage;if(u){const t=o.ability?.max??1/0,s=Math.min(n?.abilities[u]?.mod??0,t),a=e.data?.held||i?.system.held||"normal";let l=o.ability.damageMult??(c?null:pf1.config.abilityDamageHeldMultipliers[a])??1;c&&!(o.naturalAttack?.primaryAttack??1)&&(l=o.naturalAttack?.secondary?.damageMult??.5);const p=s>=0?Math.floor(s*l):s;0!=p&&r.push(p)}if(handleParts(o.damage.nonCritParts),e.allDamageSources.forEach((e=>handleFormula(e.formula,e))),0===r.length||r.some((e=>"NaN"===e)))return console.warn("Action damage resulted in invalid formula:",r.join(" + "),e),"NaN";const p=pf1.utils.formula.compress(r.join("+"));if(!t)return p;try{const e=p.indexOf("@")>=0?l.rollData:void 0,t=pf1.utils.formula.simplify(p,e,{strict:s});return pf1.utils.formula.compress(t)}catch(t){return console.error("Invalid action damage formula:",r.join(" + "),e,t),"NaN"}},compress,simplify:function simplify(e,t={},{strict:s=!0}={}){e=compress(Roll.replaceFormulaData(unflair(e),t,{missing:0})),e=Roll.defaultImplementation.parse(e).map((e=>{if(e instanceof ParentheticalTerm){e.evaluate();return e.total>=0?""+e.total:`(${e.total})`}return e.formula})).join("");const a=new Roll.defaultImplementation(e);try{a.evaluate({async:!1,minimize:!0})}catch(t){if(s)throw t;return compress(e)}let i=a.terms;return i=function negativeTerms(e){const t=[];for(;e.length;){const s=e.shift();if(s instanceof OperatorTerm&&"-"===s.operator){if(!(t.at(-1)instanceof OperatorTerm)){const e=new OperatorTerm({operator:"+"});e.evaluate({async:!1}),t.push(e)}t.push(new FormulaPart([s,e.shift()],!0))}else t.push(s)}return t}(i),i=triTermOps(i,["**"]),i=triTermOps(i,["/","*"]),i=triTermOps(i,["==","===",">",">=","<","<=","!=","!=="]),i=triTermOps(i,["+","-"],!0),i=function stringTerms(e){const t=[];for(;e.length;){const s=e.shift();s instanceof StringTerm?/^d\d/.test(s.expression)?t.push(new FormulaPart([t.pop(),s])):t.push(new FormulaPart([s,e.shift()])):t.push(s)}return t}(i),i=function ternaryTerms(e){const t=[];for(;e.length;){let s=e.shift();if(s instanceof OperatorTerm&&"?"===s.operator){const a=t.pop(),i=[];for(;e.length&&(s=e.shift(),!(s instanceof OperatorTerm&&":"===s.operator));)i.push(s);const n=e.shift();t.push(new TernaryTerm(a,i,n))}else t.push(s)}return t}(i),new FormulaPart(i).formula.replace(/ \+ 0\b/g,"")},unflair},Symbol.toStringTag,{value:"Module"}));const be=Object.freeze(Object.defineProperty({__proto__:null,sizeReach:function(e="M",t=!1,s="tall"){return"number"==typeof e&&(e=Object.values(pf1.config.sizeChart)[e]),e=Object.entries(pf1.config.sizeChart).find((t=>t[1]===e))[0],[new NumericTerm({number:pf1.documents.actor.ActorPF.getReach(e,s)[t?"reach":"melee"]})]},sizeRoll:function sizeRoll(e,t,s="M",a="M"){if(!Number.isFinite(e)||!Number.isFinite(t))return[new NumericTerm({number:NaN})];const _getSizeIndex=function(e){return"string"==typeof e?Object.values(pf1.config.sizeChart).indexOf(e.toUpperCase()):e};if((s=_getSizeIndex(s))===(a=_getSizeIndex(a)))return 1===e&&1===t?[new NumericTerm({number:1})]:[new Die({number:e,faces:t})];e>1&&(10===t?(s<a?a--:(e*=2,a++),t=8):4===t&&(t=e%2==0?8:6,e=Math.floor((e+1)/2))),12===t&&(e*=2,t=6);let i=`${e}d${t}`;const n=pf1.config.sizeDie;if(-1===n.indexOf(i)&&[6,8].includes(t)){let s;const a=n.map((e=>e.split("d").map((e=>Number(e)))));if(6===t?s=a.filter((([s,a])=>s<e&&a===t)).at(-1):8===t&&(s=a.filter((([s,a])=>s>e&&a===t)).at(0)),s){const[e,t]=s;i=`${e}d${6===t?8:6}`}}let o=n.indexOf(i);-1===o&&"1d1"===i&&(o=0);let r=i;if(o>=0){const e=n.indexOf("1d6"),t=n.indexOf("1d8");let i=a-s,l=a;for(;i>0;)l<=4||o<=t?(o--,i--,l--):(o-=2,i--,l--);for(;i<0;)l<=3||o<=e?(o++,i++,l++):(o+=2,i++,l++);o=Math.max(0,Math.min(n.length-1,o)),r=n[o]}-1===o&&ui.notifications.warn(game.i18n.format("PF1.Warning.NoSizeDie",{fallback:i,formula:r}));const[l,c]=r.split("d").map((e=>parseInt(e)));return!c||1===l&&1===c?[new NumericTerm({number:l})]:[new Die({number:l,faces:c})]}},Symbol.toStringTag,{value:"Module"})),ve=Object.freeze(Object.defineProperty({__proto__:null,getConditions:function(){const e=CONFIG.statusEffects;let t=pf1.registry.conditions.map((e=>({id:e.id,label:e.name,icon:e.texture})));if(game.settings.get("pf1","coreEffects"))t.push(...e);else{t=[e.find((e=>"dead"===e.id)),...t]}return t.sort(((e,t)=>e.label.localeCompare(t.label)))}},Symbol.toStringTag,{value:"Module"})),Pe=Object.freeze(Object.defineProperty({__proto__:null,SemanticVersion,binarySearch,calculateRange,canvas:i,chat:m,convertDistance,convertDistanceBack:function(e,t="ft"){return"metric"===getDistanceSystem()?"mi"===t?[Math.round(e/1.6*100)/100,"mi"]:[Math.round(5*e/1.5*100)/100,"ft"]:[e,t]},convertWeight:function(e){return"metric"===getWeightSystem()?e/2:e},convertWeightBack:function(e){return"metric"===getWeightSystem()?2*e:e},createTag,currency:fe,dialog:ge,diffObjectAndArray,enrichHTMLUnrolled,findInCompendia:function(e,{packs:t=[],type:s,docType:a,disabled:i=!1}={}){t=t?.length?t.flatMap((e=>game.packs.get(e)??[])):game.packs.filter((e=>!s||e.metadata.type==s)),i||(t=t.filter((e=>!0!==e.config?.pf1?.disabled))),e=e.toLocaleLowerCase();for(const s of t){s.fuzzyIndex||(s.fuzzyIndex=sortArrayByName([...s.index]));let t=s.fuzzyIndex;a&&(t=t.filter((e=>e.type===a)));const i=binarySearch(t,e,((e,t)=>e.localeCompare(t.name,void 0,{ignorePunctuation:!0})));if(i>-1){const e=s.index.get(t[i]._id);return{pack:s,index:e}}}let n=uniquePermutations(e.split(/[, _-]/));n?n=n.map((e=>e.join(" "))):(n=[null],n.push(e.split(/[ _-]/).reverse().join(" ")),n.push(e.split(/[,;] ?/).reverse().flatMap((e=>e.split(" "))).join(" ")));for(const e of t){let t=e.fuzzyIndex;a&&(t=t.filter((e=>e.type===a)));for(let s=1;s<n.length;s++){const a=binarySearch(t,n[s],((e,t)=>e.localeCompare(t.name,void 0,{ignorePunctuation:!0})));if(a>-1){const s=e.index.get(t[a]._id);if(s)return{pack:e,index:s}}}}return!1},formula:ye,getAbilityModifier:function getAbilityModifier(e=null,t={}){if(null!=e){const s=Math.abs(t.penalty??0),a=Math.abs(t.damage??0);return Math.max(-5,Math.floor((e-10)/2)-Math.floor(s/2)-Math.floor(a/2))}return 0},getActorFromId:function(e){foundry.utils.logCompatibilityWarning("pf1.utils.getActorFromId() is deprecated with no replacement",{since:"PF1 v10",until:"PF1 v11"});const t=ChatMessage.getSpeaker();let s=null;return e&&(s=game.actors.tokens[e],s||(s=game.actors.get(e))),t.token&&!s&&(s=game.actors.tokens[t.token]),s||(s=game.actors.get(t.actor)),s},getActors:function*getActors({base:e=!0,types:t=null,scene:s=null,scenes:a=!1,linked:i=!0,unlinked:n=!0,users:o=[game.user],ownership:r=CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER}={}){o=o.map((e=>e instanceof User?e:game.users.get(e)));const testUsers=e=>!o.length||o.some((t=>e.testUserPermission(t,r)));if(e)for(const e of[...game.actors])t&&!t.includes(e.type)||testUsers(e)&&(yield e);let l;s?l=s instanceof Scene?[s]:[game.scenes.get(s)]:a&&(l=[...game.scenes]);for(const s of l)for(const a of[...s.tokens]){const s=a.actor;if(!s)continue;if(t&&!t.includes(s.type))continue;if(!testUsers(s))continue;const o=a.isLinked;(o&&i&&!e||!o&&n)&&(yield s)}},getDistanceSystem,getItemOwner:function(e){return foundry.utils.logCompatibilityWarning("pf1.utils.getItemOwner() is deprecated with no replacement",{since:"PF1 v10",until:"PF1 v11"}),e.actor?e.actor:e.id?game.actors.find((t=>t.items.get(e.id))):null},getWeightSystem,handlebars:he,init:ve,isMinimumCoreVersion:function(e){foundry.utils.logCompatibilityWarning("pf1.utils.isMinimumCoreVersion is deprecated with no replacement",{since:"PF1 v10",until:"PF1 v11"});const t=SemanticVersion.fromString(game.version),s=SemanticVersion.fromString(e);return!t.isLowerThan(s)},limitPrecision:function limitPrecision(e,t=2){const s=Math.pow(10,t);return Math.floor(e*s)/s},measureDistance,overlandSpeed:function overlandSpeed$1(e){const t=getDistanceSystem(),s="metric"===t?game.settings.get("pf1","overlandMetricVariant"):"default",{per:a,out:i,unit:n}=pf1.config.overlandSpeed[t][s];return{speed:e/a*i,unit:n}},parseAlignment:function parseAlignment(e){return{lawful:e.includes("l")?1:0,evil:e.includes("e")?1:0,chaotic:e.includes("c")?1:0,good:e.includes("g")?1:0,neutral:"tn"==e?2:e.includes("n")?1:0}},refreshActors:function refreshActors({renderOnly:e=!1,renderForEveryone:t=!1}={}){const resetOrRender=async t=>{t&&(e||t.reset(),t.render(!0))};game.actors.forEach(resetOrRender),game.scenes.forEach((e=>e.tokens.filter((e=>e.actor&&!e.isLinked)).map((e=>e.actor)).forEach(resetOrRender))),t&&game.socket.emit("pf1","refreshActorSheets")},refreshSheets:function refreshSheets({reset:e=!0,actor:t=!0,item:s=!0,action:a=!0}={}){Object.values(ui.windows).forEach((i=>{(t&&i instanceof ActorSheet||s&&i instanceof ItemSheet||a&&i instanceof pf1.applications.component.ItemActionSheet)&&(e&&i.object instanceof Document?i.object.reset():i.render())}))},roll:be,sortArrayByName},Symbol.toStringTag,{value:"Module"})),ke=foundry.data.fields;class ScriptCallCategory extends RegistryEntry{static defineSchema(){return{...super.defineSchema(),itemTypes:new ke.ArrayField(new ke.StringField({})),info:new ke.StringField({required:!0,blank:!1,initial:""},{localize:!0})}}}class ScriptCalls extends Registry{static model=ScriptCallCategory;static _defaultData=[{_id:"use",itemTypes:["attack","buff","feat","loot","equipment","implant","consumable","spell","weapon"],name:"PF1.ScriptCalls.Use.Name",info:"PF1.ScriptCalls.Use.Info"},{_id:"postUse",itemTypes:["attack","buff","feat","loot","equipment","implant","consumable","spell","weapon"],name:"PF1.ScriptCalls.PostUse.Name",info:"PF1.ScriptCalls.PostUse.Info"},{_id:"equip",itemTypes:["weapon","equipment","loot"],name:"PF1.ScriptCalls.Equip.Name",info:"PF1.ScriptCalls.Equip.Info"},{_id:"implant",itemTypes:["implant"],name:"PF1.ScriptCalls.Implant.Name",info:"PF1.ScriptCalls.Implant.Info"},{_id:"toggle",itemTypes:["buff","feat"],name:"PF1.ScriptCalls.Toggle.Name",info:"PF1.ScriptCalls.Toggle.Info"},{_id:"changeQuantity",itemTypes:["loot","equipment","weapon","implant","consumable","container"],name:"PF1.ScriptCalls.ChangeQuantity.Name",info:"PF1.ScriptCalls.ChangeQuantity.Info"},{_id:"changeLevel",itemTypes:["buff","class"],name:"PF1.ScriptCalls.ChangeLevel.Name",info:"PF1.ScriptCalls.ChangeLevel.Info"}]}const Se=foundry.data.fields;class Condition extends RegistryEntry{static defineSchema(){return{...super.defineSchema(),texture:new Se.StringField({required:!0,initial:""}),track:new Se.StringField({required:!1,blank:!0,initial:"",choices:Conditions.TRACKS}),mechanics:new Se.SchemaField({changes:new Se.ArrayField(new Se.SchemaField({formula:new Se.StringField({required:!0}),target:new Se.StringField({required:!0}),type:new Se.StringField({required:!0}),operator:new Se.StringField({required:!1,initial:void 0}),priority:new Se.NumberField({required:!1,initial:void 0}),continuous:new Se.BooleanField({required:!1,initial:void 0})})),flags:new Se.ArrayField(new Se.StringField({}))},{required:!1,nullable:!0,initial:null}),journal:new Se.StringField({nullable:!0,blank:!1,required:!1}),showInDefense:new Se.BooleanField({required:!1,initial:!0}),showInAction:new Se.BooleanField({required:!1,initial:!0})}}}class Conditions extends Registry{static model=Condition;static TRACKS=["fear","lethargy"];static SET_TO_ZERO={formula:0,type:"untypedPerm",operator:"set",priority:1001,continuous:!0};static _defaultData=[{_id:"bleed",name:"PF1.Condition.bleed",texture:"systems/pf1/icons/conditions/bleed.png",journal:"Compendium.pf1.pf1e-rules.JournalEntry.NSqfXaj4MevUR2uJ.JournalEntryPage.L6DTocj1PbOtuspU",showInAction:!1,showInDefense:!1},{_id:"blind",name:"PF1.Condition.blind",texture:"systems/pf1/icons/conditions/blind.png",journal:"Compendium.pf1.pf1e-rules.JournalEntry.NSqfXaj4MevUR2uJ.JournalEntryPage.A9KUpd2bsdZZsQqj",mechanics:{changes:[{formula:-2,target:"ac",type:"untyped"}],flags:["loseDexToAC"]}},{_id:"confused",name:"PF1.Condition.confused",texture:"systems/pf1/icons/conditions/confused.png",journal:"Compendium.pf1.pf1e-rules.JournalEntry.NSqfXaj4MevUR2uJ.JournalEntryPage.J2yma0xciBKRUh9t",showInDefense:!1},{_id:"cowering",name:"PF1.Condition.cowering",texture:"systems/pf1/icons/conditions/screaming.png",journal:"Compendium.pf1.pf1e-rules.JournalEntry.NSqfXaj4MevUR2uJ.JournalEntryPage.eNW5geiJqrnAjjNu",mechanics:{changes:[{formula:-2,target:"ac",type:"untyped"}],flags:["loseDexToAC"]},showInAction:!1},{_id:"dazed",name:"PF1.Condition.dazed",texture:"systems/pf1/icons/conditions/dazed.png",journal:"Compendium.pf1.pf1e-rules.JournalEntry.NSqfXaj4MevUR2uJ.JournalEntryPage.2A6Gk60pLDKR2zT0",showInAction:!1},{_id:"dazzled",name:"PF1.Condition.dazzled",texture:"systems/pf1/icons/conditions/dazzled.png",journal:"Compendium.pf1.pf1e-rules.JournalEntry.NSqfXaj4MevUR2uJ.JournalEntryPage.xHUnCadQ2qYsfvV0",mechanics:{changes:[{formula:-1,target:"attack",type:"untyped"}]},showInDefense:!1,showInAction:!1},{_id:"deaf",name:"PF1.Condition.deaf",texture:"systems/pf1/icons/conditions/deaf.png",journal:"Compendium.pf1.pf1e-rules.JournalEntry.NSqfXaj4MevUR2uJ.JournalEntryPage.3uIamlB0L1UZUwoF",mechanics:{changes:[{formula:-4,target:"init",type:"untyped"}]}},{_id:"entangled",name:"PF1.Condition.entangled",texture:"systems/pf1/icons/conditions/entangled.png",journal:"Compendium.pf1.pf1e-rules.JournalEntry.NSqfXaj4MevUR2uJ.JournalEntryPage.oxmugd8SoxVjvRRl",mechanics:{changes:[{formula:-4,target:"dex",type:"untyped"},{formula:-2,target:"attack",type:"untyped"}]}},{_id:"exhausted",name:"PF1.Condition.exhausted",texture:"systems/pf1/icons/conditions/exhausted.png",journal:"Compendium.pf1.pf1e-rules.JournalEntry.NSqfXaj4MevUR2uJ.JournalEntryPage.ITxxh53qgl74wWcE",mechanics:{changes:[{formula:-6,target:"str",type:"untyped"},{formula:-6,target:"dex",type:"untyped"}]},track:"lethargy",showInDefense:!1},{_id:"fatigued",name:"PF1.Condition.fatigued",texture:"systems/pf1/icons/conditions/fatigued.png",journal:"Compendium.pf1.pf1e-rules.JournalEntry.NSqfXaj4MevUR2uJ.JournalEntryPage.AVaxTNildXRzYnQm",mechanics:{changes:[{formula:-2,target:"str",type:"untyped"},{formula:-2,target:"dex",type:"untyped"}]},track:"lethargy",showInDefense:!1},{_id:"frightened",name:"PF1.Condition.frightened",texture:"systems/pf1/icons/conditions/frightened.png",journal:"Compendium.pf1.pf1e-rules.JournalEntry.NSqfXaj4MevUR2uJ.JournalEntryPage.uqpJ7ZMnWF5qjOTl",mechanics:{changes:[{formula:-2,target:"attack",type:"untyped"},{formula:-2,target:"allSavingThrows",type:"untyped"},{formula:-2,target:"skills",type:"untyped"},{formula:-2,target:"allChecks",type:"untyped"}]},track:"fear",showInAction:!1},{_id:"grappled",name:"PF1.Condition.grappled",texture:"systems/pf1/icons/conditions/grappled.png",journal:"Compendium.pf1.pf1e-rules.JournalEntry.NSqfXaj4MevUR2uJ.JournalEntryPage.i4gHNAVajJWs4cFI",mechanics:{changes:[{formula:-4,target:"dex",type:"untyped"},{formula:-2,target:"attack",type:"untyped"}]}},{_id:"helpless",name:"PF1.Condition.helpless",texture:"systems/pf1/icons/conditions/helpless.png",journal:"Compendium.pf1.pf1e-rules.JournalEntry.NSqfXaj4MevUR2uJ.JournalEntryPage.6dtCytJsNkO8Hwq4",mechanics:{changes:[{...this.SET_TO_ZERO,target:"dex"}],flags:["loseDexToAC"]},showInAction:!1},{_id:"incorporeal",name:"PF1.Condition.incorporeal",texture:"systems/pf1/icons/conditions/incorporeal.png",journal:"Compendium.pf1.pf1e-rules.JournalEntry.NSqfXaj4MevUR2uJ.JournalEntryPage.acqGBiMxTbXZ47zU",mechanics:{changes:[{formula:0,target:"nac",type:"base",operator:"set",priority:-10},{formula:"max(1, @abilities.cha.mod)",operator:"add",target:"ac",type:"deflection"}]},showInAction:!1,showInDefense:!1},{_id:"invisible",name:"PF1.Condition.invisible",texture:"systems/pf1/icons/conditions/invisible.png",journal:"Compendium.pf1.pf1e-rules.JournalEntry.NSqfXaj4MevUR2uJ.JournalEntryPage.Wr2ZWUZcyVWQ4GtX",showInDefense:!1},{_id:"nauseated",name:"PF1.Condition.nauseated",texture:"systems/pf1/icons/conditions/nauseated.png",journal:"Compendium.pf1.pf1e-rules.JournalEntry.NSqfXaj4MevUR2uJ.JournalEntryPage.ySiyyK1BMAyKPY4I"},{_id:"panicked",name:"PF1.Condition.panicked",texture:"systems/pf1/icons/conditions/fear.png",journal:"Compendium.pf1.pf1e-rules.JournalEntry.NSqfXaj4MevUR2uJ.JournalEntryPage.nGTsTfpWcJTTU3rk",mechanics:{changes:[{formula:-2,target:"attack",type:"untyped"},{formula:-2,target:"allSavingThrows",type:"untyped"},{formula:-2,target:"skills",type:"untyped"},{formula:-2,target:"allChecks",type:"untyped"}]},track:"fear"},{_id:"paralyzed",name:"PF1.Condition.paralyzed",texture:"systems/pf1/icons/conditions/paralyzed.png",journal:"Compendium.pf1.pf1e-rules.JournalEntry.NSqfXaj4MevUR2uJ.JournalEntryPage.24p2Koq4FFCLDKnj",mechanics:{changes:[{...this.SET_TO_ZERO,target:"dex"},{...this.SET_TO_ZERO,target:"str"}],flags:["loseDexToAC"]},showInAction:!1},{_id:"pinned",name:"PF1.Condition.pinned",texture:"systems/pf1/icons/conditions/pinned.png",journal:"Compendium.pf1.pf1e-rules.JournalEntry.NSqfXaj4MevUR2uJ.JournalEntryPage.poCq8gXdDi5leaMT",mechanics:{changes:[{formula:"min(0, @abilities.dex.mod)",target:"dexMod",type:"untyped",operator:"set",priority:1001,continuous:!0},{formula:-4,target:"ac",type:"untyped"},{formula:-4,target:"cmd",type:"untyped"}],flags:["loseDexToAC"]},showInAction:!1},{_id:"prone",name:"PF1.Condition.prone",texture:"systems/pf1/icons/conditions/prone.png",journal:"Compendium.pf1.pf1e-rules.JournalEntry.NSqfXaj4MevUR2uJ.JournalEntryPage.VbagnIPQS523dwxa",mechanics:{changes:[{formula:-4,target:"mattack",type:"untyped"}]}},{_id:"shaken",name:"PF1.Condition.shaken",texture:"systems/pf1/icons/conditions/shaken.png",journal:"Compendium.pf1.pf1e-rules.JournalEntry.NSqfXaj4MevUR2uJ.JournalEntryPage.XxLUswkCuXnXmA5T",mechanics:{changes:[{formula:-2,target:"attack",type:"untyped"},{formula:-2,target:"allSavingThrows",type:"untyped"},{formula:-2,target:"skills",type:"untyped"},{formula:-2,target:"allChecks",type:"untyped"}]},track:"fear",showInAction:!1,showInDefense:!1},{_id:"sickened",name:"PF1.Condition.sickened",texture:"systems/pf1/icons/conditions/sickened.png",journal:"Compendium.pf1.pf1e-rules.JournalEntry.NSqfXaj4MevUR2uJ.JournalEntryPage.7LwCMwrX3tchvrjW",mechanics:{changes:[{formula:-2,target:"attack",type:"untyped"},{formula:-2,target:"wdamage",type:"untyped"},{formula:-2,target:"allSavingThrows",type:"untyped"},{formula:-2,target:"skills",type:"untyped"},{formula:-2,target:"allChecks",type:"untyped"}]},showInAction:!1,showInDefense:!1},{_id:"sleep",name:"PF1.Condition.sleep",texture:"systems/pf1/icons/conditions/sleep.png",journal:null,mechanics:{changes:[{...this.SET_TO_ZERO,target:"dex"}],flags:["loseDexToAC"]},showInAction:!1},{_id:"staggered",name:"PF1.Condition.staggered",texture:"systems/pf1/icons/conditions/staggered.png",journal:"Compendium.pf1.pf1e-rules.JournalEntry.NSqfXaj4MevUR2uJ.JournalEntryPage.TTp8q9Vb2PNAujWu"},{_id:"stunned",name:"PF1.Condition.stunned",texture:"systems/pf1/icons/conditions/stunned.png",journal:"Compendium.pf1.pf1e-rules.JournalEntry.NSqfXaj4MevUR2uJ.JournalEntryPage.ZgsBPY0uVCVl6SGh",mechanics:{changes:[{formula:-2,target:"ac",type:"untyped"}],flags:["loseDexToAC"]},showInAction:!1},{_id:"squeezing",name:"PF1.Condition.squeezing",texture:"systems/pf1/icons/conditions/squeezing.png",journal:"Compendium.pf1.pf1e-rules.JournalEntry.NSqfXaj4MevUR2uJ.JournalEntryPage.jzeZ0Uf31CAMZra9",mechanics:{changes:[{formula:-4,target:"ac",type:"untyped"},{formula:-4,target:"attack",type:"untyped"}]}}];conditionsInTrack(e){return this.contents.filter((t=>t.track===e)).map((e=>e.id))}trackedConditions(){return this.tracks.map((e=>this.conditionsInTrack(e)))}get tracks(){return this.constructor.TRACKS}}class URLField extends foundry.data.fields.StringField{_validateType(e){if(super._validateType(e),!/^https?:\/\/[\w\d.]+\.\w+/.test(e))throw Error("Must be a valid URL")}}class DateField extends foundry.data.fields.StringField{_validateType(e){if(super._validateType(e),e&&Number.isNaN(Date.parse(e)))throw Error("Must be valid date in YYYY-MM-DD format.")}}class Source extends RegistryEntry{static defineSchema(){const e=foundry.data.fields,optionalString=(t={})=>new e.StringField({required:!1,nullable:!0,blank:!0,initial:void 0,...t});return{...super.defineSchema(),name:new e.StringField({nullable:!1,blank:!1,required:!0}),abbr:new e.StringField({nullable:!1,blank:!1,required:!1,initial:void 0}),date:new DateField({required:!1,nullable:!0,blank:!1,initial:void 0}),pages:new e.NumberField({required:!1,integer:!0,min:1,initial:void 0,label:"Page count"}),isbn:optionalString(),publisher:new e.StringField({required:!1,blank:!1,nullable:!1,initial:"Paizo"}),level:new e.NumberField({required:!1,min:1,integer:!0,initial:void 0,label:"Starting level"}),tieIn:optionalString(),url:new URLField({required:!1,nullable:!0,blank:!0,initial:void 0}),legacy:new e.BooleanField({required:!1,initial:!1,label:"D&D 3.5 Material"}),type:optionalString({choices:()=>this.TYPES})}}static TYPES=["core","setting","ap","module","companion","pg","comic","pfs"]}class Sources extends Registry{static model=Source;static PREFIXES={companion:"PPC"};static _defaultData=[{_id:"PZO1110",name:"Core Rulebook",abbr:"CRB",date:"2009-08-13",pages:576,isbn:"978-1-60125-150-3",url:"http://paizo.com/products/btpy88yj",type:"core"},{_id:"PZO1114",name:"GameMastery Guide",abbr:"GMG",date:"2010-06-23",pages:320,isbn:"978-1-60125-217-3",url:"http://paizo.com/products/btpy8ffn",type:"core"},{_id:"PZO1112",name:"Bestiary [1]",date:"2009-10-21",pages:320,isbn:"978-1-60125-183-1",url:"http://paizo.com/products/btpy8auu",type:"core"},{_id:"PZO1116",name:"Bestiary 2",date:"2010-12-29",pages:320,isbn:"978-1-60125-268-5",url:"http://paizo.com/products/btpy8hif",type:"core"},{_id:"PZO1120",name:"Bestiary 3",date:"2011-12-21",pages:320,isbn:"978-1-60125-378-1",url:"http://paizo.com/products/btpy8odu",type:"core"},{_id:"PZO1127",name:"Bestiary 4",date:"2013-10-30",pages:320,isbn:"978-1-60125-575-4",url:"http://paizo.com/products/btpy91ds",type:"core"},{_id:"PZO1133",name:"Bestiary 5",date:"2015-11-18",pages:320,isbn:"978-1-60125-792-5",url:"http://paizo.com/products/btpy9g9x",type:"core"},{_id:"PZO1137",name:"Bestiary 6",date:"2017-04-26",pages:320,isbn:"978-1-60125-931-8",url:"http://paizo.com/products/btpy9r1y",type:"core"},{_id:"PZO1129",name:"Advanced Class Guide",abbr:"ACG",date:"2015-08-14",pages:256,isbn:"978-1-60125-671-3",url:"http://paizo.com/products/btpy978v",type:"core"},{_id:"PZO1115",name:"Advanced Player's Guide",abbr:"APG",date:"2010-08-05",pages:320,isbn:"978-1-60125-246-3",url:"http://paizo.com/products/btpy8fo1",type:"core"},{_id:"PZO1121",name:"Advanced Race Guide",abbr:"ARG",date:"2012-06-20",pages:256,isbn:"978-1-60125-390-3",url:"http://paizo.com/products/btpy8rv2",type:"core"},{_id:"PZO1138",name:"Adventurer's Guide",date:"2017-05-24",pages:192,isbn:"978-1-60125-938-7",url:"http://paizo.com/products/btpy9sjo",type:"core"},{_id:"PZO1128",name:"Strategy Guide",date:"2015-03-25",pages:160,isbn:"978-1-60125-626-3",url:"http://paizo.com/products/btpy99sk",type:"core"},{_id:"PZO1132",name:"Occult Adventures",abbr:"OA",date:"2015-07-29",pages:272,isbn:"978-1-60125-762-8",url:"http://paizo.com/products/btpy9egu",type:"core"},{_id:"PZO1131",name:"Pathfinder Unchained",date:"2015-04-29",pages:256,isbn:"978-1-60125-715-4",url:"http://paizo.com/products/btpy9c25",type:"core"},{_id:"PZO1136",name:"Villain Codex",date:"2016-11-16",pages:256,isbn:"978-1-60125-906-6",url:"http://paizo.com/products/btpy9oo7",type:"core"},{_id:"PZO1130",name:"Monster Codex",abbr:"MC",date:"2014-10-22",pages:256,isbn:"978-1-60125-686-7",url:"http://paizo.com/products/btpy9926",type:"core"},{_id:"PZO1135",name:"Horror Adventures",date:"2016-08-04",pages:256,isbn:"978-1-60125-849-6",url:"http://paizo.com/products/btpy9n5a",type:"core"},{_id:"PZO1126",name:"Mythic Adventures",date:"2013-08-14",pages:256,isbn:"978-1-60125-549-5",url:"http://paizo.com/products/btpy8ywe",type:"core"},{_id:"PZO1124",name:"NPC Codex",date:"2012-11-21",pages:320,isbn:"978-1-60125-467-2",url:"http://paizo.com/products/btpy8v3a",type:"core"},{_id:"PZO1125",name:"Ultimate Campaign",date:"2013-05-29",pages:256,isbn:"978-1-60125-498-6",url:"http://paizo.com/products/btpy8x64",type:"core"},{_id:"PZO1118",name:"Ultimate Combat",abbr:"UC",date:"2011-08-04",pages:256,isbn:"978-1-60125-359-0",url:"http://paizo.com/products/btpy8mcz",type:"core"},{_id:"PZO1123",name:"Ultimate Equipment",abbr:"UE",date:"2012-08-16",pages:400,isbn:"978-1-60125-449-8",url:"http://paizo.com/products/btpy8tmc",type:"core"},{_id:"PZO1134",name:"Ultimate Intrigue",abbr:"UI",date:"2016-03-30",pages:256,isbn:"978-1-60125-826-7",url:"http://paizo.com/products/btpy9j6p",type:"core"},{_id:"PZO1117",name:"Ultimate Magic",abbr:"UM",date:"2011-05-08",pages:256,isbn:"978-1-60125-299-9",url:"http://paizo.com/products/btpy8k8r",type:"core"},{_id:"PZO1139",name:"Book of the Damned",date:"2017-09-27",pages:258,isbn:"978-1-60125-986-8",url:"https://paizo.com/products/btpy9tok",type:"core"},{_id:"PZO1140",name:"Ultimate Wilderness",abbr:"UW",date:"2017-11-15",pages:288,isbn:"978-1-60125-986-8",url:"https://paizo.com/products/btpy9ujo",type:"core"},{_id:"PZO1141",name:"Planar Adventures",abbr:"PA",date:"2018-06-27",pages:192,isbn:"978-1-64078-044-6",url:"https://paizo.com/products/btpya1am",type:"core"},{_id:"PZO1002-PGE",name:"Rise of the Runelords Player's Guide",date:"2007-09-01",pages:16,isbn:"978-1-60125-059-9",legacy:!0,url:"https://paizo.com/products/btpy8bd9",type:"pg"},{_id:"PZO9001",name:"Rise of the Runelords #1: Burnt Offerings",abbr:"RotR-1",date:"2007-08-01",pages:96,isbn:"978-1-60125-035-3",url:"https://paizo.com/products/btpy7zkr",type:"ap"},{_id:"PZO9002",name:"Rise of the Runelords #2: The Skinsaw Murders",abbr:"RotR-2",date:"2007-09-01",pages:96,isbn:"978-1-60125-037-7",url:"https://paizo.com/products/btpy8029",type:"ap"},{_id:"PZO9003",name:"Rise of the Runelords #3: The Hook Mountain Massacre",abbr:"RotR-3",date:"2007-10-01",pages:96,isbn:"978-1-60125-038-4",url:"https://paizo.com/products/btpy80e8",type:"ap"},{_id:"PZO9004",name:"Rise of the Runelords #4: Fortress of the Stone Giants",abbr:"RotR-4",date:"2007-11-01",pages:96,isbn:"978-1-60125-039-1",url:"https://paizo.com/products/btpy80hm",type:"ap"},{_id:"PZO9005",name:"Rise of the Runelords #5: Sins of the Saviors",abbr:"RotR-5",date:"2007-12-01",pages:96,isbn:"978-1-60125-040-7",url:"https://paizo.com/products/btpy815p",type:"ap"},{_id:"PZO9006",name:"Rise of the Runelords #6: Spires of Xin-Shalast",abbr:"RotR-6",date:"2008-01-01",pages:96,isbn:"978-1-60125-041-4",url:"https://paizo.com/products/btpy817c",type:"ap"},{_id:"PZO9000-2S",name:"Curse of the Crimson Throne Player's Guide",date:"2008-02-01",pages:16,url:"https://paizo.com/products/btpy806v",type:"pg"},{_id:"PZO1021",name:"Curse of the Crimson Throne",date:"2016-10-01",pages:480,isbn:"978-1-60125-890-8",url:"http://paizo.com/products/btpy9nme",type:"ap"},{_id:"PZO9007",name:"Curse of the Crimson Throne #1: Edge of Anarchy",abbr:"CotCT-1",date:"2008-02-01",pages:96,isbn:"978-1-60125-088-9",url:"https://paizo.com/products/btpy81xw",type:"ap"},{_id:"PZO9008",name:"Curse of the Crimson Throne #2: Seven Days to the Grave",abbr:"CotCT-2",date:"2008-03-01",pages:96,isbn:"978-1-60125-091-9",url:"https://paizo.com/products/btpy82qy",type:"ap"},{_id:"PZO9009",name:"Curse of the Crimson Throne #3: Escape From Old Korvosa",abbr:"CotCT-3",date:"2008-04-01",pages:96,isbn:"978-1-60125-092-6",url:"https://paizo.com/products/btpy82t5",type:"ap"},{_id:"PZO9010",name:"Curse of the Crimson Throne #4: A History of Ashes",abbr:"CotCT-4",date:"2008-05-01",pages:96,isbn:"978-1-60125-093-3",url:"https://paizo.com/products/btpy82u9",type:"ap"},{_id:"PZO9011",name:"Curse of the Crimson Throne #5: Skeletons of Scarwall",abbr:"CotCT-5",date:"2008-06-01",pages:96,isbn:"978-1-60125-099-5",url:"https://paizo.com/products/btpy83yw",type:"ap"},{_id:"PZO9012",name:"Curse of the Crimson Throne #6: Crown of Fangs",abbr:"CotCT-6",date:"2008-07-01",pages:96,isbn:"978-1-60125-109-1",url:"https://paizo.com/products/btpy84el",type:"ap"},{_id:"PZO9401",name:"Second Darkness Player's Guide",date:"2008-08-01",pages:32,isbn:"978-1-60125-142-8",legacy:!0,url:"https://paizo.com/products/btpy84en",type:"pg"},{_id:"PZO9013",name:"Second Darkness #1: Shadow in the Sky",date:"2008-08-01",pages:96,isbn:"978-1-60125-115-2",url:"https://paizo.com/products/btpy84em",type:"ap"},{_id:"PZO9014",name:"Second Darkness #2: Children of the Void",date:"2008-09-01",pages:96,isbn:"978-1-60125-127-5",url:"https://paizo.com/products/btpy85ed",type:"ap"},{_id:"PZO9015",name:"Second Darkness #3: The Armageddon Echo",date:"2008-10-01",pages:96,isbn:"978-1-60125-128-2",url:"https://paizo.com/products/btpy85ep",type:"ap"},{_id:"PZO9016",name:"Second Darkness #4: Endless Night",date:"2008-11-01",pages:96,isbn:"978-1-60125-129-9",url:"https://paizo.com/products/btpy85er",type:"ap"},{_id:"PZO9017",name:"Second Darkness #5: A Memory of Darkness",date:"2008-12-01",pages:96,isbn:"978-1-60125-130-5",url:"https://paizo.com/products/btpy86j6",type:"ap"},{_id:"PZO9018",name:"Second Darkness #6: Descent into Midnight",date:"2009-01-01",pages:96,isbn:"978-1-60125-131-2",url:"https://paizo.com/products/btpy86v1",type:"ap"},{_id:"PZO9404",name:"Legacy of Fire Player's Guide",date:"2009-03-01",pages:32,isbn:"978-1-60125-168-8",tieIn:"Legacy of Fire",legacy:!0,url:"https://paizo.com/products/btpy8737",type:"pg"},{_id:"PZO9019",name:"Legacy of Fire #1: Howl of the Carrion King",abbr:"LoF-1",date:"2009-03-01",pages:96,isbn:"978-1-60125-159-6",url:"https://paizo.com/products/btpy8735",type:"ap"},{_id:"PZO9020",name:"Legacy of Fire #2: House of the Beast",abbr:"LoF-2",date:"2009-03-01",pages:96,isbn:"978-1-60125-160-2",url:"https://paizo.com/products/btpy86xw",type:"ap"},{_id:"PZO9021",name:"Legacy of Fire #3: The Jackal's Price",abbr:"LoF-3",date:"2009-04-01",pages:96,isbn:"978-1-60125-161-9",url:"https://paizo.com/products/btpy87uv",type:"ap"},{_id:"PZO9022",name:"Legacy of Fire #4: The End of Eternity",abbr:"LoF-4",date:"2009-05-01",pages:96,isbn:"978-1-60125-173-2",url:"https://paizo.com/products/btpy87ux",type:"ap"},{_id:"PZO9023",name:"Legacy of Fire #5: The Impossible Eye",abbr:"LoF-5",date:"2009-06-01",pages:96,isbn:"978-1-60125-179-4",url:"https://paizo.com/products/btpy88tp",type:"ap"},{_id:"PZO9024",name:"Legacy of Fire #6: The Final Wish",abbr:"LoF-6",date:"2009-07-01",pages:96,isbn:"978-1-60125-185-5",url:"https://paizo.com/products/btpy89a2",type:"ap"},{_id:"PZO9000-5E",name:"Council of Thieves Player's Guide",date:"2009-08-01",pages:13,url:"https://paizo.com/products/btpy89m7",type:"pg"},{_id:"PZO9025",name:"Council of Thieves #1: The Bastards of Erebus",abbr:"CoT-1",date:"2009-08-01",pages:96,isbn:"978-1-60125-190-9",url:"https://paizo.com/products/btpy89a4",type:"ap"},{_id:"PZO9026",name:"Council of Thieves #2: The Sixfold Trial",abbr:"CoT-2",date:"2009-09-01",pages:96,isbn:"978-1-60125-196-1",url:"https://paizo.com/products/btpy89vw",type:"ap"},{_id:"PZO9027",name:"Council of Thieves #3: What Lies in Dust",abbr:"CoT-3",date:"2009-11-01",pages:96,isbn:"978-1-60125-197-8",url:"https://paizo.com/products/btpy8b8h",type:"ap"},{_id:"PZO9028",name:"Council of Thieves #4: The Infernal Syndrom",abbr:"CoT-4",date:"2009-12-01",pages:96,isbn:"978-1-60125-198-5",url:"https://paizo.com/products/btpy8b9h",type:"ap"},{_id:"PZO9029",name:"Council of Thieves #5: Mother of Flies",abbr:"CoT-5",date:"2010-01-01",pages:96,isbn:"978-1-60125-199-2",url:"https://paizo.com/products/btpy8bc1",type:"ap"},{_id:"PZO9030",name:"Council of Thieves #6: The Twice-Damned Prince",abbr:"CoT-6",date:"2010-01-01",pages:96,isbn:"978-1-60125-226-5",url:"https://paizo.com/products/btpy8d54",type:"ap"},{_id:"PZO9000-6E",name:"Kingmaker Player's Guide",date:"2010-03-01",pages:16,url:"https://paizo.com/products/btpy8dqh",type:"pg"},{_id:"PZO9031",name:"Kingmaker #1: Stolen Land",date:"2010-03-01",pages:96,isbn:"978-1-60125-229-6",url:"https://paizo.com/products/btpy8dhc",type:"ap"},{_id:"PZO9032",name:"Kingmaker #2: Rivers Run Red",date:"2010-04-01",pages:96,isbn:"978-1-60125-233-3",url:"https://paizo.com/products/btpy8dml",type:"ap"},{_id:"PZO9033",name:"Kingmaker #3: The Varnhold Vanishing",date:"2010-05-01",pages:96,isbn:"978-1-60125-234-0",url:"https://paizo.com/products/btpy8e7e",type:"ap"},{_id:"PZO9034",name:"Kingmaker #4: Blood for Blood",date:"2010-06-01",pages:96,isbn:"978-1-60125-251-7",url:"https://paizo.com/products/btpy8b7w",type:"ap"},{_id:"PZO9035",name:"Kingmaker #5: War of the River Kings",date:"2010-07-01",pages:96,isbn:"978-1-60125-252-4",url:"https://paizo.com/products/btpy8b7u",type:"ap"},{_id:"PZO9036",name:"Kingmaker #6: Sound of a Thousand Screams",date:"2010-07-01",pages:96,isbn:"978-1-60125-253-1",url:"https://paizo.com/products/btpy8b7x",type:"ap"},{_id:"PZO9000-7E",name:"Serpent's Skull Player's Guide",date:"2010-07-01",pages:13,url:"https://paizo.com/products/btpy8g6d",type:"pg"},{_id:"PZO9037",name:"Serpent's Skull #1: Soul for Smuggler's Shiv",date:"2010-08-01",pages:96,isbn:"978-1-60125-254-8",url:"https://paizo.com/products/btpy8b7v",type:"ap"},{_id:"PZO9038",name:"Serpent's Skull #2: Racing to Ruin",date:"2010-09-01",pages:96,isbn:"978-1-60125-273-9",url:"https://paizo.com/products/btpy8ddc",type:"ap"},{_id:"PZO9039",name:"Serpent's Skull #3: City of Seven Spears",date:"2010-11-01",pages:96,isbn:"978-1-60125-274-6",url:"https://paizo.com/products/btpy8h6h",type:"ap"},{_id:"PZO9040",name:"Serpent's Skull #4: Vaults of Madness",date:"2010-12-01",pages:96,isbn:"978-1-60125-275-3",url:"https://paizo.com/products/btpy8dde",type:"ap"},{_id:"PZO9041",name:"Serpent's Skull #5: The Thousand Fangs Below",date:"2011-01-01",pages:96,isbn:"978-1-60125-276-0",url:"https://paizo.com/products/btpy8ddf",type:"ap"},{_id:"PZO9042",name:"Serpent's Skull #6: Sanctum of the Serpent God",date:"2011-02-01",pages:96,isbn:"978-1-60125-307-1",url:"https://paizo.com/products/btpy8g3i",type:"ap"},{_id:"PZO9000-8E",name:"Carrion Crown Player's Guide",date:"2011-03-01",pages:15,url:"https://paizo.com/products/btpy8j0q",type:"pg"},{_id:"PZO9043",name:"Carrion Crown #1: The Haunting of Harrowstone",abbr:"CC-1",date:"2011-03-01",pages:96,isbn:"978-1-60125-308-8",url:"https://paizo.com/products/btpy8g7a",type:"ap"},{_id:"PZO9044",name:"Carrion Crown #2: Trial of the Beast",abbr:"CC-2",date:"2011-04-01",pages:96,isbn:"978-1-60125-309-5",url:"https://paizo.com/products/btpy8g7b",type:"ap"},{_id:"PZO9045",name:"Carrion Crown #3: Broken Moon",abbr:"CC-3",date:"2011-05-01",pages:96,isbn:"978-1-60125-310-1",url:"https://paizo.com/products/btpy8g7c",type:"ap"},{_id:"PZO9046",name:"Carrion Crown #4: Wake of the Watcher",abbr:"CC-4",date:"2011-06-01",pages:96,isbn:"978-1-60125-311-8",url:"https://paizo.com/products/btpy8g7d",type:"ap"},{_id:"PZO9047",name:"Carrion Crown #5: Ashes at Dawn",abbr:"CC-5",date:"2011-07-01",pages:96,isbn:"978-1-60125-312-5",url:"https://paizo.com/products/btpy8g7e",type:"ap"},{_id:"PZO9048",name:"Carrion Crown #6: Shadows of Gallowspire",abbr:"CC-6",date:"2011-07-01",pages:96,isbn:"978-1-60125-313-2",url:"https://paizo.com/products/btpy8g7t",type:"ap"},{_id:"PZO9000-9E",name:"Jade Regent Player's Guide",date:"2011-07-27",pages:28,url:"https://paizo.com/products/btpy8mh3",type:"pg"},{_id:"PZO9049",name:"Jade Regent #1: The Brinewall Legacy",date:"2011-08-01",pages:96,isbn:"978-1-60125-361-3",url:"https://paizo.com/products/btpy8j35",type:"ap"},{_id:"PZO9050",name:"Jade Regent #2: Night of Frozen Shadows",date:"2011-09-01",pages:96,isbn:"978-1-60125-366-8",url:"https://paizo.com/products/btpy8jrr",type:"ap"},{_id:"PZO9051",name:"Jade Regent #3: The Hungry Storm",date:"2011-10-01",pages:96,isbn:"978-1-60125-374-3",url:"https://paizo.com/products/btpy8kgv",type:"ap"},{_id:"PZO9052",name:"Jade Regent #4: Forest of Spirits",date:"2011-11-01",pages:96,isbn:"978-1-60125-380-4",url:"https://paizo.com/products/btpy8l2h",type:"ap"},{_id:"PZO9053",name:"Jade Regent #5: Tide of Honor",date:"2012-01-01",pages:96,isbn:"978-1-60125-385-9",url:"https://paizo.com/products/btpy8mh0",type:"ap"},{_id:"PZO9054",name:"Jade Regent #6: The Empty Throne",date:"2012-02-01",pages:96,isbn:"978-1-60125-400-9",url:"https://paizo.com/products/btpy8mh1",type:"ap"},{_id:"PZO9000-10E",name:"Skull and Shackles Player's Guide",date:"2012-02-01",pages:30,url:"https://paizo.com/products/btpy8rwc",type:"pg"},{_id:"PZO9055",name:"Skull & Shackles #1: The Wormwood Mutiny",date:"2012-02-01",pages:96,isbn:"978-1-60125-404-7",url:"https://paizo.com/products/btpy8mh2",type:"ap"},{_id:"PZO9056",name:"Skull & Shackles #2: Raiders of the Fever Sea",date:"2012-03-01",pages:96,isbn:"978-1-60125-409-2",url:"https://paizo.com/products/btpy8moe",type:"ap"},{_id:"PZO9057",name:"Skull & Shackles #3: Tempest Rising",date:"2012-04-01",pages:96,isbn:"978-1-60125-413-9",url:"https://paizo.com/products/btpy8mof",type:"ap"},{_id:"PZO9058",name:"Skull & Shackles #4: Island of Empty Eyes",date:"2012-05-01",pages:96,isbn:"978-1-60125-416-0",url:"https://paizo.com/products/btpy8mog",type:"ap"},{_id:"PZO9059",name:"Skull & Shackles #5: The Price of Infamy",date:"2012-06-01",pages:96,isbn:"978-1-60125-421-4",url:"https://paizo.com/products/btpy8moh",type:"ap"},{_id:"PZO9060",name:"Skull & Shackles #6: From Hell's Heart",date:"2012-07-01",pages:96,isbn:"978-1-60125-422-1",url:"https://paizo.com/products/btpy8moi",type:"ap"},{_id:"PZO1002-PGE",name:"Rise of the Runelords Anniversary Edition Player's Guide",date:"2012-07-01",pages:17,url:"https://paizo.com/products/btpy8tgl",type:"pg"},{_id:"PZO1002",name:"Rise of the Runelords Anniversary Edition",abbr:"RotRAE",date:"2012-07-01",pages:432,isbn:"978-1-60125-436-8",url:"http://paizo.com/products/btpy8tc0",type:"ap"},{_id:"PZO9000-11E",name:"Shattered Star Player's Guide",date:"2012-08-01",pages:12,url:"https://paizo.com/products/btpy8txj",type:"pg"},{_id:"PZO9061",name:"Shattered Star #1: Shards of Sin",date:"2012-08-01",pages:96,isbn:"978-1-60125-452-8",url:"https://paizo.com/products/btpy8tmh",type:"ap"},{_id:"PZO9062",name:"Shattered Star #2: Curse of the Lady's Light",date:"2012-09-01",pages:96,isbn:"978-1-60125-459-7",url:"https://paizo.com/products/btpy8run",type:"ap"},{_id:"PZO9063",name:"Shattered Star #3: The Asylum Stone",date:"2012-10-01",pages:96,isbn:"978-1-60125-469-6",url:"https://paizo.com/products/btpy8sds",type:"ap"},{_id:"PZO9064",name:"Shattered Star #4: Beyond the Doomsday Door",date:"2012-11-01",pages:96,isbn:"978-1-60125-474-0",url:"https://paizo.com/products/btpy8t35",type:"ap"},{_id:"PZO9065",name:"Shattered Star #5: Into the Nightmare Rift",date:"2012-12-01",pages:96,isbn:"978-1-60125-487-0",url:"https://paizo.com/products/btpy8tdh",type:"ap"},{_id:"PZO9066",name:"Shattered Star #6: The Dead Heart of Xin",date:"2013-01-01",pages:96,isbn:"978-1-60125-491-7",url:"https://paizo.com/products/btpy8tvr",type:"ap"},{_id:"PZO9000-12E",name:"Reign of Winter Player's Guide",date:"2013-02-01",pages:14,url:"https://paizo.com/products/btpy8x1t",type:"pg"},{_id:"PZO9067",name:"Reign of Winter #1: The Snows of Summer",date:"2013-02-01",pages:96,isbn:"978-1-60125-492-4",url:"https://paizo.com/products/btpy8ubg",type:"ap"},{_id:"PZO9068",name:"Reign of Winter #2: The Shackled Hut",date:"2013-03-01",pages:96,isbn:"978-1-60125-493-1",url:"https://paizo.com/products/btpy8uwz",type:"ap"},{_id:"PZO9069",name:"Reign of Winter #3: Maiden, Mother, Crone",date:"2013-04-01",pages:96,isbn:"978-1-60125-494-8",url:"https://paizo.com/products/btpy8xbz",type:"ap"},{_id:"PZO9070",name:"Reign of Winter #4: The Frozen Stars",date:"2013-05-01",pages:96,isbn:"978-1-60125-495-5",url:"https://paizo.com/products/btpy8vss",type:"ap"},{_id:"PZO9071",name:"Reign of Winter #5: Rasputin Must Die!",date:"2013-06-01",pages:96,isbn:"978-1-60125-496-2",url:"https://paizo.com/products/btpy8wbv",type:"ap"},{_id:"PZO9072",name:"Reign of Winter #6: The Witch Queen's Revenge",date:"2013-07-01",pages:96,isbn:"978-1-60125-497-9",url:"https://paizo.com/products/btpy8wve",type:"ap"},{_id:"PZO9000-13E",name:"Wrath of the Righteous Player's Guide",date:"2013-08-09",pages:14,url:"https://paizo.com/products/btpy919c",type:"pg"},{_id:"PZO9073",name:"Wrath of the Righteous #1: The Worldwound Incursion",date:"2013-08-01",pages:96,isbn:"978-1-60125-553-2",url:"https://paizo.com/products/btpy8x8e",type:"ap"},{_id:"PZO9074",name:"Wrath of the Righteous #2: Sword of Valor",date:"2013-09-01",pages:96,isbn:"978-1-60125-568-6",url:"https://paizo.com/products/btpy8xsi",type:"ap"},{_id:"PZO9075",name:"Wrath of the Righteous #3: Demon's Heresy",date:"2013-10-01",pages:96,isbn:"978-1-60125-577-8",url:"https://paizo.com/products/btpy8yor",type:"ap"},{_id:"PZO9076",name:"Wrath of the Righteous #4: The Midnight Isles",date:"2013-12-01",pages:96,isbn:"978-1-60125-585-3",url:"https://paizo.com/products/btpy8z6x",type:"ap"},{_id:"PZO9077",name:"Wrath of the Righteous #5: Herald of the Ivory Labyrinth",date:"2014-01-01",pages:96,isbn:"978-1-60125-586-0",url:"https://paizo.com/products/btpy909v",type:"ap"},{_id:"PZO9078",name:"Wrath of the Righteous #6: City of Locusts",date:"2014-02-01",pages:96,isbn:"978-1-60125-587-7",url:"https://paizo.com/products/btpy921g",type:"ap"},{_id:"PZO9000-14E",name:"Mummy's Mask Player's Guide",date:"2014-03-01",pages:14,url:"https://paizo.com/products/btpy94z3",type:"pg"},{_id:"PZO9079",name:"Mummy's Mask #1: The Half-Dead City",date:"2014-03-01",pages:96,isbn:"978-1-60125-588-4",url:"https://paizo.com/products/btpy94qz",type:"ap"},{_id:"PZO9080",name:"Mummy's Mask #2: Empty Graves",date:"2014-04-01",pages:96,isbn:"978-1-60125-589-1",url:"https://paizo.com/products/btpy94vv",type:"ap"},{_id:"PZO9081",name:"Mummy's Mask #3: Shifting Sands",date:"2014-05-01",pages:96,isbn:"978-1-60125-590-7",url:"https://paizo.com/products/btpy94qb",type:"ap"},{_id:"PZO9082",name:"Mummy's Mask #4: Secrets of the Sphinx",date:"2014-06-01",pages:96,isbn:"978-1-60125-591-4",url:"https://paizo.com/products/btpy9386",type:"ap"},{_id:"PZO9083",name:"Mummy's Mask #5: The Slave Trenches of Hakotep",date:"2014-07-01",pages:96,isbn:"978-1-60125-592-1",url:"https://paizo.com/products/btpy97at",type:"ap"},{_id:"PZO9084",name:"Mummy's Mask #6: Pyramid of the Sky Pharaoh",date:"2014-07-01",pages:96,isbn:"978-1-60125-593-8",url:"https://paizo.com/products/btpy97av",type:"ap"},{_id:"PZO9000-15E",name:"Iron Gods Player's Guide",date:"2014-08-05",pages:12,url:"https://paizo.com/products/btpy98lf",type:"pg"},{_id:"PZO9085",name:"Iron Gods #1: Fires of Creation",date:"2014-08-01",pages:96,isbn:"978-1-60125-673-7",url:"https://paizo.com/products/btpy95br",type:"ap"},{_id:"PZO9086",name:"Iron Gods #2: Lords of Rust",date:"2014-09-01",pages:96,isbn:"978-1-60125-678-2",url:"https://paizo.com/products/btpy95bs",type:"ap"},{_id:"PZO9087",name:"Iron Gods #3: The Choking Tower",date:"2014-10-01",pages:96,isbn:"978-1-60125-688-1",url:"https://paizo.com/products/btpy95bt",type:"ap"},{_id:"PZO9088",name:"Iron Gods #4: Valley of the Brain Collectors",date:"2014-11-01",pages:96,isbn:"978-1-60125-704-8",url:"https://paizo.com/products/btpy95bu",type:"ap"},{_id:"PZO9089",name:"Iron Gods #5: Palace of Fallen Stars",date:"2014-12-01",pages:96,isbn:"978-1-60125-711-6",url:"https://paizo.com/products/btpy95bv",type:"ap"},{_id:"PZO9090",name:"Iron Gods #6: The Divinity Drive",date:"2015-01-01",pages:96,isbn:"978-1-60125-724-6",url:"https://paizo.com/products/btpy95bw",type:"ap"},{_id:"PZO9000-16E",name:"Giantslayer Player's Guide",date:"2015-01-25",pages:16,url:"https://paizo.com/products/btpy9bsv",type:"pg"},{_id:"PZO9091",name:"Giantslayer #1: Battle of Bloodmarch Hill",date:"2015-02-01",pages:96,isbn:"978-1-60125-725-3",url:"https://paizo.com/products/btpy96ps",type:"ap"},{_id:"PZO9092",name:"Giantslayer #2: The Hill Giant's Pledge",date:"2015-04-01",pages:96,isbn:"978-1-60125-726-0",url:"https://paizo.com/products/btpy98t4",type:"ap"},{_id:"PZO9093",name:"Giantslayer #3: Forge of the Giant God",date:"2015-05-01",pages:96,isbn:"978-1-60125-727-7",url:"https://paizo.com/products/btpy98t5",type:"ap"},{_id:"PZO9094",name:"Giantslayer #4: Ice Tomb of the Giant Queen",date:"2015-06-01",pages:96,isbn:"978-1-60125-728-4",url:"https://paizo.com/products/btpy98t6",type:"ap"},{_id:"PZO9095",name:"Giantslayer #5: Anvil of Fire",date:"2015-06-01",pages:96,isbn:"978-1-60125-729-1",url:"https://paizo.com/products/btpy98t7",type:"ap"},{_id:"PZO9096",name:"Giantslayer #6: Shadow of the Storm Tyrant",date:"2015-07-01",pages:96,isbn:"978-1-60125-730-7",url:"https://paizo.com/products/btpy98t8",type:"ap"},{_id:"PZO9000-17E",name:"Hell's Rebels Player's Guide",date:"2015-08-12",pages:34,url:"https://paizo.com/products/btpy9g44",type:"pg"},{_id:"PZO9097",name:"Hell's Rebels #1: In Hell's Bright Shadow",date:"2015-09-01",pages:96,isbn:"978-1-60125-768-0",url:"https://paizo.com/products/btpy98t9",type:"ap"},{_id:"PZO9098",name:"Hell's Rebels #2: Turn of the Torrent",date:"2015-09-01",pages:96,isbn:"978-1-60125-784-0",url:"https://paizo.com/products/btpy98ta",type:"ap"},{_id:"PZO9099",name:"Hell's Rebels #3: Dance of the Damned",date:"2015-10-01",pages:96,isbn:"978-1-60125-788-8",url:"https://paizo.com/products/btpy98tb",type:"ap"},{_id:"PZO90100",name:"Hell's Rebels #4: A Song of Silver",date:"2015-12-01",pages:128,isbn:"978-1-60125-795-6",url:"https://paizo.com/products/btpy98tf",type:"ap"},{_id:"PZO90101",name:"Hell's Rebels #5: The Kintargo Contract",date:"2016-01-01",pages:96,isbn:"978-1-60125-800-7",url:"https://paizo.com/products/btpy98td",type:"ap"},{_id:"PZO90102",name:"Hell's Rebels #6: Breaking the Bones of Hell",date:"2016-01-01",pages:96,isbn:"978-1-60125-808-3",url:"https://paizo.com/products/btpy9i8d",type:"ap"},{_id:"PZO9000-18E",name:"Hell's Vengeance Player's Guide",date:"2016-02-25",pages:20,url:"https://paizo.com/products/btpy9jva",type:"pg"},{_id:"PZO90103",name:"Hell's Vengeance #1: The Hellfire Compact",date:"2016-02-01",pages:96,isbn:"978-1-60125-818-2",url:"https://paizo.com/products/btpy9gds",type:"ap"},{_id:"PZO90104",name:"Hell's Vengeance #2: Wrath of Thrune",date:"2016-03-01",pages:96,isbn:"978-1-60125-824-3",url:"https://paizo.com/products/btpy9h32",type:"ap"},{_id:"PZO90105",name:"Hell's Vengeance #3: The Inferno Gate",date:"2016-04-01",pages:96,isbn:"978-1-60125-827-4",url:"https://paizo.com/products/btpy9hj9",type:"ap"},{_id:"PZO90106",name:"Hell's Vengeance #4: For Queen & Empire",date:"2016-05-01",pages:96,isbn:"978-1-60125-836-6",url:"https://paizo.com/products/btpy9ics",type:"ap"},{_id:"PZO90107",name:"Hell's Vengeance #5: Scourge of the Godclaw",date:"2016-06-01",pages:96,isbn:"978-1-60125-842-7",url:"https://paizo.com/products/btpy9ips",type:"ap"},{_id:"PZO90108",name:"Hell's Vengeance #6: Hell Comes to Westcrown",date:"2016-08-01",pages:96,isbn:"978-1-60125-851-9",url:"https://paizo.com/products/btpy9jd0",type:"ap"},{_id:"PZO9000-19E",name:"Strange Aeons Player's Guide",date:"2016-08-17",pages:12,url:"https://paizo.com/products/btpy9nrw",type:"pg"},{_id:"PZO90109",name:"Strange Aeons #1: In Search of Sanity",date:"2016-08-01",pages:96,isbn:"978-1-60125-882-3",url:"https://paizo.com/products/btpy9k5o",type:"ap"},{_id:"PZO90110",name:"Strange Aeons #2: The Thrushmoor Terror",date:"2016-09-01",pages:96,isbn:"978-1-60125-892-2",url:"https://paizo.com/products/btpy9l3g",type:"ap"},{_id:"PZO90111",name:"Strange Aeons #3: Dreams of the Yellow King",date:"2016-11-01",pages:96,isbn:"978-1-60125-899-1",url:"https://paizo.com/products/btpy9mbj",type:"ap"},{_id:"PZO90112",name:"Strange Aeons #4: The Whisper Out of Time",date:"2016-12-01",pages:96,isbn:"978-1-60125-908-0",url:"https://paizo.com/products/btpy9n12",type:"ap"},{_id:"PZO90113",name:"Strange Aeons #5: What Grows Within",date:"2017-01-01",pages:96,isbn:"978-1-60125-913-4",url:"https://paizo.com/products/btpy9nd3",type:"ap"},{_id:"PZO90114",name:"Strange Aeons #6: Black Stars Beckon",date:"2017-02-01",pages:96,isbn:"978-1-60125-919-6",url:"https://paizo.com/products/btpy9nd9",type:"ap"},{_id:"PZO9000-20E",name:"Ironfang Invasion Player's Guide",date:"2017-03-16",pages:12,url:"https://paizo.com/products/btpy9sc5",type:"pg"},{_id:"PZO90115",name:"Ironfang Invasion #1: Trail of the Hunted",date:"2017-03-01",pages:96,isbn:"978-1-60125-926-4",url:"https://paizo.com/products/btpy9npj",type:"ap"},{_id:"PZO90116",name:"Ironfang Invasion #2: Fangs of War",date:"2017-03-01",pages:96,isbn:"978-1-60125-932-5",url:"https://paizo.com/products/btpy9npk",type:"ap"},{_id:"PZO90117",name:"Ironfang Invasion #3: Assault on Longshadow",date:"2017-04-01",pages:96,isbn:"978-1-60125-935-6",url:"https://paizo.com/products/btpy9p1h",type:"ap"},{_id:"PZO90119",name:"Ironfang Invasion #4: Siege of Stone",date:"2017-05-01",pages:96,isbn:"978-1-60125-940-0",url:"https://paizo.com/products/btpy9pn4",type:"ap"},{_id:"PZO90119",name:"Ironfang Invasion #5: Prisoners of the Blight",date:"2017-06-01",pages:96,isbn:"978-1-60125-943-1",url:"https://paizo.com/products/btpy9npn",type:"ap"},{_id:"PZO90120",name:"Ironfang Invasion #6: Vault of the Onyx Citadel",date:"2017-07-01",pages:96,isbn:"978-1-60125-952-3",url:"https://paizo.com/products/btpy9pno",type:"ap"},{_id:"PZO9000-21E",name:"Ruins of Azlant Player's Guide",date:"2017-08-03",pages:16,url:"https://paizo.com/products/btpy9uir",type:"pg"},{_id:"PZO90121",name:"Ruins of Azlant #1: The Lost Outpost",date:"2017-08-01",pages:96,isbn:"978-1-60125-964-6",url:"https://paizo.com/products/btpy9qya",type:"ap"},{_id:"PZO90122",name:"Ruins of Azlant #2: Into the Shattered Continent",date:"2017-09-01",pages:96,isbn:"978-1-60125-972-1",url:"https://paizo.com/products/btpy9uk0",type:"ap"},{_id:"PZO90123",name:"Ruins of Azlant #3: The Flooded Cathedral",date:"2017-10-01",pages:96,isbn:"978-1-60125-981-3",url:"https://paizo.com/products/btpy9uk2",type:"ap"},{_id:"PZO90124",name:"Ruins of Azlant #4: City in the Deep",date:"2017-11-01",pages:96,isbn:"978-1-60125-988-2",url:"https://paizo.com/products/btpy9x2h",type:"ap"},{_id:"PZO90125",name:"Ruins of Azlant #5: Tower of the Drowned Dead",date:"2017-12-01",pages:96,isbn:"978-1-60125-998-1",url:"https://paizo.com/products/btpy9xa1",type:"ap"},{_id:"PZO90126",name:"Ruins of Azlant #6: Beyond the Veiled Past",date:"2017-12-01",pages:96,isbn:"978-1-64078-009-5",url:"https://paizo.com/products/btpy9xf0",type:"ap"},{_id:"PZO9000-22E",name:"War for the Crown Player's Guide",date:"2018-03-22",pages:18,url:"https://paizo.com/products/btpya08v",type:"pg"},{_id:"PZO90127",name:"War for the Crown #1: Crownfall",date:"2018-02-01",pages:96,isbn:"978-1-64078-015-6",url:"https://paizo.com/products/btpy9zk7",type:"ap"},{_id:"PZO90128",name:"War for the Crown #2: Songbird, Scion, Saboteur",date:"2018-03-01",pages:96,isbn:"978-1-64078-025-5",url:"https://paizo.com/products/btpya04x",type:"ap"},{_id:"PZO90129",name:"War for the Crown #3: The Twilight Child",date:"2018-04-01",pages:96,isbn:"978-1-64078-032-3",url:"https://paizo.com/products/btpya0fi",type:"ap"},{_id:"PZO90130",name:"War for the Crown #4: City in the Lion's Eye",date:"2018-05-01",pages:96,isbn:"978-1-64078-037-8",url:"https://paizo.com/products/btpy9wmy",type:"ap"},{_id:"PZO90131",name:"War for the Crown #5: The Reaper's Right Hand",date:"2018-06-01",pages:96,isbn:"978-1-64078-045-3",url:"https://paizo.com/products/btpy9x04",type:"ap"},{_id:"PZO90132",name:"War for the Crown #6: The Six-Legend Soul",date:"2018-07-01",pages:96,isbn:"978-1-64078-052-1",url:"https://paizo.com/products/btpy9xdq",type:"ap"},{_id:"PZO9000-23E",name:"Return of the Runelords Player's Guide",date:"2018-09-05",pages:14,url:"https://paizo.com/products/btq01su5",type:"pg"},{_id:"PZO90133",name:"Return of the Runelords #1: Secrets of Roderic's Cove",date:"2018-08-01",pages:96,isbn:"978-1-64078-062-0",url:"https://paizo.com/products/btpy9y26",type:"ap"},{_id:"PZO90134",name:"Return of the Runelords #2: It Came from Hollow Mountain",date:"2018-09-01",pages:96,isbn:"978-1-64078-070-5",url:"https://paizo.com/products/btpy9z14",type:"ap"},{_id:"PZO90135",name:"Return of the Runelords #3: Runeplague",date:"2018-10-01",pages:96,isbn:"978-1-64078-079-8",url:"https://paizo.com/products/btpy9zsl",type:"ap"},{_id:"PZO90136",name:"Return of the Runelords #4: Temple of the Peacock Spirit",date:"2018-11-01",pages:96,isbn:"978-1-64078-091-0",url:"https://paizo.com/products/btpya0b5",type:"ap"},{_id:"PZO90137",name:"Return of the Runelords #5: The City Outside of Time",date:"2018-12-01",pages:96,isbn:"978-1-64078-098-9",url:"https://paizo.com/products/btq01vak",type:"ap"},{_id:"PZO90138",name:"Return of the Runelords #6: Rise of New Thassilon",date:"2019-01-01",pages:96,isbn:"978-1-64078-106-1",url:"https://paizo.com/products/btq01w1w",type:"ap"},{_id:"PZO9000-24E",name:"Tyrant's Grasp Player's Guide",date:"2019-02-08",pages:9,url:"https://paizo.com/products/btq01xdp",type:"pg"},{_id:"PZO90139",name:"Tyrant's Grasp #1: The Dead Roads",date:"2019-02-01",pages:96,isbn:"978-1-64078-111-5",url:"https://paizo.com/products/btq01ws3",type:"ap"},{_id:"PZO90140",name:"Tyrant's Grasp #2: Eulogy for Roslar's Coffer",date:"2019-03-01",pages:96,isbn:"978-1-64078-119-1",url:"https://paizo.com/products/btq01x4b",type:"ap"},{_id:"PZO90141",name:"Tyrant's Grasp #3: Last Watch",date:"2019-04-01",pages:96,isbn:"978-1-64078-126-9",url:"https://paizo.com/products/btq01x4f",type:"ap"},{_id:"PZO90142",name:"Tyrant's Grasp #4: Gardens of Gallowspire",date:"2019-05-01",pages:96,isbn:"978-1-64078-134-4",url:"https://paizo.com/products/btq01xj6",type:"ap"},{_id:"PZO90143",name:"Tyrant's Grasp #5: Borne by the Sun's Grace",date:"2019-06-01",pages:96,isbn:"978-1-64078-140-5",url:"https://paizo.com/products/btq01znj",type:"ap"},{_id:"PZO90144",name:"Tyrant's Grasp #6: Midwives to Death",date:"2019-08-01",pages:96,isbn:"978-1-64078-144-3",url:"https://paizo.com/products/btq01zno",type:"ap"},{_id:"PZO9500",name:"Hollow's Last Hope",date:"2007-06-01",pages:16,level:1,type:"module"},{_id:"PZO9501",name:"Crown of the Kobold King",date:"2007-06-01",pages:32,level:2,isbn:"978-1-60125-048-3",type:"module"},{_id:"PZO9502",name:"Conquest of Bloodsworn Vale",date:"2007-07-01",pages:32,level:6,isbn:"978-1-60125-049-0",type:"module"},{_id:"PZO9503",name:"Seven Swords of Sin",date:"2007-08-01",pages:32,level:7,isbn:"978-1-60125-050-6",type:"module"},{_id:"PZO9504",name:"Gallery of Evil",date:"2007-09-01",pages:32,level:8,isbn:"978-1-60125-051-3",type:"module"},{_id:"PZO9505",name:"Entombed with the Pharaohs",date:"2007-10-01",pages:32,level:6,isbn:"978-1-60125-052-0",type:"module"},{_id:"PZO9500-TC1",name:"Into the Haunted Forest",date:"2007-11-01",pages:16,level:1,isbn:"978-1-60125-108-4",type:"module"},{_id:"PZO9506",name:"Carnival of Tears",date:"2007-11-01",pages:32,level:5,isbn:"978-1-60125-055-1",type:"module"},{_id:"PZO9507",name:"Guardians of Dragonfall",date:"2007-12-01",pages:32,level:11,isbn:"978-1-60125-056-8",type:"module"},{_id:"PZO9508",name:"Hangman's Noose",date:"2008-01-01",pages:32,level:1,isbn:"978-1-60125-073-5",type:"module"},{_id:"PZO9509",name:"Crucible of Chaos",date:"2008-02-01",pages:32,level:8,isbn:"978-1-60125-074-2",type:"module"},{_id:"PZO9510",name:"River into Darkness",date:"2008-03-01",pages:32,level:4,isbn:"978-1-60125-075-9",type:"module"},{_id:"PZO9511",name:"The Demon Within",date:"2008-04-01",pages:32,level:11,isbn:"978-1-60125-076-6",type:"module"},{_id:"PZO9512",name:"Flight of the Red Raven",date:"2008-05-01",pages:32,level:4,isbn:"978-1-60125-101-5",type:"module"},{_id:"PZO9500-2",name:"Revenge of the Kobold King",date:"2008-06-01",pages:16,level:5,type:"module"},{_id:"PZO9513",name:"Tower of the Last Baron",date:"2008-06-01",pages:32,level:5,isbn:"978-1-60125-102-2",type:"module"},{_id:"PZO9514",name:"Treasure of Chimera Cove",date:"2008-10-01",pages:32,level:7,isbn:"978-1-60125-119-0",type:"module"},{_id:"PZO9515",name:"Hungry Are the Dead",date:"2008-10-01",pages:32,level:6,isbn:"978-1-60125-120-6",type:"module"},{_id:"PZO9516",name:"The Pact Stone Pyramid",date:"2008-11-01",pages:32,level:8,isbn:"978-1-60125-145-9",type:"module"},{_id:"PZO9517",name:"Clash of the Kingslayers",date:"2009-01-01",pages:32,level:10,isbn:"978-1-60125-125-1",type:"module"},{_id:"PZO9518",name:"Blood of Dragonscar",date:"2009-03-01",pages:32,level:15,isbn:"978-1-60125-170-1",type:"module"},{_id:"PZO9519",name:"Beyond the Vault of Souls",date:"2009-07-01",pages:32,level:9,isbn:"978-1-60125-174-9",type:"module"},{_id:"PZO9520NM",name:"Crypt of the Everflame",date:"2009-08-01",pages:32,level:1,isbn:"978-1-60125-186-2",type:"module"},{_id:"PZO9521",name:"Carrion Hill",date:"2009-11-01",pages:32,level:5,isbn:"978-1-60125-206-7",type:"module"},{_id:"PZO9522",name:"Masks of the Living God",date:"2009-12-01",pages:32,level:3,isbn:"978-1-60125-207-4",type:"module"},{_id:"PZO9523",name:"Realm of the Fellnight Queen",date:"2010-02-01",pages:32,level:7,isbn:"978-1-60125-224-1",type:"module"},{_id:"PZO9524",name:"City of Golden Death",date:"2010-04-01",pages:32,level:5,isbn:"978-1-60125-225-8",type:"module"},{_id:"PZO9525",name:"From Shore to Sea",date:"2010-06-01",pages:32,level:6,isbn:"978-1-60125-257-9",type:"module"},{_id:"PZO9500-4",name:"Master of the Fallen Fortress",date:"2010-06-01",pages:16,level:1,isbn:"978-1-60125-365-1",type:"module"},{_id:"PZO9526",name:"Curse of the Riven Sky",date:"2010-07-01",pages:32,level:10,isbn:"978-1-60125-258-6",type:"module"},{_id:"PZO9527",name:"The Witchwar Legacy",date:"2010-09-01",pages:32,level:17,isbn:"978-1-60125-279-1",type:"module"},{_id:"PZO9528",name:"The Godsmouth Heresy",date:"2010-12-01",pages:32,level:1,isbn:"978-1-60125-280-7",type:"module"},{_id:"PZO9529",name:"Cult of the Ebon Destroyers",date:"2011-02-01",pages:32,level:8,isbn:"978-1-60125-317-0",type:"module"},{_id:"PZO9530",name:"Tomb of the Iron Medusa",date:"2011-04-01",pages:32,level:14,isbn:"978-1-60125-318-7",type:"module"},{_id:"PZO9531",name:"Academy of Secrets",date:"2011-06-01",pages:32,level:13,isbn:"978-1-60125-343-9",type:"module"},{_id:"PZO9500-5",name:"We Be Goblins!",date:"2011-06-01",pages:16,level:1,type:"module"},{_id:"PZO9532",name:"The Harrowing",date:"2011-07-01",pages:32,level:9,isbn:"978-1-60125-355-2",type:"module"},{_id:"PZO9533",name:"Feast of Ravenmoor",date:"2011-09-01",pages:32,level:3,isbn:"978-1-60125-367-5",type:"module"},{_id:"PZO9534",name:"The Ruby Phoenix Tournament",date:"2012-01-01",pages:32,level:11,isbn:"978-1-60125-381-1",type:"module"},{_id:"PZO9535",name:"The Midnight Mirror",date:"2012-04-01",pages:32,level:4,isbn:"978-1-60125-401-6",type:"module"},{_id:"PZO9536",name:"No Response from Deepmar",date:"2012-05-01",pages:32,level:8,isbn:"978-1-60125-410-8",type:"module"},{_id:"PZO9500-6",name:"Dawn of the Scarlet Sun",date:"2012-06-01",pages:16,level:5,type:"module"},{_id:"PZO9537",name:"The Moonscar",date:"2012-08-01",pages:32,level:16,isbn:"978-1-60125-426-9",type:"module"},{_id:"PZO9538",name:"Murder's Mark",date:"2012-10-01",pages:32,level:1,isbn:"978-1-60125-447-4",type:"module"},{_id:"PZO9539",name:"Broken Chains",date:"2013-03-01",pages:32,level:6,isbn:"978-1-60125-461-0",type:"module"},{_id:"PZO9540",name:"Fangwood Keep",date:"2013-04-01",pages:32,level:4,isbn:"978-1-60125-476-4",type:"module"},{_id:"PZO9541",name:"Doom Comes to Dustpawn",date:"2013-05-01",pages:32,level:9,isbn:"978-1-60125-504-4",type:"module"},{_id:"PZO9500-7",name:"We Be Goblins Too!",date:"2013-06-01",pages:16,level:3,type:"module"},{_id:"PZO9542",name:"The Dragon's Demand",date:"2013-07-01",pages:64,level:1,isbn:"978-1-60125-527-3",type:"module"},{_id:"PZO9543",name:"Wardens of the Reborn Forge",date:"2013-12-01",pages:64,level:12,isbn:"978-1-60125-555-6",type:"module"},{_id:"PZO9544",name:"Tears at Bitter Manor",date:"2014-03-01",pages:64,level:5,isbn:"978-1-60125-613-3",type:"module"},{_id:"PZO9500-8",name:"Risen from the Sands",date:"2014-06-01",pages:16,level:3,type:"module"},{_id:"PZO9545",name:"The Emerald Spire Superdungeon",date:"2014-06-01",pages:160,level:1,isbn:"978-1-60125-655-3",type:"module"},{_id:"PZO9546",name:"Plunder & Peril",date:"2014-11-01",pages:64,level:4,isbn:"978-1-60125-680-5",type:"module"},{_id:"PZO9547",name:"Daughters of Fury",date:"2015-02-01",pages:64,level:3,isbn:"978-1-60125-706-2",type:"module"},{_id:"PZO9500-9",name:"We Be Goblins Free!",date:"2015-06-01",pages:16,level:4,type:"module"},{_id:"PZO9548",name:"Feast of Dust",date:"2015-11-01",pages:64,level:11,isbn:"978-1-60125-735-2",type:"module"},{_id:"PZO9549",name:"The House on Hook Street",date:"2015-12-01",pages:64,level:6,isbn:"978-1-60125-790-1",type:"module"},{_id:"PZO9550",name:"Down the Blighted Path",date:"2016-02-01",pages:64,level:5,isbn:"978-1-60125-815-1",type:"module"},{_id:"PZO9551",name:"Ire of the Storm",date:"2016-05-01",pages:64,level:1,isbn:"978-1-60125-830-4",type:"module"},{_id:"PZO9500-10",name:"We B4 Goblins!",date:"2016-06-01",pages:16,level:1,type:"module"},{_id:"PZO9552",name:"Gallows of Madness",date:"2016-08-01",pages:64,level:1,isbn:"978-1-60125-854-0",type:"module"},{_id:"PZO9553",name:"Seers of the Drowned City",date:"2016-11-01",pages:64,level:6,isbn:"978-1-60125-902-8",type:"module"},{_id:"PZOGENA001",name:"Heroes for Highdelve",date:"2017-08-01",pages:20,level:1,isbn:"978-1-64078-002-6",type:"module"},{_id:"PZOGAUNTLET",name:"The Gauntlet",date:"2018-05-01",pages:16,level:8,type:"module"},{_id:"PZO9500-12",name:"We Be 5uper Goblins!",date:"2018-06-01",pages:16,level:6,type:"module"},{_id:"PZO9554",name:"Cradle of Night",date:"2018-12-01",pages:64,level:8,isbn:"978-1-60125-991-2",type:"module"},{_id:"PZO9500-14",name:"We Be Heroes?",date:"2019-06-01",pages:16,level:1,type:"module"},{_id:"PZO9402",name:"Elves of Golarion",date:"2008-10-01",isbn:"978-1-60125-143-5",legacy:!0,type:"companion"},{_id:"PZO9403",name:"Osirion, Land of Pharaohs",date:"2008-12-01",isbn:"978-1-60125-144-2",url:"https://paizo.com/products/btpy86j7",legacy:!0,type:"companion"},{_id:"PZO9405",name:"Taldor, Echoes of Glory",date:"2009-04-01",isbn:"978-1-60125-169-5",legacy:!0,type:"companion"},{_id:"PZO9406",name:"Qadira, Gateway to the East",date:"2009-06-01",isbn:"978-1-60125-180-0",type:"companion"},{_id:"PZO9407",name:"Cheliax, Empire of Devils",date:"2009-08-01",isbn:"978-1-60125-191-6",tieIn:"Council of Thieves",type:"companion"},{_id:"PZO9408",name:"Dwarves of Golarion",date:"2009-12-01",isbn:"978-1-60125-204-3",type:"companion"},{_id:"PZO9409",name:"Andoran, Spirit of Liberty",date:"2010-01-01",isbn:"978-1-60125-205-0",type:"companion"},{_id:"PZO9410",name:"Adventurer's Armory",abbr:"AA",date:"2010-04-01",isbn:"978-1-60125-222-7",tieIn:"Kingmaker",type:"companion"},{_id:"PZO9411",name:"Gnomes of Golarion",date:"2010-05-01",isbn:"978-1-60125-223-4",type:"companion"},{_id:"PZO9412",name:"Sargava, the Lost Colony",date:"2010-06-01",isbn:"978-1-60125-255-5",type:"companion"},{_id:"PZO9413",name:"Orcs of Golarion",date:"2010-08-01",isbn:"978-1-60125-256-2",tieIn:"Serpent's Skull",type:"companion"},{_id:"PZO9414",name:"Inner Sea Primer",date:"2010-11-01",isbn:"978-1-60125-277-7",type:"companion"},{_id:"PZO9415",name:"Halflings of Golarion",date:"2011-01-01",isbn:"978-1-60125-278-4",type:"companion"},{_id:"PZO9416",name:"Faiths of Purity",date:"2011-04-01",isbn:"978-1-60125-314-9",tieIn:"Carrion Crown",type:"companion"},{_id:"PZO9417",name:"Humans of Golarion",date:"2011-06-01",isbn:"978-1-60125-315-6",type:"companion"},{_id:"PZO9418",name:"Faiths of Balance",date:"2011-07-01",isbn:"978-1-60125-316-3",type:"companion"},{_id:"PZO9419",name:"Goblins of Golarion",date:"2011-08-01",isbn:"978-1-60125-362-0",tieIn:"Jade Regent",type:"companion"},{_id:"PZO9420",name:"Faiths of Corruption",date:"2011-10-01",isbn:"978-1-60125-375-0",type:"companion"},{_id:"PZO9421",name:"Dragon Empires Primer",date:"2012-01-01",isbn:"978-1-60125-386-6",type:"companion"},{_id:"PZO9422",name:"Pirates of the Inner Sea",abbr:"PotIS",date:"2012-02-01",isbn:"978-1-60125-405-4",tieIn:"Skull & Shackles",type:"companion"},{_id:"PZO9423",name:"Blood of Fiends",date:"2012-04-01",isbn:"978-1-60125-423-8",type:"companion"},{_id:"PZO9424",name:"Blood of Angels",date:"2012-07-01",isbn:"978-1-60125-438-2",type:"companion"},{_id:"PZO9425",name:"Varisia, Birthplace of Legends",date:"2012-08-02",isbn:"978-1-60125-453-5",tieIn:"Shattered Star",type:"companion"},{_id:"PZO9426",name:"Knights of the Inner Sea",date:"2012-09-01",isbn:"978-1-60125-460-3",type:"companion"},{_id:"PZO9427",name:"Blood of the Night",date:"2012-12-06",isbn:"978-1-60125-470-2",type:"companion"},{_id:"PZO9428",name:"People of the North",date:"2013-01-22",isbn:"978-1-60125-475-7",type:"companion"},{_id:"PZO9429",name:"Animal Archive",date:"2013-02-13",isbn:"978-1-60125-488-7",tieIn:"Reign of Winter",type:"companion"},{_id:"PZO9430",name:"Dungeoneer's Handbook",abbr:"DHB",date:"2013-03-08",isbn:"978-1-60125-510-5",type:"companion"},{_id:"PZO9431",name:"Champions of Purity",date:"2013-04-16",isbn:"978-1-60125-511-2",type:"companion"},{_id:"PZO9432",name:"Kobolds of Golarion",date:"2013-06-13",isbn:"978-1-60125-512-9",type:"companion"},{_id:"PZO9433",name:"Quests & Campaigns",date:"2013-06-13",isbn:"978-1-60125-513-6",type:"companion"},{_id:"PZO9434",name:"Dragonslayer's Handbook",date:"2013-07-11",isbn:"978-1-60125-526-6",type:"companion"},{_id:"PZO9435",name:"Pathfinder Society Primer",date:"2013-07-11",isbn:"978-1-60125-534-1",type:"companion"},{_id:"PZO9436",name:"Faiths & Philosophies",date:"2013-08-19",isbn:"978-1-60125-543-3",tieIn:"Wrath of the Righteous",type:"companion"},{_id:"PZO9437",name:"Demon Hunter's Handbook",date:"2013-08-17",isbn:"978-1-60125-554-9",type:"companion"},{_id:"PZO9438",name:"Mythic Origins",date:"2013-09-25",isbn:"978-1-60125-569-3",type:"companion"},{_id:"PZO9439",name:"Blood of the Moon",date:"2013-10-21",isbn:"978-1-60125-578-5",type:"companion"},{_id:"PZO9440",name:"Magical Marketplace",abbr:"MM",date:"2013-12-11",isbn:"978-1-60125-600-3",type:"companion"},{_id:"PZO9441",name:"People of the Sands",date:"2014-01-09",isbn:"978-1-60125-601-0",type:"companion"},{_id:"PZO9442",name:"Bastards of Golarion",date:"2014-02-06",isbn:"978-1-60125-602-7",tieIn:"Mummy's Mask",type:"companion"},{_id:"PZO9443",name:"Champions of Balance",date:"2014-03-25",isbn:"978-1-60125-603-4",type:"companion"},{_id:"PZO9444",name:"Undead Slayer's Handbook",abbr:"USH",date:"2014-04-30",isbn:"978-1-60125-604-1",type:"companion"},{_id:"PZO9445",name:"Alchemy Manual",abbr:"AM",date:"2014-04-30",isbn:"978-1-60125-605-8",type:"companion"},{_id:"PZO9446",name:"The Harrow Handbook",date:"2014-05-28",isbn:"978-1-60125-650-8",type:"companion"},{_id:"PZO9447",name:"Blood of the Elements",date:"2014-06-25",isbn:"978-1-60125-654-6",type:"companion"},{_id:"PZO9448",name:"People of the River",date:"2014-07-25",isbn:"978-1-60125-666-9",type:"companion"},{_id:"PZO9449",name:"People of the Stars",date:"2014-08-14",isbn:"978-1-60125-674-4",tieIn:"Iron Gods",type:"companion"},{_id:"PZO9450",name:"Champions of Corruption",date:"2014-09-10",isbn:"978-1-60125-679-9",type:"companion"},{_id:"PZO9451",name:"Advanced Class Origins",date:"2014-10-22",isbn:"978-1-60125-689-8",type:"companion"},{_id:"PZO9452",name:"Ranged Tactics Toolbox",date:"2014-11-24",isbn:"978-1-60125-705-5",type:"companion"},{_id:"PZO9453",name:"Giant Hunter's Handbook",date:"2014-12-17",isbn:"978-1-60125-712-3",type:"companion"},{_id:"PZO9454",name:"Familiar Folio",abbr:"FF",date:"2015-01-28",isbn:"978-1-60125-731-4",type:"companion"},{_id:"PZO9455",name:"Melee Tactics Toolbox",date:"2015-03-25",isbn:"978-1-60125-732-1",tieIn:"Giant Slayer",type:"companion"},{_id:"PZO9456",name:"Heroes of the Wild",date:"2015-04-29",isbn:"978-1-60125-733-8",type:"companion"},{_id:"PZO9457",name:"Cohorts and Companions",date:"2015-05-27",isbn:"978-1-60125-734-5",type:"companion"},{_id:"PZO9458",name:"Monster Summoner's Handbook",date:"2015-06-24",isbn:"978-1-60125-758-1",type:"companion"},{_id:"PZO9459",name:"Dirty Tactics Toolbox",date:"2015-09-02",isbn:"978-1-60125-763-5",tieIn:"Hell's Rebels",type:"companion"},{_id:"PZO9460",name:"Heroes of the Streets",date:"2015-09-30",isbn:"978-1-60125-769-7",type:"companion"},{_id:"PZO9461",name:"Occult Origins",abbr:"OO",date:"2015-10-21",isbn:"978-1-60125-785-7",type:"companion"},{_id:"PZO9462",name:"Black Markets",abbr:"BM",date:"2015-10-21",isbn:"978-1-60125-789-5",type:"companion"},{_id:"PZO9463",name:"Weapon Master's Handbook",date:"2015-11-18",isbn:"978-1-60125-796-3",type:"companion"},{_id:"PZO9464",name:"Agents of Evil",date:"2015-12-16",isbn:"978-1-60125-801-4",type:"companion"},{_id:"PZO9465",name:"Arcane Anthology",abbr:"AA",date:"2016-01-27",isbn:"978-1-60125-814-4",type:"companion"},{_id:"PZO9466",name:"Blood of Shadows",date:"2016-02-24",isbn:"978-1-60125-820-5",tieIn:"Hell's Vengeance",type:"companion"},{_id:"PZO9467",name:"Armor Master's Handbook",date:"2016-04-27",isbn:"978-1-60125-829-8",type:"companion"},{_id:"PZO9468",name:"Magic Tactics Toolbox",date:"2016-05-25",isbn:"978-1-60125-838-0",type:"companion"},{_id:"PZO9469",name:"Spymaster's Handbook",date:"2016-06-29",isbn:"978-1-60125-844-1",type:"companion"},{_id:"PZO9470",name:"Legacy of Dragons",date:"2016-08-04",isbn:"978-1-60125-853-3",tieIn:"Strange Aeons",type:"companion"},{_id:"PZO9471",name:"Haunted Heroes Handbook",date:"2016-08-31",isbn:"978-1-60125-884-7",type:"companion"},{_id:"PZO9472",name:"Divine Anthology",date:"2016-09-28",isbn:"978-1-60125-894-6",type:"companion"},{_id:"PZO9473",name:"Blood of the Beast",date:"2016-11-16",isbn:"978-1-60125-901-1",type:"companion"},{_id:"PZO9474",name:"Paths of the Righteous",date:"2016-12-14",isbn:"978-1-60125-910-3",type:"companion"},{_id:"PZO9475",name:"Healer's Handbook",abbr:"HH",date:"2017-01-25",isbn:"978-1-60125-914-1",type:"companion"},{_id:"PZO9476",name:"Heroes of the High Court",date:"2017-02-22",isbn:"978-1-60125-920-2",type:"companion"},{_id:"PZO9477",name:"Psychic Anthology",date:"2017-02-22",isbn:"978-1-60125-928-8",type:"companion"},{_id:"PZO9478",name:"Monster Hunter's Handbook",date:"2017-03-29",isbn:"978-1-60125-933-2",tieIn:"Ironfang Invasion",type:"companion"},{_id:"PZO9479",name:"Heroes of the Darklands",date:"2017-04-26",isbn:"978-1-60125-936-3",type:"companion"},{_id:"PZO9480",name:"Legacy of the First World",date:"2017-05-31",isbn:"978-1-60125-941-7",type:"companion"},{_id:"PZO9481",name:"Adventurer's Armory 2",abbr:"AA2",date:"2017-06-28",isbn:"978-1-60125-945-5",type:"companion"},{_id:"PZO9482",name:"Blood of the Sea",date:"2017-07-26",isbn:"978-1-60125-955-4",type:"companion"},{_id:"PZO9483",name:"Elemental Master's Handbook",date:"2017-08-17",isbn:"978-1-60125-965-3",tieIn:"Ruins of Azlant",type:"companion"},{_id:"PZO9484",name:"Antihero's Handbook",date:"2017-09-20",isbn:"978-1-60125-973-8",type:"companion"},{_id:"PZO9485",name:"Blood of the Coven",date:"2017-10-18",isbn:"978-1-60125-982-0",type:"companion"},{_id:"PZO9486",name:"People of the Wastes",date:"2017-11-15",isbn:"978-1-60125-990-5",type:"companion"},{_id:"PZO9487",name:"Potions & Poisons",abbr:"P&P",date:"2017-12-13",isbn:"978-1-64078-000-2",type:"companion"},{_id:"PZO9488",name:"Disciple's Doctrine",date:"2018-01-31",isbn:"978-1-64078-011-8",type:"companion"},{_id:"PZO9489",name:"Merchant's Manifest",date:"2018-03-28",isbn:"978-1-64078-026-2",tieIn:"War for the Crown",type:"companion"},{_id:"PZO9490",name:"Blood of the Ancients",date:"2018-05-30",isbn:"978-1-64078-038-5",type:"companion"},{_id:"PZO9491",name:"Heroes from the Fringe",date:"2018-08-29",isbn:"978-1-64078-053-8",tieIn:"Return of the Runelords",type:"companion"},{_id:"PZO9492",name:"Plane-Hopper's Handbook",date:"2018-09-19",isbn:"978-1-64078-071-2",type:"companion"},{_id:"PZO9493",name:"Martial Arts Handbook",date:"2018-11-14",isbn:"978-1-64078-092-7",type:"companion"},{_id:"PZO9494",name:"Wilderness Origins",date:"2019-01-30",isbn:"978-1-64078-107-8",type:"companion"},{_id:"PZO9495",name:"Heroes of Golarion",date:"2019-03-27",isbn:"978-1-64078-120-7",tieIn:"Tyrant's Grasp",type:"companion"},{_id:"PZO9496",name:"Chronicle of Legends",date:"2019-05-29",isbn:"978-1-64078-136-8",type:"companion"},{_id:"PZO1106",name:"Pathfinder Chronicles: Guide to Korvosa",date:"2008-03-01",pages:64,isbn:"978-1-60125-078-0",type:"setting"},{_id:"PZO1105",name:"Pathfinder Chronicles: Gazetteer",date:"2008-04-01",pages:64,isbn:"978-1-60125-077-3",type:"setting"},{_id:"PZO1107",name:"Pathfinder Chronicles: Classic Monsters Revisited",date:"2008-04-01",pages:64,isbn:"978-1-60125-079-7",type:"setting"},{_id:"PZO1108",name:"Pathfinder Chronicles: Guide to Darkmoon Vale",date:"2008-07-01",pages:64,isbn:"978-1-60125-100-8",type:"setting"},{_id:"PZO1111",name:"Pathfinder Chronicles: Campaign Setting",date:"2008-08-01",pages:256,isbn:"978-1-60125-112-1",url:"http://paizo.com/products/btpy84eo",type:"setting"},{_id:"PZO9202",name:"Pathfinder Chronicles: Gods and Magic",date:"2008-10-01",pages:32,isbn:"978-1-60125-139-8",type:"setting"},{_id:"PZO9204",name:"Pathfinder Chronicles: Into the Darklands",date:"2008-11-01",pages:64,isbn:"978-1-60125-140-4",type:"setting"},{_id:"PZO9205",name:"Pathfinder Chronicles: Guide to Absalom",date:"2008-12-01",pages:64,isbn:"978-1-60125-141-1",type:"setting"},{_id:"PZO9207",name:"Pathfinder Chronicles: Dragons Revisited",date:"2009-03-01",pages:64,isbn:"978-1-60125-165-7",type:"setting"},{_id:"PZO9208",name:"Pathfinder Chronicles: Dark Markets: A Guide to Katapesh",date:"2009-04-01",pages:64,isbn:"978-1-60125-166-4",type:"setting"},{_id:"PZO9209",name:"Pathfinder Chronicles: The Great Beyond",date:"2009-05-01",pages:64,isbn:"978-1-60125-167-1",type:"setting"},{_id:"PZO9210",name:"Pathfinder Chronicles: Dungeon Denizens Revisited",abbr:"DDR",date:"2009-05-01",pages:64,isbn:"978-1-60125-172-5",type:"setting",legacy:!0},{_id:"PZO9211",name:"Pathfinder Chronicles: Seekers of Secrets",abbr:"SoS",date:"2009-10-01",pages:64,isbn:"978-1-60125-178-7",type:"setting"},{_id:"PZO9213",name:"Pathfinder Chronicles: Princes of Darkness",date:"2009-10-01",pages:64,isbn:"978-1-60125-189-3",type:"setting"},{_id:"PZO9214",name:"Pathfinder Chronicles: Cities of Golarion",date:"2009-11-01",pages:64,isbn:"978-1-60125-178-7",type:"setting"},{_id:"PZO9216",name:"Pathfinder Chronicles: Classic Horrors Revisited",date:"2010-01-01",pages:64,isbn:"978-1-60125-202-9",type:"setting"},{_id:"PZO9217E",name:"Pathfinder Chronicles: Guide to the River Kingdoms",date:"2010-02-01",pages:64,isbn:"978-1-60125-203-6",type:"setting"},{_id:"PZO9219",name:"Pathfinder Chronicles: NPC Guide",date:"2010-03-01",pages:64,isbn:"978-1-60125-219-7",type:"setting"},{_id:"PZO9220",name:"Pathfinder Chronicles: Classic Treasures Revisited",date:"2010-04-01",pages:64,isbn:"978-1-60125-220-3",type:"setting"},{_id:"PZO9221",name:"Pathfinder Chronicles: Faction Guide",abbr:"FG",date:"2010-05-01",pages:64,isbn:"978-1-60125-221-0",type:"setting"},{_id:"PZO9222",name:"Pathfinder Chronicles: Heart of the Jungle",date:"2010-06-01",pages:64,isbn:"978-1-60125-247-0",type:"setting"},{_id:"PZO9223",name:"Pathfinder Chronicles: City of Strangers",date:"2010-07-01",pages:64,isbn:"978-1-60125-248-7",type:"setting"},{_id:"PZO9227",name:"Misfit Monsters Redeemed",date:"2010-11-01",pages:64,isbn:"978-1-60125-270-8",type:"setting"},{_id:"PZO9225",name:"Lords of Chaos",date:"2010-12-01",pages:64,isbn:"978-1-60125-250-0",type:"setting"},{_id:"PZO9229",name:"Lost Cities of Golarion",date:"2011-01-01",pages:64,isbn:"978-1-60125-272-2",type:"setting"},{_id:"PZO9226",name:"The Inner Sea World Guide",abbr:"ISWG",date:"2011-03-01",pages:320,isbn:"978-1-60125-269-2",url:"http://paizo.com/products/btpy8ief",type:"setting"},{_id:"PZO9231",name:"Rule of Fear",date:"2011-04-01",pages:64,isbn:"978-1-60125-301-9",type:"setting"},{_id:"PZO9232",name:"Rival Guide",date:"2011-05-01",pages:64,isbn:"978-1-60125-302-6",type:"setting"},{_id:"PZO9233",name:"Undead Revisited",date:"2011-06-01",pages:64,isbn:"978-1-60125-303-3",type:"setting"},{_id:"PZO9234",name:"Dungeons of Golarion",date:"2011-07-01",pages:64,isbn:"978-1-60125-304-0",type:"setting"},{_id:"PZO9235",name:"Pathfinder Society Field Guide",abbr:"PSFG",date:"2011-07-01",pages:64,isbn:"978-1-60125-305-7",type:"setting"},{_id:"PZO9237",name:"Inner Sea Magic",date:"2011-07-01",pages:64,isbn:"978-1-60125-360-6",type:"setting"},{_id:"PZO9238",name:"Lands of the Linnorm Kings",date:"2011-10-01",pages:64,isbn:"978-1-60125-365-1",type:"setting"},{_id:"PZO9239",name:"Horsemen of the Apocalypse",date:"2011-11-01",pages:64,isbn:"978-1-60125-373-6",type:"setting"},{_id:"PZO9240",name:"Dragon Empires Gazetteer",date:"2011-12-01",pages:64,isbn:"978-1-60125-379-8",type:"setting"},{_id:"PZO9241",name:"Mythical Monsters Revisited",date:"2012-01-01",pages:64,isbn:"978-1-60125-384-2",type:"setting"},{_id:"PZO9243",name:"Distant Worlds",date:"2012-02-01",pages:64,isbn:"978-1-60125-403-0",type:"setting"},{_id:"PZO9244",name:"Isles of the Shackles",date:"2012-04-01",pages:64,isbn:"978-1-60125-408-5",type:"setting"},{_id:"PZO9245",name:"Giants Revisited",date:"2012-05-01",pages:64,isbn:"978-1-60125-412-2",type:"setting"},{_id:"PZO9246",name:"Lost Kingdoms",date:"2012-06-01",pages:64,isbn:"978-1-60125-415-3",type:"setting"},{_id:"PZO9248",name:"Magnimar, City of Monuments",date:"2012-07-01",pages:64,isbn:"978-1-60125-446-7",type:"setting"},{_id:"PZO9249",name:"Paths of Prestige",date:"2012-08-01",pages:64,isbn:"978-1-60125-451-1",type:"setting"},{_id:"PZO9250",name:"Artifacts & Legends",date:"2012-09-01",pages:64,isbn:"978-1-60125-458-0",type:"setting"},{_id:"PZO9251",name:"Inner Sea Bestiary",abbr:"ISB",date:"2012-11-01",pages:64,isbn:"978-1-60125-468-9",type:"setting"},{_id:"PZO9252",name:"Mystery Monsters Revisited",date:"2012-12-01",pages:64,isbn:"978-1-60125-473-3",type:"setting"},{_id:"PZO9253",name:"Irrisen, Land of Eternal Winter",date:"2013-01-01",pages:64,isbn:"978-1-60125-486-3",type:"setting"},{_id:"PZO9255",name:"Chronicle of the Righteous",date:"2013-05-01",pages:64,isbn:"978-1-60125-506-8",type:"setting"},{_id:"PZO9256",name:"Fey Revisited",date:"2013-05-01",pages:64,isbn:"978-1-60125-507-5",type:"setting"},{_id:"PZO9257",name:"Castles of the Inner Sea",date:"2013-06-01",pages:64,isbn:"978-1-60125-508-2",type:"setting"},{_id:"PZO9258",name:"Dragons Unleashed",date:"2013-06-01",pages:64,isbn:"978-1-60125-525-9",type:"setting"},{_id:"PZO9259",name:"The Worldwound",date:"2013-07-01",pages:64,isbn:"978-1-60125-532-7",type:"setting"},{_id:"PZO9261",name:"Demons Revisited",date:"2013-08-01",pages:64,isbn:"978-1-60125-552-5",type:"setting"},{_id:"PZO9262",name:"Mythic Realms",date:"2013-09-01",pages:64,isbn:"978-1-60125-567-9",type:"setting"},{_id:"PZO9263",name:"Towns of the Inner Sea",date:"2013-10-01",pages:64,isbn:"978-1-60125-576-1",type:"setting"},{_id:"PZO9264",name:"Inner Sea NPC Codex",date:"2013-12-01",pages:64,isbn:"978-1-60125-594-5",type:"setting"},{_id:"PZO9265",name:"Osirion, Legacy of Pharaohs",date:"2014-01-01",pages:64,isbn:"978-1-60125-595-2",type:"setting"},{_id:"PZO9267",name:"Inner Sea Gods",abbr:"ISG",date:"2014-04-01",pages:320,isbn:"978-1-60125-597-6",url:"http://paizo.com/products/btpy94wj",type:"setting"},{_id:"PZO9268",name:"Inner Sea Combat",abbr:"ISC",date:"2014-05-01",pages:64,isbn:"978-1-60125-598-3",type:"setting"},{_id:"PZO9269",name:"Occult Mysteries",date:"2014-05-01",pages:64,isbn:"978-1-60125-649-2",type:"setting"},{_id:"PZO9270",name:"Numeria, Land of Fallen Stars",date:"2014-06-01",pages:64,isbn:"978-1-60125-653-9",type:"setting"},{_id:"PZO9272",name:"Technology Guide",abbr:"TG",date:"2014-08-01",pages:64,isbn:"978-1-60125-672-0",type:"setting"},{_id:"PZO9273",name:"Undead Unleashed",date:"2014-09-01",pages:64,isbn:"978-1-60125-677-5",type:"setting"},{_id:"PZO9274",name:"Ships of the Inner Sea",date:"2014-10-01",pages:64,isbn:"978-1-60125-702-4",type:"setting"},{_id:"PZO9275",name:"Lost Treasures",date:"2014-12-01",pages:64,isbn:"978-1-60125-703-1",type:"setting"},{_id:"PZO9276",name:"Belkzen, Hold of the Orc Hordes",date:"2015-02-01",pages:64,isbn:"978-1-60125-710-9",type:"setting"},{_id:"PZO9278",name:"Tombs of Golarion",date:"2015-03-01",pages:64,isbn:"978-1-60125-720-8",type:"setting"},{_id:"PZO9279",name:"Andoran, Birthplace of Freedom",date:"2015-05-01",pages:64,isbn:"978-1-60125-721-5",type:"setting"},{_id:"PZO9283",name:"Inner Sea Monster Codex",date:"2015-06-01",pages:64,isbn:"978-1-60125-752-9",type:"setting"},{_id:"PZO9281",name:"Hell Unleashed",date:"2015-07-01",pages:64,isbn:"978-1-60125-757-4",type:"setting"},{_id:"PZO9284",name:"Occult Bestiary",date:"2015-09-01",pages:64,isbn:"978-1-60125-767-3",type:"setting"},{_id:"PZO9280",name:"Inner Sea Races",abbr:"ISR",date:"2015-09-01",pages:256,isbn:"978-1-60125-722-2",url:"http://paizo.com/products/btpy9g9v",type:"setting"},{_id:"PZO9285",name:"Distant Shores",date:"2015-10-01",pages:64,isbn:"978-1-60125-787-1",type:"setting"},{_id:"PZO9286",name:"Occult Realms",date:"2015-11-01",pages:64,isbn:"978-1-60125-794-9",type:"setting"},{_id:"PZO9287",name:"Cheliax, The Infernal Empire",date:"2015-12-01",pages:64,isbn:"978-1-60125-799-4",type:"setting"},{_id:"PZO9289",name:"Darklands Revisited",date:"2016-02-01",pages:64,isbn:"978-1-60125-819-9",type:"setting"},{_id:"PZO9290",name:"Inner Sea Faiths",date:"2016-03-01",pages:96,isbn:"978-1-60125-825-0",type:"setting"},{_id:"PZO9291",name:"Heaven Unleashed",date:"2016-04-01",pages:64,isbn:"978-1-60125-828-1",type:"setting"},{_id:"PZO9292",name:"Inner Sea Intrigue",date:"2016-05-01",pages:64,isbn:"978-1-60125-837-3",type:"setting"},{_id:"PZO9293",name:"Path of the Hellknight",date:"2016-06-01",pages:64,isbn:"978-1-60125-843-4",type:"setting"},{_id:"PZO9295",name:"Planes of Power",date:"2016-09-01",pages:64,isbn:"978-1-60125-883-0",type:"setting"},{_id:"PZO9296",name:"Inner Sea Temples",date:"2016-10-01",pages:64,isbn:"978-1-60125-893-9",type:"setting"},{_id:"PZO9297",name:"Horror Realms",date:"2016-11-01",pages:64,isbn:"978-1-60125-900-4",type:"setting"},{_id:"PZO9298",name:"The First World, Realm of the Fey",date:"2016-12-01",pages:64,isbn:"978-1-60125-909-7",type:"setting"},{_id:"PZO9299",name:"Qadira, Jewel of the East",date:"2017-01-01",pages:64,isbn:"978-1-60125-912-7",type:"setting"},{_id:"PZO92101",name:"Lands of Conflict",date:"2017-02-01",pages:64,isbn:"978-1-60125-927-1",type:"setting"},{_id:"PZO92102",name:"Aquatic Adventures",date:"2017-06-01",pages:64,isbn:"978-1-60125-944-8",type:"setting"},{_id:"PZO92105",name:"Taldor, the First Empire",date:"2017-12-01",pages:64,isbn:"978-1-60125-999-8",type:"setting"},{_id:"PZO92107",name:"Inner Sea Taverns",date:"2018-02-01",pages:64,isbn:"978-1-64078-016-3",type:"setting"},{_id:"PZO92108",name:"Nidal, Land of Shadows",date:"2018-04-01",pages:64,isbn:"978-1-64078-033-0",type:"setting"},{_id:"PZO92109",name:"Distant Realms",date:"2018-06-01",pages:64,isbn:"978-1-64078-046-0",type:"setting"},{_id:"PZO92111",name:"Sandpoint, Light of the Lost Coast",date:"2018-10-01",pages:64,isbn:"978-1-64078-080-4",type:"setting"},{_id:"PZO92104",name:"Construct Handbook",date:"2018-11-01",pages:64,isbn:"978-1-60125-989-9",type:"setting"},{_id:"PZO92112",name:"Faiths of Golarion",date:"2018-12-01",pages:64,isbn:"978-1-64078-099-6",type:"setting"},{_id:"PZO92114",name:"Concordance of Rivals",date:"2019-04-01",pages:64,isbn:"978-1-64078-127-6",type:"setting"},{_id:"PZO92116",name:"Druma, Profit and Prophecy",date:"2019-08-01",pages:64,isbn:"978-1-64078-141-2",type:"setting"},{_id:"DYN0031-E",name:"Worldscape #1",date:"2016-10-16",pages:32,type:"comic",url:"https://paizo.com/products/btpy9oco",publisher:"Dynamite Entertainment"},{_id:"DYN0032-E",name:"Worldscape #2",date:"2016-11-16",pages:32,type:"comic",url:"https://paizo.com/products/btpy9oza",publisher:"Dynamite Entertainment"},{_id:"DYN0033-E",name:"Worldscape #3",date:"2016-12-21",pages:32,type:"comic",url:"https://paizo.com/products/btpy9qcq",publisher:"Dynamite Entertainment"},{_id:"DYN0034-E",name:"Worldscape #4",date:"2017-01-25",pages:32,type:"comic",url:"https://paizo.com/products/btpy9qcu",publisher:"Dynamite Entertainment"},{_id:"DYN0035-E",name:"Worldscape #5",date:"2017-02-22",pages:32,type:"comic",url:"https://paizo.com/products/btpy9qcy",publisher:"Dynamite Entertainment"},{_id:"DYN0036-E",name:"Worldscape #6",date:"2017-04-05",pages:32,type:"comic",url:"https://paizo.com/products/btpy9sgk",publisher:"Dynamite Entertainment"},{_id:"DYN0046-HC",name:"Spiral of Bones",date:"2019-02-09",pages:136,type:"comic",isbn:"978-1-5241-0738-3",url:"https://paizo.com/products/btq01x8j",publisher:"Dynamite Entertainment"},{_id:"DYN0010-A",name:"Pathfinder Comics #10",date:"2013-10-23",pages:32,type:"comic",publisher:"Dynamite Entertainment"},{_id:"PZOPSS0310E",name:"Pathfinder Society Scenario #3–10: The Immortal Conundrum",date:"2011-11-01",pages:24,type:"pfs"},{_id:"PZOPSS0000E",name:"Pathfinder Society Roleplaying Guild Guide",date:"2019-08-09",pages:44,type:"pfs"}]}const Fe=Object.freeze(Object.defineProperty({__proto__:null,Condition,Conditions,DamageType,DamageTypes,MaterialType,MaterialTypes,Registry,RegistryEntry,ScriptCallCategory,ScriptCalls,Source,Sources,conditions:undefined,damageTypes:undefined,materialTypes:undefined,scriptCalls:undefined,sources:undefined},Symbol.toStringTag,{value:"Module"}));class MigrationCategory{state=null;id=null;label=null;isNumber=!1;processed=null;invalid=0;errors=[];current=null;total=null;ignored=0;completed=!1;constructor(e,t,s,a){this.state=a,this.id=e,this.label=game.i18n.localize(t),this.isNumber=s,s&&(this.total=0,this.processed=0)}startEntry(e){this.current=e,this.state.call(this,{entry:e,action:"process",actionState:"start",processing:this.processed+1})}finishEntry(e){this.current=null,this.processed+=1,this.state.call(this,{entry:e,action:"process",actionState:"finish",processed:this.processed})}recordError(e,t){this.errors.push({entry:e,error:t})}ignoreEntry(e){this.ignored+=1,this.state.call(this,{entry:e,action:"ignore"})}addIgnored(e){this.ignored+=e,this.state.call(this,{action:"info",ignored:e,total:this.total,invalid:this.invalid})}setTotal(e){this.total=e,this.state.call(this,{action:"info",total:e,ignored:this.ignored,invalid:this.invalid})}setInvalid(e){this.invalid=e,this.state.call(this,{action:"info",total:this.total,ignored:this.ignored,invalid:this.invalid})}start(){this.completed=!1,this.state.call(this,{action:"start"})}finish(){this.completed=!0,this.state.call(this,{action:"finish"})}get currentName(){const e=this.current;return e?e instanceof foundry.abstract.Document?e.name:e instanceof CompendiumCollection?e.metadata.label:null:null}getInvalidEntries(){let e;switch(this.id){case"actors":case"items":case"scenes":e=game[this.id];break;default:return[]}const t=[];for(const s of e.invalidDocumentIds)t.push({id:s,entry:e.getInvalid(s)});return t}getErrorEntries(){return this.errors}}class MigrationState{label;callbacks={};categories={};completed=!1;unlock=!1;constructor(e){e&&(e=game.i18n.localize(e)),this.label=e}createCategory(e,t,s){const a=new MigrationCategory(e,t,s,this);return this.categories[e]=a,this.call(a,{action:"new"}),a}call(e,t){for(const s of Object.values(this.callbacks))try{s(this,e,t)}catch(e){console.error(e,s)}}start(){this.completed=!1,this.call(this,{action:"start"})}finish(){this.completed=!0,this.call(this,{action:"finish"})}get errors(){return Object.values(this.categories).reduce(((e,t)=>e+t.errors.length),0)}get invalid(){return Object.values(this.categories).reduce(((e,t)=>e+t.invalid),0)}get ignored(){return Object.values(this.categories).reduce(((e,t)=>e+t.ignored),0)}}class MigrationIssuesDialog extends Dialog{static async open(e){const t={errors:e.getErrorEntries(),invalid:e.getInvalidEntries()};return this.prompt({title:game.i18n.localize("PF1.Migration.Dialog.Issues")+" – "+e.label,content:await renderTemplate("systems/pf1/templates/apps/migration-issues.hbs",t),rejectClose:!1,options:{classes:[...Dialog.defaultOptions.classes,"pf1","migration-issues"],jQuery:!1,width:620,height:"auto"}})}activateListeners(e){super.activateListeners(e),e.on("click",".issue .id a",(e=>{const t=e.target,{id:s,uuid:a}=t.dataset;game.clipboard.copyPlainText(a||s);const i=a?"UUID":"ID";ui.notifications.info(game.i18n.format("DOCUMENT.IdCopiedClipboard",{label:"",type:i,id:a||s}))}))}}class MigrationDialog extends Application{state;constructor(e,t){super(t),this.state=e,this.autoClose=t.autoClose??!1,e.callbacks[this.appId]=this._onMigration.bind(this)}get title(){const e=game.i18n.localize("PF1.Migration.Dialog.Title");return this.state.label?`${e}: ${this.state.label}`:e}get template(){return"systems/pf1/templates/apps/migration.hbs"}static get defaultOptions(){const e=super.defaultOptions;return{...e,classes:[...e.classes,"pf1","migration"],width:"auto",height:"auto",top:200,resizable:!0}}getData(){return{state:this.state}}activateListeners(e){super.activateListeners(e),this.state.completed&&this.autoClose&&setTimeout((()=>this.close()),2e3);e[0].querySelectorAll(".value.has-details").forEach((e=>{e.addEventListener("click",this._onClickForDetails.bind(this))}))}_onClickForDetails(e){e.preventDefault();const t=e.target.closest(".category").dataset.category,s=this.state.categories[t];MigrationIssuesDialog.open(s)}_onMigration(e,t){this._state===Application.RENDER_STATES.RENDERING?this._queueRender=!0:this.render()}async _render(...e){const t=await super._render(...e);return this._queueRender&&(this._queueRender=!1,this.render()),t}async close(...e){return delete this.state.callbacks[this.appId],super.close(...e)}static initialize(e,t,s={}){e??=new MigrationState(t),e.label||=t;const a=new this(e,{autoClose:s.autoClose??!1});return a.render(!0,s),a}}const Ce={"Compendium.pf1.class-abilities.OhHKCLQXoMlYNodk":"Compendium.pf1.class-abilities.Item.pEODJDoTk7uhCZY7","Compendium.pf1.class-abilities.fb00TzBa32sSisGb":"Compendium.pf1.class-abilities.Item.BoEkMviJrW0PKmhj","Compendium.pf1.class-abilities.4bcGnKYf9beV0nfa":"Compendium.pf1.class-abilities.Item.sTlu3zgAEDdJnER5","Compendium.pf1.class-abilities.dvQdP8QfrDA9Lxzk":"Compendium.pf1.class-abilities.Item.9EX00obqhGHcrOdp"},marker=()=>({pf1:{action:"migration"}});function initializeStateAndDialog(e,t,s=null){return e??=new MigrationState(t),s&&MigrationDialog.initialize(e,t,s),e}async function migrateActors({state:e,dialog:t=null,noHooks:s=!1}={}){s||Hooks.callAll("pf1MigrationStarted",{scope:"actors"});const a=!e;e??=initializeStateAndDialog(e,"PF1.Migration.Category.Actors",t),a&&e.start();const i=e.createCategory("actors","PF1.Migration.Category.Actors",!0);console.log("PF1 | Migration | Actors directory starting..."),i.start(),i.setTotal(game.actors.size),i.setInvalid(game.actors.invalidDocumentIds.size);for(const e of game.actors)if(e.isOwner){i.startEntry(e);try{const t=await migrateActorData(e.toObject(),void 0,{actor:e});foundry.utils.isEmpty(t)||(console.log(`PF1 | Migration | Actor: ${e.name} | Applying updates`),await e.update(t,marker()))}catch(t){i.recordError(e,t),console.error(`PF1 | Migration | Actor: ${e.name} | Error`,t)}i.finishEntry(e)}else i.ignoreEntry(e);console.log("PF1 | Migration | Actors directory complete!"),i.finish(),a&&e.finish(),s||Hooks.callAll("pf1MigrationFinished",{scope:"actors"})}async function migrateItems({state:e,dialog:t=null,noHooks:s=!1}={}){s||Hooks.callAll("pf1MigrationStarted",{scope:"items"});const a=!e;e??=initializeStateAndDialog(e,"PF1.Migration.Category.Items",t),a&&e.start();const i=e.createCategory("items","PF1.Migration.Category.Items",!0);console.log("PF1 | Migration | Items directory starting..."),i.start(),i.setTotal(game.items.size),i.setInvalid(game.items.invalidDocumentIds.size);for(const e of game.items)if(e.isOwner){i.startEntry(e);try{const t=await migrateItemData(e.toObject());foundry.utils.isEmpty(t)||(console.log(`PF1 | Migration | Item: ${e.name} | Applying updates`),await e.update(t,marker()))}catch(t){i.recordError(e,t),console.error(`PF1 | Migration | Item: ${e.name} | Error`,t)}i.finishEntry(e)}else i.ignoreEntry(e);i.finish(),a&&e.finish(),console.log("PF1 | Migration | Items directory complete!"),s||Hooks.callAll("pf1MigrationFinished",{scope:"items"})}async function migrateScenes({state:e,noHooks:t=!1,dialog:s=null}={}){t||Hooks.callAll("pf1MigrationStarted",{scope:"scenes"});const a=!e;e??=initializeStateAndDialog(e,"PF1.Migration.Category.Scenes",s),a&&e.start();const i=e.createCategory("scenes","PF1.Migration.Category.Scenes",!0);console.log("PF1 | Migration | Scene directory starting..."),i.start(),i.setTotal(game.scenes.size),i.setInvalid(game.scenes.invalidDocumentIds.size);for(const t of game.scenes)i.startEntry(t),await migrateScene(t,{state:e,tracker:i}),i.finishEntry(t);i.finish(),a&&e.finish(),console.log("PF1 | Migration | Scene directory complete!"),t||Hooks.callAll("pf1MigrationFinished",{scope:"scenes"})}async function migrateCompendiums(e=null,{unlock:t=!1,state:s,noHooks:a=!1,dialog:i=null}={}){a||Hooks.callAll("pf1MigrationStarted",{scope:"packs",packs:foundry.utils.deepClone(e)}),null===e&&(e=[...game.packs]);const n=!s;i&&(s=initializeStateAndDialog(s,"PF1.Migration.Category.Packs",i)),s&&(s.unlock=t),n&&s?.start();const o=s?.createCategory("packs","PF1.Migration.Category.Packs",!0);o?.start(),o?.setTotal(e.length);for(const s of e){o?.startEntry(s),!t&&s.locked&&o?.ignoreEntry(s);try{await migrateCompendium(s,{unlock:t,noHooks:!0})}catch(e){console.error(`PF1 | Migration | Pack: ${s.collection} | Error`,e)}o?.finishEntry(s)}o?.finish(),n&&s?.finish(),a||Hooks.callAll("pf1MigrationFinished",{scope:"packs",packs:foundry.utils.deepClone(e)})}function clearCoreMessages(e){ui.notifications.queue=ui.notifications.queue.filter((t=>!t.message.includes(e))),ui.notifications.active=ui.notifications.active.filter((e=>{return(t=e)instanceof jQuery&&(t=t[0]),!t.textContent.includes(s);var t,s})),ui.notifications.fetch()}async function migrateCompendium(e,{unlock:t=!1,noHooks:s=!1}={}){if("string"==typeof e&&!(e=game.packs.get(e)))throw Error(`Compendium "${e}" not found.`);if(e.locked&&!t)return;const a=e.metadata.type;if(!["Actor","Item","Scene"].includes(a))return;s||Hooks.callAll("pf1MigrationStarted",{scope:"pack",collection:e});const i=e.locked;i&&await e.configure({locked:!1}),await e.migrate(),clearCoreMessages("Compendium pack "+e.collection),console.log(`PF1 | Migration | Pack: ${e.collection} | Starting...`),console.debug(`PF1 | Migration | Pack: ${e.collection} | Requesting documents from server`);const n=await e.getDocuments(),o=[];console.debug(`PF1 | Migration | Pack: ${e.collection} | Building update data for ${n.length} document(s)`);for(const t of n)try{let e;switch(a){case"Item":e=await migrateItemData(t.toObject(),void 0,{item:t});break;case"Actor":e=await migrateActorData(t.toObject(),void 0,{actor:t});break;case"Scene":await migrateScene(t)}e&&!foundry.utils.isEmpty(e)&&(e._id=t.id,o.push(e))}catch(t){console.error(`PF1 | Migration | Pack: ${e.collection} | Error!`,t)}if(o.length){console.debug(`PF1 | Migration | Pack: ${e.collection} | Applying update(s) to ${o.length} document(s)`);try{await getDocumentClass(a).updateDocuments(o,{pack:e.collection,...marker()})}catch(t){console.error(`PF1 | Migration | Pack: ${e.collection} | Error:`,t)}}else console.debug(`PF1 | Migration | Pack: ${e.collection} | No updates needed`);i&&await e.configure({locked:!0}),s||Hooks.callAll("pf1MigrationFinished",{scope:"pack",collection:e}),console.log(`PF1 | Migration | Pack: ${e.collection} | Migration complete!`)}async function migrateTokenData(e,{token:t}){const s=e.flags?.pf1??{},a={};return void 0!==s.lowLightVision&&(a["flags.pf1.-=lowLightVision"]=null),void 0!==s.lowLightVisionMultiplier&&(a["flags.pf1.-=lowLightVisionMultiplier"]=null),void 0!==s.lowLightVisionMultiplierBright&&(a["flags.pf1.-=lowLightVisionMultiplierBright"]=null),!1===s.disableLowLight&&(a["flags.pf1.-=disableLowLight"]=null),!1===s.staticSize&&(a["flags.pf1.-=staticSize"]=null),!1===s.customVisionRules&&(a["flags.pf1.-=customVisionRules"]=null),s.customVisionRules||("basic"!==e.sight.visionMode&&(0!==e.sight.range&&(a["sight.range"]=0),a["sight.visionMode"]="basic"),"saturation"in e.sight&&(a["sight.-=saturation"]=null),"brightness"in e.sight&&(a["sight.-=brightness"]=null),"attenuation"in e.sight&&(a["sight.-=attenuation"]=null),"contrast"in e.sight&&(a["sight.-=contrast"]=null),e.detectionModes?.length&&(a.detectionModes=[])),foundry.utils.isEmpty(a)||(a["flags.pf1.migration"]=game.system.version),a}async function migrateToken(e){const t=e.toObject(),s=await migrateTokenData(t,{token:e});if(!foundry.utils.isEmpty(s))return e.update(foundry.utils.expandObject(s),marker())}async function migrateActiveEffectsToItems(e){const t=[];for(const s of e.itemTypes.buff)if(s.isActive)try{const e=s.effect;if(!e)continue;if(e.parent===s)continue;const a=e.toObject();setProperty(a,"flags.pf1.tracker",!0),a.transfer=!0;const i=ActiveEffect.implementation.create(a,{parent:s}),n=e.delete();t.push(i,n)}catch(e){console.error("PF1 | Migration | Failed to transition buff tracker to origin",e)}await Promise.all(t)}async function migrateActorData(e,t,{actor:s}={}){if("basic"===e.type)return{};if(!game.system.template.Actor.types.includes(e.type))return{};const a={};_migrateCharacterLevel(e,a),_migrateActorEncumbrance(e,a),_migrateActorNoteArrays(e,a),_migrateActorSpeed(e,a),_migrateActorSpellbookCL(e,a),_migrateActorSpellbookSlots(e,a),function _migrateActorSpellbookPrep(e,t){for(const[s,a]of Object.entries(foundry.utils.getProperty(e.system,"attributes.spells.spellbooks")||{})){const e=a.spontaneous;if(void 0===e)continue;const i=a.autoSpellLevelCalculation??!1,n=!0===a.spellPoints.useSystem;i||n||(t[`system.attributes.spells.spellbooks.${s}.spellPreparationMode`]=e?"spontaneous":"prepared",t[`system.attributes.spells.spellbooks.${s}.casterType`]="high"),t[`system.attributes.spells.spellbooks.${s}.-=spontaneous`]=null}}(e,a),function _migrateActorSpellbookKind(e,t,s){for(const[a,i]of Object.entries(foundry.utils.getProperty(e.system,"attributes.spells.spellbooks")||{}))if(void 0===i.kind&&i.inUse){const e=i.class&&"_hd"!==i.class?s.itemTypes.class.find((e=>e.system.tag===i.class)):null;let n=e?.system.casting?.spells;n||(n="arcane",i.arcaneSpellFailure?n="arcane":i.psychic?n="psychic":"prepared"===i.spellPreparationMode&&"int"===i.ability?n="alchemy":"_hd"!==i.class&&(n="divine")),t[`system.attributes.spells.spellbooks.${a}.kind`]=n}}(e,a,s),_migrateActorConcentration(e,a),_migrateActorBaseStats(e,a),_migrateUnusedActorCreatureType(e,a),_migrateActorSpellbookDCFormula(e,a),_migrateActorHPAbility(e,a),_migrateActorCR(e,a),_migrateAttackAbility(e,a),_migrateActorDefenseAbility(e,a),_migrateActorSpellbookUsage(e,a),_migrateActorNullValues(e,a),_migrateActorSpellbookDomainSlots(e,a),_migrateActorStatures(e,a),_migrateActorProficiencies(e,a,{actor:s}),_migrateActorInitAbility(e,a),_migrateActorChangeRevamp(e,a),_migrateActorCMBRevamp(e,a),_migrateCarryBonus(e,a),_migrateBuggedValues(e,a),_migrateSpellbookUsage(e,a),_migrateActorHP(e,a),_migrateActorSenses(e,a,t),_migrateActorInvaliddSkills(e,a),_migrateActorSkillRanks(e,a),_migrateActorSkillJournals(e,a),_migrateActorSubskillData(e,a),_migrateActorUnusedData(e,a),_migrateActorDRandER(e,a),_migrateActorTraitsCustomToArray(e,a),_migrateActorFlags(e,a);const i=[];for(const t of e.items??[]){const a=t instanceof Item?t.toObject():t,n=s?.items.get(a._id);try{const e=await migrateItemData(a,s,{item:n});foundry.utils.isEmpty(e)||(e._id=a._id,i.push(foundry.utils.expandObject(e)))}catch(i){throw console.error(`Error migrating Item "${t.name}" [${n?.uuid??a._id}] on actor "${e.name}" [${s?.uuid??e._id}]`),Error(`Item "${t.name}" [${a._id}] failed migration: ${i.message}`,{cause:i})}}return i.length>0&&(a.items=i),await _migrateActorActiveEffects(e,a,s),foundry.utils.isEmpty(a)||(a["flags.pf1.migration"]=game.system.version),foundry.utils.expandObject(a)}async function migrateItemData(e,t=null,{item:s,_depth:a=0}={}){const i={};if(null==e.system&&null!=e.data&&((e=foundry.utils.deepClone(e)).system=e.data,delete e.data),!game.system.template.Item.types.includes(e.type))return{};_migrateItemArrayTypes(e,i),_migrateFlagsArrayToObject(e,i),_migrateWeaponImprovised(e,i),_migrateItemSpellDescription(e,i),_migrateClassDynamics(e,i),_migrateClassType(e,i),function _migrateClassCasting(e,t){const s=e.system?.casting;if(!s)return;if(!s.type)return void(t["system.-=casting"]=null);void 0!==s.domainSlots&&(t["system.casting.domain"]=s.domain??s.domainSlots??1,t["system.casting.-=domainSlots"]=null)}(e,i),_migrateSpellDivineFocus(e,i),_migrateWeaponCategories(e,i),_migrateArmorCategories(e,i),_migrateArmorMaxDex(e,i),_migrateItemSize(e,i),_migrateItemFeatAbilityTypes(e,i),_migrateClassLevels(e,i),_migrateSavingThrowTypes(e,i),_migrateCR(e,i),_migrateItemChanges(e,i),_migrateItemChangeFlags(e,i),_migrateItemContextNotes(e,i),_migrateEquipmentSize(e,i),_migrateSpellCosts(e,i),function _migrateSpellPreparation(e,t,{item:s=null}={}){if("spell"!==e.type)return;const a=s?.spellbook,i=a?.spellPreparationMode||"prepared",n=!a?.spellPoints?.useSystem&&"prepared"===i,o=e.system.preparation??{};void 0!==o.maxAmount&&(o.max>0||("number"!=typeof o.maxAmount&&(o.maxAmount=0),t["system.preparation.max"]=o.maxAmount??0),t["system.preparation.-=maxAmount"]=null);void 0!==o.spontaneousPrepared&&(o.value>0||n||(t["system.preparation.value"]=o.spontaneousPrepared?1:0),t["system.preparation.-=spontaneousPrepared"]=null);void 0!==o.preparedAmount&&(o.value>0||!n||(t["system.preparation.value"]=Math.max(o.preparedAmount,t["system.preparation.value"]||0)),t["system.preparation.-=preparedAmount"]=null)}(e,i,{item:s}),_migrateLootEquip(e,i),_migrateItemLinks(e,i,{item:s,actor:t}),_migrateItemProficiencies(e,i),_migrateItemNotes(e,i),_migrateScriptCalls(e,i),_migrateItemActions(e,i,t),_migrateItemChargeCost(e,i),_migrateItemLimitedUses(e,i),_migrateItemWeight(e,i),_migrateItemHealth(e,i),_migrateContainerReduction(e,i),_migrateContainerPrice(e,i),_migrateItemType(e,i),_migrateItemLearnedAt(e,i),_migrateItemTuples(e,i),_migrateEquipmentCategories(e,i),_migrateSpellDescriptors(e,i),_migrateItemTraitsCustomToArray(e,i),_migrateItemChangeFlags(e,i),_migrateItemMaterials(e,i),_migrateItemUnusedData(e,i);const n=e.system.actions instanceof Array&&e.system.actions.length>0?e.system.actions:i["system.actions"];if(n instanceof Array){const t=n.map((t=>migrateItemActionData(t,i,{itemData:e,item:s})));foundry.utils.isEmpty(foundry.utils.diffObject(n,t))&&foundry.utils.isEmpty(foundry.utils.diffObject(t,n))||(i["system.actions"]=t)}if(e.system?.inventoryItems instanceof Array){i["system.items"]={};for(const n of e.system.inventoryItems){n._id||=foundry.utils.randomID(16),n.system??={};try{"data"in n&&(n.system=foundry.utils.mergeObject(n.data,n.system,{inplace:!1}),delete n.data);const e=new Item.implementation(n),s=await migrateItemData(e.toObject(),t,{_depth:a+1});e.updateSource(s),i["system.items"][n._id]=e.toObject()}catch(e){console.error("Failed to migrate container content:",{item:n,parent:s,actor:t})}}i["system.-=inventoryItems"]=null}return await(async e=>{if(e)for(const[n,o]of Object.entries(e))try{const e=new Item.implementation(o),s=await migrateItemData(e.toObject(),t,{item:e,_depth:a+1});if(!foundry.utils.isEmpty(s)){const t=e.updateSource(s);i["system.items"]??={},i["system.items"][n]=t}}catch(e){console.error("PF1 | Migration | Error",e,s)}})(e.system.items),foundry.utils.isEmpty(i)||(i["flags.pf1.migration"]=game.system.version),i}const migrateItemActionData=function(e,t,{itemData:s,item:a=null}={}){return((e,t)=>{e.actionType||="other"})(e=foundry.utils.mergeObject(pf1.components.ItemAction.defaultData,e)),((e,t)=>{"unlimited"===e.uses?.self?.per&&delete e.uses.self.per;const s=CONFIG.Item.documentClasses[t.type]?.isPhysical;s||"single"===e.uses?.self?.per&&(e.uses.self.per="charges",e.uses.self.maxFormula="1")})(e,s),((e,t)=>{const s=e.range?.value;null===s||""===s?delete e.range.value:void 0!==s&&"string"!=typeof s&&(e.range.value=s+"")})(e),_migrateActionDamageParts(e),_migrateUnchainedActionEconomy(e),_migrateActionDamageType(e),_migrateActionConditionals(e),_migrateActionEnhOverride(e),_migrateActionPrimaryAttack(e,s),_migrateActionChargeUsage(e),_migrateActionExtraAttacks(e),_migrateActionAmmunitionUsage(e,s,t),_migrateActionHarmlessSpell(e),_migrateActionSpellArea(e),_migrateActionTemplate(e),_migrateActionDuration(e),_migrateActionMaterials(e),_migrateActionObsoleteTypes(e),_migrateActionUnusedData(e),e};async function migrateScene(e,{state:t,tracker:s}={}){console.log(`PF1 | Migration | Scene: ${e.name} | Starting...`);try{await migrateSceneTokens(e,{state:t,tracker:s}),await migrateSceneActors(e,{state:t,tracker:s}),game.user.isGM&&await e.setFlag("pf1","migration",game.system.version)}catch(t){s?.recordError(e,t),console.error(`PF1 | Migration | Scene: ${e.name} | Error`,t)}console.log(`PF1 | Migration | Scene: ${e.name} | Complete!`)}async function migrateSceneTokens(e,{state:t=null,tracker:s=null}={}){for(const t of e.tokens)if(t.isOwner)try{await migrateToken(t)}catch(a){s?.recordError(t,a),console.error(`PF1 | Migration | Scene: ${e.name} | Token: ${t.id} | Error`,t,a)}}async function migrateSceneActors(e,{state:t=null,tracker:s=null}={}){for(const t of e.tokens){if(t.isLinked)continue;const a=t.actor;if(a?.isOwner)try{const e=await migrateActorData(a.toObject(),t,{actor:a});if(!foundry.utils.isEmpty(e)){const t=e.items;delete e.items;const s=e.effects;delete e.effects,foundry.utils.isEmpty(e)||await a.update(e,marker()),t?.length&&await a.updateEmbeddedDocuments("Item",t,marker()),s?.length&&await a.updateEmbeddedDocuments("ActiveEffect",s,marker())}}catch(a){s?.recordError(t,a),console.error(`PF1 | Migration | Scene: ${e.name} | Token: ${t.id} | Error`,t,a)}}}const _migrateCharacterLevel=function(e,t){const s=["details.level.value","details.level.min","details.level.max","details.mythicTier"];for(const a of s){null==foundry.utils.getProperty(e.system,a)&&(t["system."+a]=0)}},_migrateActorEncumbrance=function(e,t){const s={"system.attributes.encumbrance.level":"attributes.encumbrance.-=level","system.attributes.encumbrance.levels.light":"attributes.encumbrance.levels.-=light","system.attributes.encumbrance.levels.medium":"attributes.encumbrance.levels.-=medium","system.attributes.encumbrance.levels.heavy":"attributes.encumbrance.levels.-=heavy","system.attributes.encumbrance.levels.carry":"attributes.encumbrance.levels.-=carry","system.attributes.encumbrance.levels.drag":"attributes.encumbrance.levels.-=drag","system.attributes.encumbrance.carriedWeight":"attributes.encumbrance.-=carriedWeight"};for(const[a,i]of Object.entries(s)){void 0!==foundry.utils.getProperty(e,a)&&(t["system."+i]=null)}},_migrateFlagsArrayToObject=function(e,t){const s=e.system.flags;if(!s)return;const a=s.boolean,i=s.dictionary;Array.isArray(a)&&(t["system.flags.boolean"]=a.reduce(((e,t)=>(e[t]=!0,e)),{})),Array.isArray(i)&&(t["system.flags.dictionary"]=i.reduce(((e,[t,s])=>(e[t]=s,e)),{}))},_migrateActorNoteArrays=function(e,t){const s=["system.attributes.acNotes","system.attributes.cmdNotes","system.attributes.srNotes"];for(const a of s){const s=foundry.utils.getProperty(e,a);foundry.utils.hasProperty(e,a)&&s instanceof Array&&(t[a]=s.join("\n"))}},_migrateActorSpeed=function(e,t){const s=["attributes.speed.land","attributes.speed.climb","attributes.speed.swim","attributes.speed.fly","attributes.speed.burrow"];for(const a of s){let s=foundry.utils.getProperty(e.system,a);"string"==typeof s&&(s=parseInt(s)),"number"==typeof s?t[`system.${a}.base`]=s:null===s?t[`system.${a}.base`]=0:void 0!==s?.total&&(t[`system.${a}.-=total`]=null),"attributes.speed.fly"===a&&void 0===foundry.utils.getProperty(e.system,a+".maneuverability")&&(t[`system.${a}.maneuverability`]="average")}},_migrateActorSpellbookSlots=function(e,t){for(const s of Object.keys(foundry.utils.getProperty(e.system,"attributes.spells.spellbooks")||{})){null==foundry.utils.getProperty(e.system,`attributes.spells.spellbooks.${s}.autoSpellLevels`)&&(t[`system.attributes.spells.spellbooks.${s}.autoSpellLevels`]=!0);for(let a=0;a<10;a++){const i=`system.attributes.spells.spellbooks.${s}.spells.spell${a}.base`,n=`system.attributes.spells.spellbooks.${s}.spells.spell${a}.max`,o=foundry.utils.getProperty(e,i),r=foundry.utils.getProperty(e,n);if(void 0===o)"number"==typeof r&&r>0&&(t[i]=r.toString());else{const e=parseInt(o);e>0?e!==o&&(t[i]=e):t[`system.attributes.spells.spellbooks.${s}.spells.spell${a}.-=base`]=null}}}};const _migrateActorBaseStats=function(e,t){const s=["system.attributes.hp.base","system.attributes.hd.base","system.attributes.savingThrows.fort.value","system.attributes.savingThrows.ref.value","system.attributes.savingThrows.will.value"];for(const a of s)if(("system.attributes.hp.base"!==a||(foundry.utils.getProperty(e,"items")||[]).filter((e=>"class"===e.type)).length)&&void 0!==foundry.utils.getProperty(e,a)){const e=a.split(".");e[e.length-1]="-="+e[e.length-1],t[e.join(".")]=null}},_migrateUnusedActorCreatureType=function(e,t){null!=foundry.utils.getProperty(e.system,"attributes.creatureType")&&(t["system.attributes.-=creatureType"]=null)},_migrateActorSpellbookDCFormula=function(e,t){const s=Object.keys(foundry.utils.getProperty(e.system,"attributes.spells.spellbooks")||{});for(const a of s){const s=`system.attributes.spells.spellbooks.${a}.baseDCFormula`;foundry.utils.getProperty(e,s)||(t[s]="10 + @sl + @ablMod")}},_migrateActorSpellbookCL=function(e,t){const s=Object.keys(foundry.utils.getProperty(e.system,"attributes.spells.spellbooks")||{});for(const a of s){const s=`system.attributes.spells.spellbooks.${a}.cl`,i=parseInt(foundry.utils.getProperty(e,s+".base")),n=foundry.utils.getProperty(e,s+".formula");i>0&&(n.length>0?t[s+".formula"]=n+" + "+i:t[s+".formula"]=n+i,t[s+".base"]=0)}},_migrateActorConcentration=function(e,t){const s=Object.keys(foundry.utils.getProperty(e.system,"attributes.spells.spellbooks")||{});for(const a of s){const s="system.attributes.spells.spellbooks."+a,i=foundry.utils.getProperty(e,s+".concentration"),n="string"==typeof i;if((Number.isFinite(i)||n)&&(t[s+".-=concentration"]=null),n){const a=s+".concentrationFormula",n=[i];n.push(foundry.utils.getProperty(e,a)||""),t[a]=n.filter((e=>0!==e&&e?.toString().trim().length)).join(" + ")}}},_migrateActorHPAbility=function(e,t){void 0===foundry.utils.getProperty(e.system,"attributes.hpAbility")&&(t["system.attributes.hpAbility"]="con"),void 0===foundry.utils.getProperty(e.system,"attributes.savingThrows.fort.ability")&&(t["system.attributes.savingThrows.fort.ability"]="con"),void 0===foundry.utils.getProperty(e.system,"attributes.savingThrows.ref.ability")&&(t["system.attributes.savingThrows.ref.ability"]="dex"),void 0===foundry.utils.getProperty(e.system,"attributes.savingThrows.will.ability")&&(t["system.attributes.savingThrows.will.ability"]="wis")},_migrateItemArrayTypes=function(e,t){const s=e.system.conditionals;null==s||s instanceof Array||(t["system.conditionals"]=[]);const a=e.system.contextNotes;null==a||a instanceof Array||(t["system.contextNotes"]=a instanceof Object?Object.values(a):[])},_migrateWeaponImprovised=function(e,t){if("weapon"!==e.type)return;"improv"===foundry.utils.getProperty(e.system,"weaponType")&&(t["system.weaponType"]="misc",t["system.properties.imp"]=!0)},_migrateItemSpellDescription=function(e,t){"spell"===e.type&&e.system.shortDescription&&(t["system.-=shortDescription"]=null,t["system.description.value"]=e.system.shortDescription)},_migrateSpellDivineFocus=function(e,t){if("spell"!==e.type)return;const s=foundry.utils.getProperty(e.system,"components.divineFocus");"boolean"==typeof s&&(t["system.components.divineFocus"]=Number(s))},_migrateClassDynamics=function(e,t){if("class"!==e.type)return;"number"==typeof e.system.bab&&(t["system.bab"]="low");const s=["system.savingThrows.fort.value","system.savingThrows.ref.value","system.savingThrows.will.value"];for(const a of s){"number"==typeof foundry.utils.getProperty(e,a)&&(t[a]="low")}},_migrateClassType=function(e,t){"class"===e.type&&void 0!==e.system.classType&&void 0===e.system.subType&&(t["system.subType"]="base")};const _migrateWeaponCategories=function(e,t){if("weapon"!==e.type)return;const s=e.system.weaponType;"misc"===s?(t["system.weaponType"]="misc",t["system.weaponSubtype"]="other"):"splash"===s&&(t["system.weaponType"]="misc",t["system.weaponSubtype"]="splash");const a=["simple","martial","exotic"].includes(s);a&&null==e.system.weaponSubtype&&(t["system.weaponSubtype"]="1h");const i=foundry.utils.getProperty(e.system,"properties.lgt");null!=i&&(t["system.properties.-=lgt"]=null,!0===i&&a&&(t["system.weaponSubtype"]="light"));const n=foundry.utils.getProperty(e.system,"properties.two");null!=n&&(t["system.properties.-=two"]=null,!0===n&&a&&(t["system.weaponSubtype"]="2h"));const o=foundry.utils.getProperty(e.system,"weaponData.isMelee");null!=o&&(t["system.weaponData.-=isMelee"]=null,!1===o&&a&&(t["system.weaponSubtype"]="ranged"))},_migrateArmorCategories=function(e,t){if("equipment"!==e.type)return;const s=foundry.utils.getProperty(e.system,"armor.type");null!=s&&("clothing"===s?(t["system.equipmentType"]="misc",t["system.equipmentSubtype"]="clothing"):"shield"===s?(t["system.equipmentType"]="shield",t["system.equipmentSubtype"]="lightShield"):"misc"===s?(t["system.equipmentType"]="misc",t["system.equipmentSubtype"]="wondrous"):["light","medium","heavy"].includes(s)&&(t["system.equipmentType"]="armor",t["system.equipmentSubtype"]=s+"Armor"),t["system.armor.-=type"]=null)},_migrateArmorMaxDex=(e,t)=>{if("equipment"!==e.type)return;let s=e.system.armor?.dex;null!=s&&"number"!=typeof s&&(s=parseInt(s),Number.isInteger(s)?t["system.armor.dex"]=s:t["system.armor.-=dex"]=null)},_migrateEquipmentCategories=(e,t)=>{if("equipment"!==e.type)return;if("misc"===(t["system.subType"]??e.system.subType))switch(e.system.equipmentSubtype){case"wondrous":t["system.subType"]="wondrous",t["system.-=equipmentSubtype"]=null;break;case"clothing":t["system.subType"]="clothing",t["system.-=equipmentSubtype"]=null;break;case"other":t["system.subType"]="other",t["system.-=equipmentSubtype"]=null}},_migrateSpellDescriptors=(e,t)=>{if("spell"!==e.type||void 0===e.system.types)return;const s=e.system.types.split(",").flatMap((e=>e.split(";"))).filter((e=>e)).map((e=>e.trim())),a=[],i=[],n=Object.entries(pf1.config.spellDescriptors);s.forEach((e=>{const t=n.find((([t,s])=>e.toLowerCase()===t.toLowerCase()||e.toLowerCase()===s.toLowerCase()));t?a.push(t[0]):i.push(e)})),t["system.-=types"]=null,t["system.descriptors.value"]=a,t["system.descriptors.custom"]=i.join("; ")},_migrateItemSize=function(e,t){if("weapon"===e.type){const s=foundry.utils.getProperty(e.system,"weaponData.size");if(s)return t["system.size"]=s,void(t["system.weaponData.-=size"]=null)}const s=e.system.size;["spell","class","buff","feat"].includes(e.type)?void 0!==s&&(t["system.-=size"]=null):void 0===s&&(t["system.size"]="med")},_migrateItemFeatAbilityTypes=function(e,t){if("feat"!==e.type)return;const s=e.system.abilityType;void 0===pf1.config.abilityTypes[s]&&(t["system.abilityType"]="na")},_migrateClassLevels=function(e,t){const s=e.system.levels;"number"==typeof s&&null==e.system.level&&(t["system.level"]=s,t["system.-=levels"]=null)},_migrateSavingThrowTypes=function(e,t){if(null==foundry.utils.getProperty(e.system,"save.type")&&"string"==typeof foundry.utils.getProperty(e.system,"save.description")){const s=foundry.utils.getProperty(e.system,"save.description");s.match(/REF/i)?t["system.save.type"]="ref":s.match(/FORT/i)?t["system.save.type"]="fort":s.match(/WILL/i)&&(t["system.save.type"]="will")}},_migrateCR=function(e,t){const s=e.system.crOffset;"number"==typeof s&&(t["system.crOffset"]=s.toString())},_migrateItemChanges=function(e,t){const s=e.system.changes;if(Array.isArray(s)){const e=[];for(const t of s)if(Array.isArray(t)){const s=new ItemChange({formula:t[0],target:t[1],subTarget:t[2],modifier:t[3]});e.push(s.toObject())}else{const s=foundry.utils.deepClone(t);"="===s.operator&&(s.operator="set"),"+"===s.operator&&(s.operator="add"),delete s.value,e.push(new ItemChange(s).toObject())}foundry.utils.isEmpty(foundry.utils.diffObject(s,e))&&foundry.utils.isEmpty(foundry.utils.diffObject(e,s))||(t["system.changes"]=e)}const a=t["system.changes"]??e.system?.changes??[],i=[];let n=!1;for(const e of a){const t={...e};/\.subSkills\./.test(e.subTarget)&&(t.subTarget=e.subTarget.replace(".subSkills.","."),n=!0),"penalty"===e.modifier&&(["str","dex","con","int","wis","cha"].includes(e.subTarget)&&(t.subTarget=e.subTarget+"Pen"),t.modifier="untyped",n=!0),i.push(t)}n&&(t["system.changes"]=i)},_migrateItemContextNotes=(e,t)=>{const s=e.system.contextNotes;if(Array.isArray(s)&&s?.length>0){const e=[];for(const t of s){let s=foundry.utils.deepClone(t);Array.isArray(t)&&(s={text:t[0],target:t[1],subTarget:t[2]}),s=new pf1.components.ContextNote(s).toObject(),e.push(s)}foundry.utils.isEmpty(foundry.utils.diffObject(s,e))&&foundry.utils.isEmpty(foundry.utils.diffObject(e,s))||(t["system.contextNotes"]=e)}const a=t["system.contextNotes"]??s??[];let i=!1;const n=[];for(const e of a){const t={...e};/^skill\..+\.subSkills\..+$/.test(e.target)&&(t.target=e.target.replace(".subSkills.","."),i=!0),n.push(t)}i&&(t["system.contextNotes"]=n)},_migrateItemChangeFlags=(e,t)=>{const s=e.system?.changeFlags;s&&void 0!==s.noEncumbrance&&(!0===s.noEncumbrance&&(t["system.changeFlags.noMediumEncumbrance"]=!0,t["system.changeFlags.noHeavyEncumbrance"]=!0),t["system.changeFlags.-=noEncumbrance"]=null)},_migrateEquipmentSize=function(e,t){if("equipment"!==e.type)return;e.system.size||(t["system.size"]="med")},_migrateItemWeight=function(e,t){const s=e.system.baseWeight,a=e.system.weight,i=CONFIG.Item.documentClasses[e.type]?.isPhysical;i?(Number.isFinite(a)?t["system.weight.value"]=a:null!=a&&"object"==typeof a||(t["system.weight.value"]=0),void 0!==s&&(Number.isFinite(s)&&s>0&&(t["system.weight.value"]=s),t["system.-=baseWeight"]=null)):void 0!==a&&(t["system.-=weight"]=null)},_migrateItemHealth=function(e,t){const s=CONFIG.Item.documentClasses[e.type]?.isPhysical,a=e.system.hp;s?a?("string"==typeof a.max&&(t["system.hp.max"]=parseInt(a.max)),"string"==typeof a.value&&(t["system.hp.value"]=parseInt(a.value))):(t["system.hp.value"]=10,t["system.hp.max"]=10):"class"!==e.type&&void 0!==a&&(t["system.-=hp"]=null)},_migrateSpellCosts=function(e,t){if("spell"!==e.type)return;null==foundry.utils.getProperty(e.system,"spellPoints.cost")&&(t["system.spellPoints.cost"]="1 + @sl");null==e.system.slotCost&&(t["system.slotCost"]=1);const s=e.system.preparation?.autoDeductCharges;void 0!==s&&(!1===s&&(t["system.uses.autoDeductChargesCost"]="0"),t["system.preparation.-=autoDeductCharges"]=null)};const _migrateLootEquip=function(e,t){"loot"!==e.type||e.system.equipped||(t["system.equipped"]=!1)},_migrateUnchainedActionEconomy=(e,t)=>{e.activation??={},e.unchainedAction?.activation&&(e.activation.unchained=e.unchainedAction.activation,delete e.unchainedAction)},_migrateItemLinks=function(e,t,{item:s,actor:a}){const i=e.system.links??{};for(const[e,s]of Object.entries(i)){let i=!1;const n=foundry.utils.deepClone(s);for(const e of n){const t=e.dataType;if(void 0!==t&&("data"===t?delete e.dataType:"world"===t?(e.uuid=e.id.replace(/^world\./,"Item."),delete e.id,delete e.dataType):"compendium"===t&&(e.uuid="Compendium."+e.id,delete e.id,delete e.dataType),delete e.img,i=!0),void 0!==e.id&&a&&(e.uuid=a?.items?.get(e.id)?.getRelativeUUID(a),delete e.id,i=!0),a&&e.uuid){let t=fromUuidSync(e.uuid,{relative:a});if(t?.actor){t.actor!==a&&(t=a.items.get(t.id));const s=t?.getRelativeUUID(a);t&&s!==e.uuid&&(e.uuid=s,i=!0)}}if(e.uuid){const t=Ce[e.uuid];t&&(e.uuid=t,i=!0)}void 0!==e._index&&(delete e._index,i=!0),void 0!==e.hiddenLinks&&(delete e.hiddenLinks,i=!0)}i&&(t["system.links."+e]=n)}},_migrateItemProficiencies=function(e,t){const s={sim:"simple",mar:"martial"},a=Object.keys(s);if(e.system.weaponProf?.value?.some((e=>a.includes(e)))){const a=e.system.weaponProf.value.map((e=>s[e]||e));t["system.weaponProf.value"]=a}},_migrateItemNotes=function(e,t){const s=["system.attackNotes","system.effectNotes"];for(const a of s){const s=foundry.utils.getProperty(e,a);!foundry.utils.hasProperty(e,a)||s instanceof Array||(t[a]=[],"string"==typeof s&&s.length>0&&(t[a]=s.trim().split(/[\n\r]/)))}},_migrateItemActions=function(e,t,s=null){const a=!!e.system.actionType||!!e.system.activation?.type||!!e.system.measureTemplate?.type,i=e.system.actions instanceof Array&&e.system.actions.length>0;if(!a&&"spell"!==e.type||i)return;const n=pf1.components.ItemAction.defaultData,o=["_id","name","img"];for(const t of Object.keys(n))o.includes(t)||null!=e.system[t]&&(n[t]=foundry.utils.deepClone(e.system[t]));if(["weapon","attack"].includes(e.type)?n.name=game.i18n.localize("PF1.Attack"):n.name=game.i18n.localize("PF1.Use"),n.img=e.img,n.description="","spell"===e.type&&(n.activation.type||="standard",n.duration.value=e.system.spellDuration,null!=s)){const t=e.system.spellbook,a=s.system.attributes?.spells?.spellbooks?.[t];if(a.spellPoints?.useSystem){const t=e.system.spellPoints?.cost;t&&(n.uses.autoDeductChargesCost=t)}}const r=n.powerAttack?.multiplier;"string"==typeof r&&(""===r?delete n.powerAttack.multiplier:n.powerAttack.multiplier=parseInt(r)),t["system.attackNotes"]=[],t["system.effectNotes"]=[],t["system.actions"]=[n]},_migrateScriptCalls=(e,t)=>{if(!(e.system.scriptCalls?.length>0))return;let s=!1;const a=foundry.utils.deepClone(e.system.scriptCalls);for(const e of a)"macro"==e.type&&(e.name||e.img)&&(e.name="",e.img="",s=!0);s&&(t["system.scriptCalls"]=a)},_migrateItemLearnedAt=(e,t)=>{const s=e.system.learnedAt??{};for(const[e,a]of Object.entries(s))Array.isArray(a)&&(t["system.learnedAt."+e]=a.reduce(((e,[t,s])=>{if("string"!=typeof t||0==t.length)return e;for(let a of t.split("/"))a=a.trim().replace(".","-"),a&&(e[a]=s);return e}),{}))},_migrateActionChargeUsage=function(e,t){void 0!==e.uses?.autoDeductCharges&&(!1===e.uses.autoDeductCharges?e.uses.autoDeductChargesCost="0":"1"===e.uses.autoDeductChargesCost&&(e.uses.autoDeductChargesCost=""),delete e.uses.autoDeductCharges)},_migrateActionAmmunitionUsage=function(e,t,s){!1===e.usesAmmo&&delete e.ammoType,!0===e.usesAmmo&&(t.system.ammo?.type||s["system.ammo.type"]||(s["system.ammo.type"]=e.ammoType,e.ammoType=""),t.system.ammo?.type==e.ammoType&&delete e.ammoType),e.ammoType&&(e.ammo??={},e.ammo.type=e.ammoType),delete e.ammoType,e.ammo&&!e.ammo.type&&delete e.ammo.type,delete e.usesAmmo},_migrateActionHarmlessSpell=(e,t)=>{e.save.description&&/\bharmless\b/.test(e.save.description)&&(e.save.description=e.save.description.replace(/\s*\bharmless\b\s*/,"").replace(/\(,\s*/,"(").replace(/\s*,\)/,")").replace("()","").trim(),e.save.harmless=!0)},_migrateActionSpellArea=(e,t)=>{e.area||=e.spellArea,delete e.spellArea},_migrateActionTemplate=(e,t)=>{const s=e.measureTemplate;s&&(s.color||=s.customColor,delete s.overrideColor,delete s.customColor,s.texture||=s.customTexture,delete s.overrideTexture,delete s.customTexture)},_migrateActionDuration=(e,t)=>{if(e.duration??={},"null"===e.duration.value&&(e.duration.value=""),!e.duration.units&&e.duration.value&&(e.duration.units="spec"),"instantaneous"===e.duration.value&&(delete e.duration.value,e.duration.units="inst"),"spec"===e.duration.units){switch(e.duration.value||""){case"1 round":case"1 full round":e.duration.value="1",e.duration.units="round";break;case"1 min.":case"1 minute":e.duration.value="1",e.duration.units="minute";break;case"1 hour":e.duration.value="1",e.duration.units="hour";break;case"8 hours":e.duration.value="8",e.duration.units="hour";break;case"24 hours":e.duration.value="24",e.duration.units="hour";break;case"1 day":e.duration.value="1",e.duration.units="day";break;case"permanent":delete e.duration.value,e.duration.units="perm";break;case"see below":case"see text":delete e.duration.value,e.duration.units="seeText"}}},_migrateActionMaterials=(e,t)=>{const s=e.material?.addon;if(s){const t="throneglass";e.material.addon.includes(t)&&(e.material.addon=e.material.addon.filter((e=>e!==t)),e.material.normal.value||=t)}},_migrateActionExtraAttacks=(e,t)=>{if(e.attackParts?.length){const t=e.attackParts??[];t.some((e=>Array.isArray(e)))&&(e.attackParts=t.map((e=>Array.isArray(e)?{formula:e[0],name:e[1]}:e)));for(const t of e.attackParts)t.formula=""+t.formula}e.extraAttacks??={},void 0!==e.attackParts&&(e.extraAttacks.manual=e.attackParts??[],delete e.attackParts),void 0!==e.formulaicAttacks&&(e.extraAttacks.formula??={},e.extraAttacks.formula.count=e.formulaicAttacks?.count?.formula||"",e.extraAttacks.formula.bonus=e.formulaicAttacks?.bonus?.formula||"",e.extraAttacks.formula.label=e.formulaicAttacks?.label||"",delete e.formulaicAttacks),e.extraAttacks.type||("min(3, ceil(@attributes.bab.total / 5) - 1)"===e.extraAttacks.formula?.count&&"@formulaicAttack * -5"===e.extraAttacks.formula?.bonus?(e.extraAttacks.type="standard",delete e.extraAttacks.formula.count,delete e.extraAttacks.formula.bonus,delete e.extraAttacks.formula.label,e.extraAttacks.manual?.length?e.extraAttacks.type="advanced":delete e.extraAttacks.manual):(e.extraAttacks.formula?.count?.length||e.extraAttacks.manual?.length)&&(e.extraAttacks.type="custom"),e.extraAttacks.formula?.count||delete e.extraAttacks.formula.count,e.extraAttacks.formula?.bonus||delete e.extraAttacks.formula.bonus,e.extraAttacks.formula?.label||delete e.extraAttacks.formula.label,e.extraAttacks.manual?.length>0||delete e.extraAttacks.manual),foundry.utils.isEmpty(e.extraAttacks.formula)&&delete e.extraAttacks.formula},_migrateActionObsoleteTypes=(e,t)=>{const s=e.measureTemplate?.size;void 0!==s&&"string"!=typeof s&&(e.measureTemplate.size=""+s);const a=e.duration?.value;null!=a&&"string"!=typeof a&&(e.duration.value=""+a)},_migrateActionUnusedData=(e,t)=>{e.formula||delete e.formula},_migrateItemChargeCost=function(e,t){const s=e.system.uses?.autoDeductCharges;if(void 0!==s)!1===s&&(t["system.uses.autoDeductChargesCost"]="0"),t["system.uses.-=autoDeductCharges"]=null;else if(0===e.system.level&&void 0===e.system.uses?.autoDeductChargesCost){const s=e.system.actions?.[0];!0===s?.uses?.autoDeductCharges&&void 0===t["system.uses.autoDeductChargesCost"]&&(t["system.uses.autoDeductChargesCost"]="0")}},_migrateItemLimitedUses=(e,t)=>{"unlimited"===e.system.uses?.per&&(t["system.uses.per"]="");const s=CONFIG.Item.documentClasses[e.type]?.isPhysical;s||"single"===e.system.uses?.per&&(t["system.uses.per"]="charges",t["system.uses.maxFormula"]="1")},_migrateActionDamageParts=function(e,t){const s=e.damage;for(const e of["parts","critParts","nonCritParts"]){const t=s[e];t&&t.forEach(((e,s)=>{if(Array.isArray(e)){const[a,i]=e;t[s]={formula:a,type:i}}}))}},_migrateActionDamageType=function(e,t){const s=["damage.parts","damage.critParts","damage.nonCritParts"];for(const t of s){const s=foundry.utils.getProperty(e,t);for(const e of s){const t=e.type;if("string"==typeof t){const s=pf1.components.ItemAction.defaultDamageType;s.values=_Action_ConvertDamageType(t),0===s.values.length&&(s.custom=t),e.type=s}else if(t instanceof Array){const s=pf1.components.ItemAction.defaultDamageType;s.values=t,e.type=s}}}},_migrateActionConditionals=function(e,t){for(const t of e.conditionals??[]){t._id||(t._id=foundry.utils.randomID(16)),Array.isArray(t.modifiers)||(t.modifiers=Object.values(t.modifiers));for(const e of t.modifiers){let t;if(e._id||(e._id=foundry.utils.randomID(16)),e.subTarget??="",(t=e.subTarget.match(/^attack\.([0-9]+)/))&&(e.subTarget="attack_"+t[1]),delete e.targets,delete e.subTargets,delete e.conditionalModifierTypes,delete e.conditionalCritical,"damage"===e.target&&!e.damageType){const t=pf1.components.ItemAction.defaultDamageType;t.values=_Action_ConvertDamageType(e.type),0===t.values.length&&(t.custom=e.type),e.damageType=t,e.type=""}}}},_migrateActionEnhOverride=function(e,t){"object"!=typeof e.enh&&(e.enh={value:e.enh??null}),(0==e.enh.override||null!==e.enh.value&&"number"!=typeof e.enh.value)&&(e.enh.value=null),delete e.enh.override},_migrateActionPrimaryAttack=function(e,t){void 0===e.naturalAttack?.primaryAttack&&foundry.utils.setProperty(e,"naturalAttack.primaryAttack",t.system.primaryAttack??!0)},_migrateActorCR=function(e,t){const s=foundry.utils.getProperty(e.system,"details.cr");"number"==typeof s?t["system.details.cr.base"]=s:null==s&&(t["system.details.cr.base"]=1),void 0!==foundry.utils.getProperty(e.system,"details.cr.total")&&(t["system.details.cr.-=total"]=null)},_migrateAttackAbility=function(e,t){void 0===foundry.utils.getProperty(e.system,"attributes.cmbAbility")&&(t["system.attributes.cmbAbility"]="str");void 0===foundry.utils.getProperty(e.system,"attributes.attack.meleeAbility")&&(t["system.attributes.attack.meleeAbility"]="str");void 0===foundry.utils.getProperty(e.system,"attributes.attack.rangedAbility")&&(t["system.attributes.attack.rangedAbility"]="dex")},_migrateActorSpellbookUsage=function(e,t){void 0!==foundry.utils.getProperty(e.system,"attributes.spells.usedSpellbooks")&&(t["system.attributes.spells.-=usedSpellbooks"]=null)},_migrateActorNullValues=function(e,t){const s={"system.attributes.energyDrain":foundry.utils.getProperty(e.system,"attributes.energyDrain")};for(const[t,a]of Object.entries(e.system.abilities||{}))s[`system.abilities.${t}.damage`]=a.damage,s[`system.abilities.${t}.drain`]=a.drain,s[`system.abilities.${t}.penalty`]=a.penalty;for(const[e,a]of Object.entries(s))null===a&&(t[e]=0)},_migrateActorSpellbookDomainSlots=function(e,t){const s=foundry.utils.getProperty(e.system,"attributes.spells.spellbooks")||{};for(const[e,a]of Object.entries(s)){if(void 0!==a.domainSlotValue)continue;t[`system.attributes.spells.spellbooks.${e}.domainSlotValue`]=1}},_migrateActorStatures=function(e,t){void 0===foundry.utils.getProperty(e.system,"traits.stature")&&(t["system.traits.stature"]="tall")},_migrateActorProficiencies=(e,t,{actor:s=null}={})=>{const a=e.system.traits?.weaponProf?.value;if(void 0===a)return;if(!Array.isArray(a)||0==a.length)return;const i={sim:"simple",mar:"martial"},n=Object.keys(i);if(a.some((e=>n.includes(e)))){const e=a.map((e=>i[e]||e));t["system.traits.weaponProf.value"]=e}},_migrateActorDefenseAbility=function(e,t){void 0===foundry.utils.getProperty(e.system,"attributes.ac.normal.ability")&&(t["system.attributes.ac.normal.ability"]="dex");void 0===foundry.utils.getProperty(e.system,"attributes.ac.touch.ability")&&(t["system.attributes.ac.touch.ability"]="dex");void 0===foundry.utils.getProperty(e.system,"attributes.cmd.dexAbility")&&(t["system.attributes.cmd.dexAbility"]="dex");void 0===foundry.utils.getProperty(e.system,"attributes.cmd.strAbility")&&(t["system.attributes.cmd.strAbility"]="str")},_migrateActorInitAbility=function(e,t){void 0===foundry.utils.getProperty(e.system,"attributes.init.ability")&&(t["system.attributes.init.ability"]="dex")},_migrateActorCMBRevamp=function(e,t){void 0!==foundry.utils.getProperty(e.system,"attributes.cmb.total")&&(t["system.attributes.cmb.-=total"]=null)},_migrateActorChangeRevamp=function(e,t){Object.keys(e.system.skills??{}).forEach((s=>{const a=`system.skills.${s}.`;void 0!==foundry.utils.getProperty(e,a+"changeBonus")&&(t[a+"-=changeBonus"]=null),Object.keys(foundry.utils.getProperty(e,`system.skills.${s}.subSkills`)??{}).forEach((a=>{const i=`system.skills.${s}.subSkills.${a}.`;void 0!==foundry.utils.getProperty(e,i+"changeBonus")&&(t[i+"-=changeBonus"]=null)}))}));Object.entries({"system.attributes.hp.max":"attributes.hp.-=max","system.attributes.ac.normal.total":"attributes.ac.normal.-=total","system.attributes.ac.touch.total":"attributes.ac.touch.-=total","system.attributes.ac.flatFooted.total":"attributes.ac.flatFooted.-=total","system.attributes.cmd.total":"attributes.cmd.-=total","system.attributes.cmd.flatFootedTotal":"attributes.cmd.-=flatFootedTotal","system.attributes.sr.total":"attributes.sr.-=total","system.attributes.init.total":"attributes.init.-=total"}).forEach((([s,a])=>{void 0!==foundry.utils.getProperty(e,s)&&(t["system."+a]=null)}))},_migrateActorInvaliddSkills=(e,t)=>{const s=e.system.skills;if(s)for(const[e,a]of Object.entries(s))if(a)for(const[s,i]of Object.entries(a.subSkills??{}))i||(t[`system.skills.${e}.subSkills.-=${s}`]=null);else t["system.skills.-="+e]=null},_migrateActorSkillRanks=function(e,t){const s=e.system.skills;if(s)for(const[e,a]of Object.entries(s))if(a){Number.isFinite(a.rank)||(t[`system.skills.${e}.rank`]=0);for(const[s,i]of Object.entries(a.subSkills??{}))i&&(Number.isFinite(i.rank)||(t[`system.skills.${e}.subSkills.${s}.rank`]=0))}},_migrateCarryBonus=function(e,t){if(void 0===foundry.utils.getProperty(e.system,"details.carryCapacity.bonus.user")){let s=foundry.utils.getProperty(e.system,"abilities.str.carryBonus");void 0!==s&&(s=s||0,t["system.details.carryCapacity.bonus.user"]=s),t["system.abilities.str.-=carryBonus"]=null}if(void 0===foundry.utils.getProperty(e.system,"details.carryCapacity.multiplier.user")){let s=foundry.utils.getProperty(e.system,"abilities.str.carryMultiplier");void 0!==s&&(s=s||1,t["system.details.carryCapacity.multiplier.user"]=s-1),t["system.abilities.str.-=carryMultiplier"]=null}},_migrateBuggedValues=function(e,t){const s=["system.details.xp.value","system.currency.pp","system.currency.gp","system.currency.sp","system.currency.cp","system.altCurrency.pp","system.altCurrency.gp","system.altCurrency.sp","system.altCurrency.cp"];for(const a of s){const s=foundry.utils.getProperty(e,a),i=parseInt(s??0);s!==i&&(t[a]=i)}},_migrateSpellbookUsage=function(e,t){const s=e.items.filter((e=>"spell"===e.type)).reduce(((e,t)=>t.system.spellbook?(e.includes(t.system.spellbook)||e.push(t.system.spellbook),e):e),[]);for(const a of s){const s=`system.attributes.spells.spellbooks.${a}.inUse`;!0!==foundry.utils.getProperty(e,s)&&(t[s]=!0)}},_migrateActorHP=function(e,t){for(const s of["system.attributes.hp","system.attributes.wounds","system.attributes.vigor"]){const a=foundry.utils.getProperty(e,s+".value");if(null==foundry.utils.getProperty(e,s+".offset")){const i=foundry.utils.getProperty(e,s+".max")??0;t[s+".offset"]=(a??0)-i}void 0!==a&&(t[s+".-=value"]=null)}},_migrateActorSenses=function(e,t,s){const a=e.system.traits?.senses;if("string"==typeof a){const i=s??e.prototypeToken;t["system.traits.senses"]={dv:i.brightSight,ts:0,bs:0,bse:0,ll:{enabled:i.flags?.pf1?.lowLightVision,multiplier:{dim:i.flags?.pf1?.lowLightVisionMultiplier??2,bright:i.flags?.pf1?.lowLightVisionMultiplierBright??2}},sid:!1,tr:0,si:!1,sc:0,custom:a}}"boolean"==typeof a?.sc&&(t["system.traits.senses.sc"]=a.sc?30:0),"boolean"==typeof a?.tr&&(t["system.traits.senses.tr"]=a.tr?120:0)},_migrateActorSkillJournals=function(e,t){const s=/^[a-zA-Z0-9]+$/;for(const[a,i]of Object.entries(e.system.skills??{}))if(i){for(const[e,n]of Object.entries(i.subSkills??{}))n&&n.journal?.match(s)&&(t[`system.skills.${a}.subSkills.${e}.journal`]="JournalEntry."+n.journal);i.journal?.match(s)&&(t[`system.skills.${a}.journal`]="JournalEntry."+i.journal)}},_migrateActorSubskillData=(e,t)=>{for(const[s,a]of Object.entries(e.system.skills??{}))if(a)for(const[e,i]of Object.entries(a.subSkills??{}))i&&void 0!==i.mod&&(t[`system.skills.${s}.subSkills.${e}.-=mod`]=null)},_migrateActorDRandER=function(e,t){const s=e.system.traits?.dr,a=e.system.traits?.eres;"string"==typeof s&&(t["system.traits.dr"]={value:[],custom:s}),"string"==typeof a&&(t["system.traits.eres"]={value:[],custom:a})},_migrateActorTraitsCustomToArray=(e,t)=>{["di","dv","ci","languages","armorProf","weaponProf"].forEach((s=>{const a=e.system.traits?.[s];if(!a||"string"!=typeof a.custom)return;const i=a.custom?.split(pf1.config.re.traitSeparator).map((e=>e.trim())).filter((e=>e))??[];i.length?t[`system.traits.${s}.custom`]=i:t[`system.traits.${s}.-=custom`]=null}))},_migrateActorFlags=(e,t)=>{const s=e.flags?.pf1;if(s&&s.visionPermission){t["flags.pf1.visionSharing.default"]="yes"===s.visionPermission.default;const e={yes:!0,no:!1,default:null};t["flags.pf1.visionSharing.users"]=Object.fromEntries(Object.entries(s.visionPermission?.users??{}).map((([t,s])=>[t,e[s.level]??null]))),t["flags.pf1.-=visionPermission"]=null}},_Action_ConvertDamageType=function(e){const t=[{tests:["b","blunt","bludgeoning"],result:"bludgeoning"},{tests:["p","pierce","piercing"],result:"piercing"},{tests:["s","slash","slashing"],result:"slashing"},{tests:["f","fire"],result:"fire"},{tests:["cold","c"],result:"cold"},{tests:["e","electric","electricity","electrical"],result:"electric"},{tests:["a","acid"],result:"acid"},{tests:["sonic"],result:"sonic"},{tests:["force"],result:"force"},{tests:["neg","negative"],result:"negative"},{tests:["pos","positive"],result:"positive"},{tests:["u","untyped","untype"],result:"untyped"}],s=e.split(/(?:\s*\/\s*|\s+and\s+|\s+or\s+)/i).map((e=>e.toLowerCase())),a=[];for(const e of t)for(const t of e.tests)s.includes(t)&&a.push(e.result);return a.length>0?a:[]},_migrateContainerPrice=(e,t)=>{"container"===e.type&&(void 0!==e.system.basePrice&&(t["system.price"]=e.system.basePrice,t["system.-=basePrice"]=null),void 0!==e.system.unidentified?.basePrice&&(t["system.unidentified.price"]=e.system.unidentified.basePrice,t["system.unidentified.-=basePrice"]=null))},_migrateContainerReduction=(e,t)=>{"container"===e.type&&void 0!==e.system.weightReduction&&(t["system.weight.reduction.percent"]=e.system.weightReduction,t["system.-=weightReduction"]=null)},_migrateItemType=function(e,t){const s=e.type,a=e.system[s+"Type"];null!=a&&(t["system.subType"]=a,t[`system.-=${s}Type`]=null)},_migrateItemTraitsCustomToArray=(e,t)=>{["armorProf","descriptors","languages","weaponGroups","weaponProf"].forEach((s=>{const a=e.system[s];if(!a||"string"!=typeof a.custom)return;const i=a.custom.split(pf1.config.re.traitSeparator).map((e=>e.trim())).filter((e=>e));i.length?t[`system.${s}.custom`]=i:t[`system.${s}.-=custom`]=null}))},_migrateItemMaterials=(e,t)=>{const s="throneglass";if(e.system.material?.addon){let a=e.system.material.addon;Array.isArray(a)||(t["system.material.addon"]=Object.entries(a).filter((([e,t])=>t)).map((([e])=>e)),a=t["system.material.addon"]),a.includes(s)&&(t["system.material.addon"]=a.filter((e=>e!==s)),e.system.material?.normal?.value||(t["system.material.normal.value"]=s))}if(e.system.armor?.material?.addon){let a=e.system.armor?.material?.addon;Array.isArray(a)||(t["system.armor.material.addon"]=Object.entries(a).filter((([e,t])=>t)).map((([e])=>e)),a=t["system.armor.material.addon"]),a.includes(s)&&(t["system.armor.material.addon"]=a.filter((e=>e!==s)),e.system.armor?.material?.normal?.value||(t["system.armor.material.normal.value"]=s))}},_migrateItemUnusedData=(e,t)=>{void 0!==e.system.priceUnits&&(t["system.-=priceUnits"]=null),void 0!==e.system.description?.chat&&(t["system.description.-=chat"]=null),void 0!==e.system.identifiedName&&(t["system.-=identifiedName"]=null),void 0!==e.system.typeName&&(t["system.-=typeName"]=null),void 0!==e.system.weaponData&&(t["system.-=weaponData"]=null),void 0!==e.system.range&&(t["system.-=range"]=null),void 0!==e.system.primaryAttack&&(t["system.-=primaryAttack"]=null),void 0!==e.system.activation&&(t["system.-=activation"]=null),void 0!==e.system.unchainedAction&&(t["system.-=unchainedAction"]=null),void 0!==e.system.measureTemplate&&(t["system.-=measureTemplate"]=null),void 0!==e.system.useCustomTag&&(t["system.-=useCustomTag"]=null,!1===e.system.useCustomTag&&void 0!==e.system.tag&&(t["system.-=tag"]=null)),void 0!==e.system.ammoType&&(t["system.-=ammoType"]=null,!e.system.ammo?.type&&e.system.ammoType&&(t["system.ammo.type"]=e.system.ammoType))},_migrateActorActiveEffects=async(e,t,s)=>{const a=[];for(const t of e.effects??[]){const e=await migrateActiveEffectData(t,s);foundry.utils.isEmpty(e)||(e._id=t._id,a.push(e))}a.length&&(t.effects=a)},_migrateActorUnusedData=(e,t)=>{void 0!==foundry.utils.getProperty(e.system,"attributes.vision")&&(t["system.attributes.-=vision"]=null),void 0!==foundry.utils.getProperty(e.prototypeToken,"flags.pf1.lowLightVision")&&(t["prototypeToken.flags.pf1.-=lowLightVision"]=null),void 0!==e.system.details?.xp?.max&&(t["system.details.xp.-=max"]=null),void 0!==e.system.resources&&(t["system.-=resources"]=null),void 0!==e.system.attributes?.conditions&&(t["system.attributes.-=conditions"]=null),void 0!==e.system.details.level&&(t["system.details.-=level"]=null)},_migrateItemTuples=(e,t)=>{"race"===e.type&&e.system.subTypes?.length&&"string"!=typeof e.system.subTypes[0]&&(t["system.subTypes"]=e.system.subTypes.flat()),e.system.tags?.length&&"string"!=typeof e.system.tags[0]&&(t["system.tags"]=e.system.tags.flat());const s=e.system.associations?.classes;s?.length&&"string"!=typeof s[0]&&(t["system.associations.classes"]=s.flat())},migrateActiveEffectData=async(e,t)=>{if(!t)return;const s={};e.name||(s.name="No Name");const getNewRelativeOrigin=async e=>{if("string"!=typeof e)return;const s=await fromUuid(e,{relative:t});return s instanceof Item&&s.actor===t?s.getRelativeUUID(t):void 0},a=e.flags?.pf1?.origin;if(a){if(!e.origin){const e=await getNewRelativeOrigin(a);e&&(s.origin=e)}s.flags??={},s.flags.pf1??={},s.flags.pf1["-=origin"]=null}if(e.origin){const t=await getNewRelativeOrigin(e.origin);t&&e.origin!==t&&(s.origin=t)}return e.statuses.some((e=>e.startsWith("pf1_")))&&(s.statuses=Array.from(new Set(e.statuses.map((e=>e.replace(/^pf1_/,"")))))),s},Te=Object.freeze(Object.defineProperty({__proto__:null,isMigrating:!1,migrateActiveEffectsToItems,migrateActor:async function migrateActor(e){await migrateActiveEffectsToItems(e);const t=await migrateActorData(e.toObject(),e.token,{actor:e});return foundry.utils.isEmpty(t)?null:e.update(t,marker())},migrateActorData,migrateActors,migrateCompendium,migrateCompendiums,migrateItem:async function migrateItem(e){const t=await migrateItemData(e.toObject(),e.actor,{item:e});return foundry.utils.isEmpty(t)?null:e.update(t,marker())},migrateItemActionData,migrateItemData,migrateItems,migrateModules:async function migrateModules({unlock:e=!0,state:t,dialog:s={}}={}){Hooks.callAll("pf1MigrationStarted",{scope:"modules"}),t??=initializeStateAndDialog(t,"PF1.Migration.Category.Modules",s),t.unlock=e,t.start();const a=game.packs.filter((e=>"module"===e.metadata.packageType));await migrateCompendiums(a,{unlock:e,state:t,noHooks:!0}),t.finish(),Hooks.callAll("pf1MigrationFinished",{scope:"modules"})},migrateScene,migrateSceneActors,migrateSceneData:async function migrateSceneData(){return foundry.utils.logCompatibilityWarning("pf1.migrations.migrateSceneData() is obsolete, please use pf1.migrations.migrateScene() instead",{since:"PF1 v10",until:"PF1 v11"}),{}},migrateSceneTokens,migrateScenes,migrateSystem:async function migrateSystem({unlock:e=!0,state:t,dialog:s={}}={}){Hooks.callAll("pf1MigrationStarted",{scope:"system"}),t??=initializeStateAndDialog(t,"PF1.Migration.Category.System",s),t.unlock=e,t.start();const a=game.packs.filter((e=>"system"===e.metadata.packageType));await migrateCompendiums(a,{unlock:e,state:t,dialog:!1,noHooks:!0}),t.finish(),Hooks.callAll("pf1MigrationFinished",{scope:"system"})},migrateToken,migrateTokenData,migrateWorld:async function migrateWorld({unlock:e=!1,systemPacks:t=!1,state:s,dialog:a={}}={}){const i=game.user.isGM;if(pf1.migrations.isMigrating&&game.users.activeGM)return void ui.notifications.error(game.i18n.localize("PF1.Migration.InProgress"));i&&await game.settings.set("pf1","migrating",!0),pf1.migrations.isMigrating=!0,Hooks.callAll("pf1MigrationStarted",{scope:"world"}),(s=initializeStateAndDialog(s,"PF1.Migration.Category.World",a)).unlock=e,s.start();const n=game.i18n.format("PF1.Migration.Start",{version:game.system.version}),o=ui.notifications.info(n,{permanent:!0,console:!1});if(console.log("PF1 | Migration | Starting..."),i&&await async function _migrateWorldSettings(){const e=game.settings.get("pf1","tooltipWorldConfig");void 0!==e.hideActorName&&(e.hideActorNameByDisposition,e.hideActorName,game.settings.set("pf1","tooltipWorldConfig",e))}(),await migrateActors({state:s,noHooks:!0}),await migrateItems({state:s,noHooks:!0}),await migrateScenes({state:s,noHooks:!0}),i){const a=game.packs.filter((e=>{const s=e.metadata.packageType;return!!["world","system"].includes(s)&&(!("system"===s&&!t)&&["Actor","Item","Scene"].includes(e.metadata.type))}));await migrateCompendiums(a,{unlock:e,state:s,noHooks:!0})}ui.notifications.remove(o),ui.notifications.info(game.i18n.format("PF1.Migration.End",{version:game.system.version}),{console:!1}),console.log("PF1 | Migration | Completed!"),i&&(await game.settings.set("pf1","systemMigrationVersion",game.system.version),await game.settings.set("pf1","migrating",!1)),s.finish(),Hooks.callAll("pf1MigrationFinished",{scope:"world"})},moved:Ce},Symbol.toStringTag,{value:"Module"}));globalThis.pf1=function moduleToObject(e){const t={};for(const s in e)"[object Module]"===Object.prototype.toString.call(e[s])?t[s]=moduleToObject(e[s]):t[s]=e[s];return t}({actionUse:K,applications:q,canvas:re,components:de,config:b,const:v,dice:me,documents:J,migrations:Te,registry:Fe,tooltip:null,utils:Pe,chat:X,skipConfirmPrompt:!1}),Hooks.once("init",(function(){console.log("PF1 | Initializing Pathfinder 1 System"),ui.notifications={info:(e,t={})=>!1!==t.console?console.log(e):void 0,warn:(e,t={})=>!1!==t.console?console.warn(e):void 0,error:(e,t={})=>!1!==t.console?console.error(e):void 0},globalThis.RollPF=RollPF,CONFIG.PF1=pf1.config,CONFIG.Canvas.layers.templates.layerClass=TemplateLayerPF,CONFIG.MeasuredTemplate.objectClass=MeasuredTemplatePF,CONFIG.MeasuredTemplate.defaults.originalAngle=CONFIG.MeasuredTemplate.defaults.angle,CONFIG.MeasuredTemplate.defaults.angle=90,CONFIG.Token.objectClass=TokenPF,CONFIG.Actor.documentClass=d,CONFIG.Actor.documentClasses={character:ActorCharacterPF,npc:ActorNPCPF,haunt:ActorHauntPF,trap:ActorTrapPF,vehicle:ActorVehiclePF,basic:BasicActorPF},CONFIG.Item.documentClass=h,CONFIG.Item.documentClasses={attack:ItemAttackPF,buff:ItemBuffPF,class:ItemClassPF,consumable:ItemConsumablePF,container:ItemContainerPF,equipment:ItemEquipmentPF,feat:ItemFeatPF,loot:ItemLootPF,race:ItemRacePF,spell:ItemSpellPF,weapon:ItemWeaponPF,implant:ItemImplantPF},CONFIG.Token.documentClass=TokenDocumentPF,CONFIG.ActiveEffect.documentClass=ActiveEffectPF,CONFIG.ActiveEffect.legacyTransferral=!1,CONFIG.Combat.documentClass=CombatPF,CONFIG.Combatant.documentClass=CombatantPF,CONFIG.ChatMessage.documentClass=ChatMessagePF,CONFIG.ui.items=ItemDirectoryPF,CONFIG.Dice.rolls.unshift(RollPF);for(const[e,t]of Object.entries(ue))CONFIG.Dice.termTypes[e]=t;for(const[e,t]of Object.entries(ce))CONFIG.Dice.termTypes[e]=t;CONFIG.Dice.rolls.push(D20RollPF),CONFIG.Dice.rolls.push(DamageRoll),Object.defineProperties(CONFIG.Dice,{RollPF:{get:()=>(foundry.utils.logCompatibilityWarning("CONFIG.Dice.RollPF is deprecated in favor of RollPF global and pf1.dice.RollPF",{since:"PF1 v10",until:"PF1 v11"}),pf1.dice.RollPF)}}),Object.defineProperties(CONFIG.Dice.rolls,{DamageRoll:{get:()=>(foundry.utils.logCompatibilityWarning("CONFIG.Dice.rolls.DamageRoll is deprecated in favor of pf1.dice.DamageRoll",{since:"PF1 v10",until:"PF1 v11"}),pf1.dice.DamageRoll)},D20RollPF:{get:()=>(foundry.utils.logCompatibilityWarning("CONFIG.Dice.rolls.D20RollPF is deprecated in favor of pf1.dice.D20RollPF",{since:"PF1 v10",until:"PF1 v11"}),pf1.dice.D20RollPF)}}),Object.defineProperties(pf1.config,{bonusModifiers:{get(){return foundry.utils.logCompatibilityWarning("pf1.config.bonusModifiers is deprecated in favor of pf1.config.bonusTypes",{since:"PF1 v10",until:"PF1 v11"}),this.bonusTypes}},stackingBonusModifiers:{get(){return foundry.utils.logCompatibilityWarning("pf1.config.stackingBonusModifiers is deprecated in favor of pf1.config.stackingBonusTypes",{since:"PF1 v10",until:"PF1 v11"}),this.stackingBonusTypes}}}),Object.defineProperty(pf1.config,"itemTypes",{get:()=>(foundry.utils.logCompatibilityWarning("pf1.config.itemTypes is deprecated in favor of CONFIG.Item.typeLabels",{since:"PF1 v10",until:"PF1 v11"}),Object.fromEntries(Object.entries(CONFIG.Item.typeLabels).map((([e,t])=>[e,game.i18n.localize(t)]))))}),Object.defineProperty(pf1.utils,"rollPreProcess",{get:()=>(foundry.utils.logCompatibilityWarning("pf1.utils.rollPreProcess.* is deprecated in favor of pf1.utils.roll.*",{since:"PF1 v10",until:"PF1 v11"}),pf1.utils.roll)}),Object.defineProperty(pf1.applications,"ActionChooser",{get:()=>(foundry.utils.logCompatibilityWarning("pf1.utils.ActionChooser is deprecated in favor of pf1.utils.ActionSelector",{since:"PF1 v10",until:"PF1 v11"}),pf1.applications.ActionSelector)}),CONFIG.time.roundTime=6,registerSystemSettings(),function setDefaultSceneScaling(e){e??=getDistanceSystem(),"metric"==e?(game.system.gridUnits="m",game.system.gridDistance=1.5):(game.system.gridUnits="ft",game.system.gridDistance=5)}(),preloadHandlebarsTemplates(),registerHandlebarsHelpers(),Actors.unregisterSheet("core",ActorSheet),Actors.registerSheet("pf1",ActorSheetPFCharacter,{label:"PF1.Sheet.PC",types:["character"],makeDefault:!0}),Actors.registerSheet("pf1",ActorSheetPFNPC,{label:"PF1.Sheet.NPC",types:["npc"],makeDefault:!0}),Actors.registerSheet("pf1",ActorSheetPFNPCLite,{label:"PF1.Sheet.NPCLite",types:["npc"],makeDefault:!1}),Actors.registerSheet("pf1",ActorSheetPFNPCLoot,{label:"PF1.Sheet.NPCLoot",types:["npc"],makeDefault:!1}),Actors.registerSheet("pf1",ActorSheetPFHaunt,{label:"PF1.Sheet.Haunt",types:["haunt"],makeDefault:!0}),Actors.registerSheet("pf1",ActorSheetPFTrap,{label:"PF1.Sheet.Trap",types:["trap"],makeDefault:!0}),Actors.registerSheet("pf1",ActorSheetPFVehicle,{label:"PF1.Sheet.Vehicle",types:["vehicle"],makeDefault:!0}),Actors.registerSheet("pf1",ActorSheetPFBasic,{label:"PF1.Sheet.Basic",types:["basic"],makeDefault:!0}),Items.unregisterSheet("core",ItemSheet),Items.registerSheet("pf1",ItemSheetPF,{label:"PF1.Sheet.Item",types:["class","feat","spell","consumable","equipment","loot","weapon","buff","attack","race","implant"],makeDefault:!0}),Items.registerSheet("pf1",ItemSheetPF_Container,{label:"PF1.Sheet.Container",types:["container"],makeDefault:!0});for(const e of Object.values(pf1.canvas.detectionModes))CONFIG.Canvas.detectionModes[e.ID]=new e({id:e.ID,label:e.LABEL,type:e.DETECTION_TYPE??DetectionMode.DETECTION_TYPES.SIGHT});CONFIG.Canvas.visionModes.darkvision=pf1.canvas.visionModes.darkvision,function initializeSocket(){game.socket.on("system.pf1",runSocketFunction)}(),function initializeModuleIntegration(){const e=game.settings.get("pf1","integration");game.modules.get("drag-ruler")?.active&&e.dragRuler&&Hooks.once("dragRuler.ready",(e=>{dragRuler.registerSystem("pf1",class Pf1SpeedProvider extends e{get colors(){return[{id:"walk",default:65280,name:"PF1.SETTINGS.DragRulerWalk"},{id:"dash",default:16776960,name:"PF1.SETTINGS.DragRulerDash"},{id:"run",default:16744448,name:"PF1.SETTINGS.DragRulerRun"}]}getRanges(e){const t=pf1.utils.convertDistance(this.getBaseSpeed(e))[0],s=e.actor.getRollData(),a=s.armor.type>=pf1.config.armorTypes.heavy,i=s.attributes.encumbrance.level>=pf1.config.encumbranceLevels.heavy;let n=4;return(a||i)&&(n=3),[{range:t,color:"walk"},{range:2*t,color:"dash"},{range:t*n,color:"run"}]}getBaseSpeed(e){canvas.grid.grid.getGridPositionFromPixels(e.x,e.y);const t=this.getSetting("useElevation"),s=e.actor.system.attributes.speed;if(t&&e.document.elevation>0){const e=s.fly.total;if(e>0)return e}if(t&&e.document.elevation<0){const e=s.burrow.total;if(e>0)return e}return s.land.total}get settings(){return[{id:"useElevation",name:"PF1.SETTINGS.DragRulerUseElevationName",hint:"PF1.SETTINGS.DragRulerUseElevationHint",scope:"world",type:Boolean,default:!0}]}})}))}();const e=[["damageTypes",DamageTypes],["materialTypes",MaterialTypes],["scriptCalls",ScriptCalls],["conditions",Conditions],["sources",Sources]];for(const[t,s]of e)pf1.registry[t]=new s;CONFIG.statusEffects=pf1.utils.init.getConditions(),Object.defineProperty(pf1.config,"conditions",{get:()=>(foundry.utils.logCompatibilityWarning("Conditions have been moved into the Conditions registry. Use pf1.registry.conditions.getLabels() for the old format, or access the collection for full condition data.",{since:"PF1 v10",until:"PF1 v11"}),pf1.registry.conditions.getLabels())}),Object.defineProperty(pf1.config,"conditionTextures",{get:()=>(foundry.utils.logCompatibilityWarning("Condition textures have been moved into the Conditions registry. Access the collection for full condition data.",{since:"PF1 v10",until:"PF1 v11"}),Object.fromEntries(pf1.registry.conditions.map((e=>[e.id,e.texture]))))}),Object.defineProperty(pf1.config,"conditionMechanics",{get:()=>(foundry.utils.logCompatibilityWarning("Condition mechanics have been moved into the Conditions registry. Access the collection for full condition data.",{since:"PF1 v10",until:"PF1 v11"}),Object.fromEntries(pf1.registry.conditions.map((e=>[e.id,e.mechanics]))))}),SquareGrid.prototype.measureDistances=measureDistances,Hooks.callAll("pf1PostInit")})),Hooks.once("i18nInit",(function(){const e=["abilities","abilitiesShort","alignments","alignmentsShort","currencies","distanceUnits","itemActionTypes","senses","skills","timePeriods","timePeriodsShort","durationEndEvents","savingThrows","ac","featTypes","featTypesPlurals","traitTypes","conditionTypes","lootTypes","flyManeuverabilities","favouredClassBonuses","abilityTypes","weaponGroups","weaponTypes","weaponProperties","spellComponents","spellDescriptors","spellSchools","spellLevels","spellcasting","armorProficiencies","weaponProficiencies","actorSizes","abilityActivationTypes","abilityActivationTypesPlurals","limitedUsePeriods","equipmentTypes","equipmentSlots","implantSlots","implantTypes","consumableTypes","attackTypes","buffTypes","divineFocus","classSavingThrows","classBAB","classTypes","measureTemplateTypes","creatureTypes","measureUnits","measureUnitsShort","languages","weaponHoldTypes","auraStrengths","conditionalTargets","bonusTypes","abilityActivationTypes_unchained","abilityActivationTypesPlurals_unchained","actorStatures","ammoTypes","damageResistances","vehicles","woundThresholdConditions"],t=["messageVisibility"],s=["bonusTypes","skills","traitTypes","conditionTypes","consumableTypes","creatureTypes","featTypes","weaponProperties","spellSchools","languages"],doLocalize=(e,t)=>{const a=Object.entries(e).reduce(((e,[s,a])=>("string"==typeof a?e.push([s,game.i18n.localize(a)]):"object"==typeof a&&e.push([s,doLocalize(a,`${t}.${s}`)]),e)),[]);return s.includes(t)&&a.sort((([e,t],[s,a])=>{if("misc"===e)return 1;if("misc"===s)return-1;const i="string"==typeof t?t:t._label,n="string"==typeof a?a:a._label;return i.localeCompare(n)})),a.reduce(((e,[t,s])=>(e[t]=s,e)),{})},doLocalizeKeys=(e,t=[])=>{for(const s of Object.keys(foundry.utils.flattenObject(e))){const a=s.split(".").at(-1);if(t.includes(a)){const t=foundry.utils.getProperty(e,s);t&&foundry.utils.setProperty(e,s,game.i18n.localize(t))}}};for(const t of e)pf1.config[t]=doLocalize(pf1.config[t],t);for(const e of t)pf1.const[e]=doLocalize(pf1.const[e],e);const a=["buffTargets","buffTargetCategories","contextNoteTargets","contextNoteCategories"];for(const e of a)for(const[t,s]of Object.entries(pf1.config[e]))pf1.config[e][t].label=game.i18n.localize(s.label);doLocalizeKeys(pf1.config.extraAttacks,["label","flavor"]),((e,t=[])=>{for(const s of t){const t=foundry.utils.getProperty(e,s);t&&foundry.utils.setProperty(e,s,game.i18n.localize(t))}})(pf1.config.levelAbilityScoreFeature,["name","system.description.value"]),doLocalizeKeys(pf1.config.pointBuy,["label"])})),Hooks.once("setup",(()=>{for(const e of Object.values(pf1.registry))e instanceof pf1.registry.Registry&&e.setup();registerSystemControls(),Hooks.callAll("pf1PostSetup")})),Hooks.once("ready",(async function(){const e=game.settings.get("pf1","tooltipConfig"),t=game.settings.get("pf1","tooltipWorldConfig");e.disable||t.disable||pf1.applications.TooltipPF.toggle(!0),window.addEventListener("resize",(()=>{pf1.tooltip?.setPosition()}));let s=game.settings.get("pf1","systemMigrationVersion");"number"==typeof s?s=s.toString()+".0":"string"==typeof s&&s.match(/^([0-9]+)\.([0-9]+)$/)&&(s+=".0");if(SemanticVersion.fromString("10.2").isHigherThan(SemanticVersion.fromString(s))){const e={};"0.0.0"===s&&(e.dialog=!1),await pf1.migrations.migrateWorld(e)}if(!game.user.isGM&&game.settings.get("pf1","migrating")&&ui.notifications.warn("PF1.Migration.InProgress",{localize:!0}),await migrateSystemSettings(),pf1.applications.compendiumBrowser.CompendiumBrowser.initializeBrowsers(),!game.settings.get("pf1","dontShowChangelog")){const e=game.settings.get("pf1","changelogVersion")||"0.0.1",t=SemanticVersion.fromString(e),s=SemanticVersion.fromString(game.system.version);if(s.isHigherThan(t)){new pf1.applications.ChangeLogWindow(t).render(!0,{focus:!0}),game.settings.set("pf1","changelogVersion",s.toString())}}Hooks.callAll("pf1PostReady")})),Hooks.on("renderChatMessage",((e,t,s)=>{hideRollInfo(e,t),hideGMSensitiveInfo(e,t),game.user.isGM||hideInvisibleTargets(e,t[0]),addTargetCallbacks(e,t),alterTargetDefense(e,t),game.settings.get("pf1","autoCollapseItemCards")&&t.find(".card-content").hide(),game.settings.get("pf1","hideChatButtons")&&t.find(".card-buttons").hide(),game.settings.get("pf1","accessibilityConfig"),alterAmmoRecovery(e,t)})),Hooks.on("renderChatPopout",((e,t,s)=>{game.settings.get("pf1","autoCollapseItemCards")&&t.find(".card-content").hide(),game.settings.get("pf1","hideChatButtons")&&t.find(".card-buttons").hide()})),Hooks.on("renderChatLog",((e,t)=>ItemPF.chatListeners(t))),Hooks.on("renderChatLog",((e,t)=>ActorPF.chatListeners(t))),Hooks.on("renderChatLog",((e,t)=>addReachListeners(t))),Hooks.on("renderChatPopout",((e,t)=>ItemPF.chatListeners(t))),Hooks.on("renderChatPopout",((e,t)=>ActorPF.chatListeners(t))),Hooks.on("renderAmbientLightConfig",((e,t)=>{addLowLightVisionToLightConfig(e,t)})),Hooks.on("renderTokenHUD",((e,t,s)=>{TokenQuickActions.addQuickActions(e,t,s)})),Hooks.on("deleteToken",(e=>pf1.tooltip?.unbind(e))),Hooks.on("updateToken",(e=>pf1.tooltip?.unbind(e))),Hooks.on("chatMessage",((e,t,s)=>!customRolls(t,s.speaker))),Hooks.on("renderActorDirectory",((e,t,s)=>{t.find("li.actor").each(((e,t)=>{t.addEventListener("drop",CurrencyTransfer._directoryDrop.bind(void 0,t.getAttribute("data-document-id")))}))})),Hooks.on("renderItemDirectory",((e,t,s)=>{t.find("li.item").each(((e,t)=>{t.addEventListener("drop",CurrencyTransfer._directoryDrop.bind(void 0,t.getAttribute("data-document-id")))}))})),Hooks.on("dropActorSheetData",((e,t,s)=>{"Currency"===s.type&&t._onDropCurrency(event,s)})),Hooks.once("ready",(()=>{Hooks.on("hotbarDrop",((e,t,s)=>{let a;const{type:i,uuid:n}=t;switch(i){case"Item":a=createItemMacro(n,s);break;case"action":a=createActionMacro(t.actionId,n,s);break;case"skill":a=createSkillMacro(t.skill,n,s);break;case"save":a=createSaveMacro(t.save,n,s);break;case"defenses":case"cmb":case"concentration":case"cl":case"attack":case"abilityScore":case"initiative":case"bab":a=createMiscActorMacro(i,n,s,t);break;default:return!0}if(null==a||a instanceof Promise)return!1}))})),Hooks.on("renderTokenConfig",(async(e,t)=>{let s=e.object;s instanceof Actor&&(s=s.prototypeToken);const a=s.flags?.pf1??{},i={flags:a},n=await renderTemplate("systems/pf1/templates/foundry/token/token-sizing.hbs",i),o=game.settings.get("pf1","systemVision");t.find('.tab[data-tab="appearance"] > *:nth-child(3)').after(n);const r=t[0].querySelector('.tab[data-tab="vision"]'),l=!0===a.customVisionRules||!o,toggleCustomVision=e=>{r.querySelector("select[name='sight.visionMode']").disabled=!e;const t=r.querySelector(".tab[data-tab='detection']");for(const s of t.querySelectorAll("input,select"))"flags.pf1.customVisionRules"!==s.name&&(s.disabled=!e);t.classList.toggle("disabled",!e)};l||toggleCustomVision(l);const c=await renderTemplate("systems/pf1/templates/foundry/token/custom-vision.hbs",{enabled:l||!o,noSystemVision:!o});$(r).append(c),r.querySelector('input[name="flags.pf1.customVisionRules"]').addEventListener("change",(async e=>{toggleCustomVision(e.target.checked)})),e.setPosition()})),Hooks.on("renderSidebarTab",((e,t)=>{if(e instanceof Settings){const e=$(`<button>${game.i18n.localize("PF1.Changelog")}</button>`),s=$(`<button>${game.i18n.localize("PF1.Help.Label")}</button>`),a=$(`<button>${game.i18n.localize("PF1.Troubleshooter.Button")}</button>`);t.find("#game-details").after($(`<h2>${game.i18n.localize("PF1.Title")}</h2>`),$("<div id='pf1-details'>").append(e,s,a)),e.click((()=>{(Object.values(ui.windows).find((e=>"changelog"==e.id))??new ChangeLogWindow).render(!0,{focus:!0})})),s.click((()=>pf1.applications.helpBrowser.openUrl("Help/Home"))),a.click((()=>pf1.applications.Troubleshooter.open()))}})),Hooks.on("controlToken",(()=>{canvas.perception.update({initializeLighting:!0},!0)}));{const expireFromTokens=function(){if(game.users.activeGM?.isSelf)for(const e of canvas.tokens.placeables)e.combatant?.combat?.started||e.actor?.expireActiveEffects&&e.actor.expireActiveEffects()};Hooks.on("updateWorldTime",(()=>{expireFromTokens()})),Hooks.on("canvasReady",(()=>{expireFromTokens()}))}window.addEventListener("focus",(()=>pf1.skipConfirmPrompt=!1),{passive:!0});export{K as actionUse,q as applications,re as canvas,X as chat,de as components,b as config,v as const,me as dice,J as documents,Te as migrations,Fe as registry,Pe as utils};
//# sourceMappingURL=pf1.js.map
